// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Douyin {

  /// <summary>Holder for reflection information generated from dy.proto</summary>
  public static partial class DyReflection {

    #region Descriptor
    /// <summary>File descriptor for dy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CghkeS5wcm90bxIGZG91eWluIuQCCghSZXNwb25zZRIlCgxtZXNzYWdlc0xp",
            "c3QYASADKAsyDy5kb3V5aW4uTWVzc2FnZRIOCgZjdXJzb3IYAiABKAkSFQoN",
            "ZmV0Y2hJbnRlcnZhbBgDIAEoBBILCgNub3cYBCABKAQSEwoLaW50ZXJuYWxF",
            "eHQYBSABKAkSEQoJZmV0Y2hUeXBlGAYgASgNEjYKC3JvdXRlUGFyYW1zGAcg",
            "AygLMiEuZG91eWluLlJlc3BvbnNlLlJvdXRlUGFyYW1zRW50cnkSGQoRaGVh",
            "cnRiZWF0RHVyYXRpb24YCCABKAQSDwoHbmVlZEFjaxgJIAEoCBISCgpwdXNo",
            "U2VydmVyGAogASgJEhIKCmxpdmVDdXJzb3IYCyABKAkSFQoNaGlzdG9yeU5v",
            "TW9yZRgMIAEoCBoyChBSb3V0ZVBhcmFtc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEimgEKB01lc3NhZ2USDgoGbWV0aG9kGAEgASgJ",
            "Eg8KB3BheWxvYWQYAiABKAwSDQoFbXNnSWQYAyABKAMSDwoHbXNnVHlwZRgE",
            "IAEoBRIOCgZvZmZzZXQYBSABKAMSFQoNbmVlZFdyZHNTdG9yZRgGIAEoCBIT",
            "Cgt3cmRzVmVyc2lvbhgHIAEoAxISCgp3cmRzU3ViS2V5GAggASgJIsoECgtD",
            "aGF0TWVzc2FnZRIeCgZjb21tb24YASABKAsyDi5kb3V5aW4uQ29tbW9uEhoK",
            "BHVzZXIYAiABKAsyDC5kb3V5aW4uVXNlchIPCgdjb250ZW50GAMgASgJEhcK",
            "D3Zpc2libGVUb1NlbmRlchgEIAEoCBImCg9iYWNrZ3JvdW5kSW1hZ2UYBSAB",
            "KAsyDS5kb3V5aW4uSW1hZ2USGwoTZnVsbFNjcmVlblRleHRDb2xvchgGIAEo",
            "CRIoChFiYWNrZ3JvdW5kSW1hZ2VWMhgHIAEoCzINLmRvdXlpbi5JbWFnZRIy",
            "ChBwdWJsaWNBcmVhQ29tbW9uGAggASgLMhguZG91eWluLlB1YmxpY0FyZWFD",
            "b21tb24SIAoJZ2lmdEltYWdlGAkgASgLMg0uZG91eWluLkltYWdlEhIKCmFn",
            "cmVlTXNnSWQYCyABKAQSFQoNcHJpb3JpdHlMZXZlbBgMIAEoDRI4ChNsYW5k",
            "c2NhcGVBcmVhQ29tbW9uGA0gASgLMhsuZG91eWluLkxhbmRzY2FwZUFyZWFD",
            "b21tb24SEQoJZXZlbnRUaW1lGA8gASgEEhIKCnNlbmRSZXZpZXcYECABKAgS",
            "FAoMZnJvbUludGVyY29tGBEgASgIEhwKFGludGVyY29tSGlkZVVzZXJDYXJk",
            "GBIgASgIEg4KBmNoYXRCeRgUIAEoCRIeChZpbmRpdmlkdWFsQ2hhdFByaW9y",
            "aXR5GBUgASgNEiAKCnJ0ZkNvbnRlbnQYFiABKAsyDC5kb3V5aW4uVGV4dCKh",
            "AQoTTGFuZHNjYXBlQXJlYUNvbW1vbhIQCghzaG93SGVhZBgBIAEoCBIUCgxz",
            "aG93Tmlja25hbWUYAiABKAgSFQoNc2hvd0ZvbnRDb2xvchgDIAEoCBIWCg5j",
            "b2xvclZhbHVlTGlzdBgEIAMoCRIzChNjb21tZW50VHlwZVRhZ3NMaXN0GAUg",
            "AygOMhYuZG91eWluLkNvbW1lbnRUeXBlVGFnIocDChJSb29tVXNlclNlcU1l",
            "c3NhZ2USHgoGY29tbW9uGAEgASgLMg4uZG91eWluLkNvbW1vbhI4CglyYW5r",
            "c0xpc3QYAiADKAsyJS5kb3V5aW4uUm9vbVVzZXJTZXFNZXNzYWdlQ29udHJp",
            "YnV0b3ISDQoFdG90YWwYAyABKAMSDgoGcG9wU3RyGAQgASgJEjgKCXNlYXRz",
            "TGlzdBgFIAMoCzIlLmRvdXlpbi5Sb29tVXNlclNlcU1lc3NhZ2VDb250cmli",
            "dXRvchISCgpwb3B1bGFyaXR5GAYgASgDEhEKCXRvdGFsVXNlchgHIAEoAxIU",
            "Cgx0b3RhbFVzZXJTdHIYCCABKAkSEAoIdG90YWxTdHIYCSABKAkSGwoTb25s",
            "aW5lVXNlckZvckFuY2hvchgKIAEoCRIYChB0b3RhbFB2Rm9yQW5jaG9yGAsg",
            "ASgJEhcKD3VwUmlnaHRTdGF0c1N0chgMIAEoCRIfChd1cFJpZ2h0U3RhdHNT",
            "dHJDb21wbGV0ZRgNIAEoCSJeChFDb21tb25UZXh0TWVzc2FnZRIeCgZjb21t",
            "b24YASABKAsyDi5kb3V5aW4uQ29tbW9uEhoKBHVzZXIYAiABKAsyDC5kb3V5",
            "aW4uVXNlchINCgVzY2VuZRgDIAEoCSKJAQoWVXBkYXRlRmFuVGlja2V0TWVz",
            "c2FnZRIeCgZjb21tb24YASABKAsyDi5kb3V5aW4uQ29tbW9uEh4KFnJvb21G",
            "YW5UaWNrZXRDb3VudFRleHQYAiABKAkSGgoScm9vbUZhblRpY2tldENvdW50",
            "GAMgASgEEhMKC2ZvcmNlVXBkYXRlGAQgASgIIqkBCh1Sb29tVXNlclNlcU1l",
            "c3NhZ2VDb250cmlidXRvchINCgVzY29yZRgBIAEoBBIaCgR1c2VyGAIgASgL",
            "MgwuZG91eWluLlVzZXISDAoEcmFuaxgDIAEoBBINCgVkZWx0YRgEIAEoBBIQ",
            "Cghpc0hpZGRlbhgFIAEoCBIYChBzY29yZURlc2NyaXB0aW9uGAYgASgJEhQK",
            "DGV4YWN0bHlTY29yZRgHIAEoCSKxBgoLR2lmdE1lc3NhZ2USHgoGY29tbW9u",
            "GAEgASgLMg4uZG91eWluLkNvbW1vbhIOCgZnaWZ0SWQYAiABKAQSFgoOZmFu",
            "VGlja2V0Q291bnQYAyABKAQSEgoKZ3JvdXBDb3VudBgEIAEoBBITCgtyZXBl",
            "YXRDb3VudBgFIAEoBBISCgpjb21ib0NvdW50GAYgASgEEhoKBHVzZXIYByAB",
            "KAsyDC5kb3V5aW4uVXNlchIcCgZ0b1VzZXIYCCABKAsyDC5kb3V5aW4uVXNl",
            "chIRCglyZXBlYXRFbmQYCSABKA0SJgoKdGV4dEVmZmVjdBgKIAEoCzISLmRv",
            "dXlpbi5UZXh0RWZmZWN0Eg8KB2dyb3VwSWQYCyABKAQSFwoPaW5jb21lVGFz",
            "a2dpZnRzGAwgASgEEhoKEnJvb21GYW5UaWNrZXRDb3VudBgNIAEoBBIoCghw",
            "cmlvcml0eRgOIAEoCzIWLmRvdXlpbi5HaWZ0SU1Qcmlvcml0eRIgCgRnaWZ0",
            "GA8gASgLMhIuZG91eWluLkdpZnRTdHJ1Y3QSDQoFbG9nSWQYECABKAkSEAoI",
            "c2VuZFR5cGUYESABKAQSMgoQcHVibGljQXJlYUNvbW1vbhgSIAEoCzIYLmRv",
            "dXlpbi5QdWJsaWNBcmVhQ29tbW9uEiUKD3RyYXlEaXNwbGF5VGV4dBgTIAEo",
            "CzIMLmRvdXlpbi5UZXh0EhwKFGJhbm5lZERpc3BsYXlFZmZlY3RzGBQgASgE",
            "EhYKDmRpc3BsYXlGb3JTZWxmGBkgASgIEhgKEGludGVyYWN0R2lmdEluZm8Y",
            "GiABKAkSEwoLZGl5SXRlbUluZm8YGyABKAkSFwoPbWluQXNzZXRTZXRMaXN0",
            "GBwgAygEEhIKCnRvdGFsQ291bnQYHSABKAQSGAoQY2xpZW50R2lmdFNvdXJj",
            "ZRgeIAEoDRIVCg10b1VzZXJJZHNMaXN0GCAgAygEEhAKCHNlbmRUaW1lGCEg",
            "ASgEEhsKE2ZvcmNlRGlzcGxheUVmZmVjdHMYIiABKAQSDwoHdHJhY2VJZBgj",
            "IAEoCRIXCg9lZmZlY3REaXNwbGF5VHMYJCABKAQiowMKCkdpZnRTdHJ1Y3QS",
            "HAoFaW1hZ2UYASABKAsyDS5kb3V5aW4uSW1hZ2USEAoIZGVzY3JpYmUYAiAB",
            "KAkSDgoGbm90aWZ5GAMgASgIEhAKCGR1cmF0aW9uGAQgASgEEgoKAmlkGAUg",
            "ASgEEhIKCmZvckxpbmttaWMYByABKAgSDgoGZG9vZGxlGAggASgIEhMKC2Zv",
            "ckZhbnNjbHViGAkgASgIEg0KBWNvbWJvGAogASgIEgwKBHR5cGUYCyABKA0S",
            "FAoMZGlhbW9uZENvdW50GAwgASgNEhoKEmlzRGlzcGxheWVkT25QYW5lbBgN",
            "IAEoCBIXCg9wcmltYXJ5RWZmZWN0SWQYDiABKAQSJAoNZ2lmdExhYmVsSWNv",
            "bhgPIAEoCzINLmRvdXlpbi5JbWFnZRIMCgRuYW1lGBAgASgJEg4KBnJlZ2lv",
            "bhgRIAEoCRIOCgZtYW51YWwYEiABKAkSEQoJZm9yQ3VzdG9tGBMgASgIEhsK",
            "BGljb24YFSABKAsyDS5kb3V5aW4uSW1hZ2USEgoKYWN0aW9uVHlwZRgWIAEo",
            "DSJVCg5HaWZ0SU1Qcmlvcml0eRIWCg5xdWV1ZVNpemVzTGlzdBgBIAMoBBIZ",
            "ChFzZWxmUXVldWVQcmlvcml0eRgCIAEoBBIQCghwcmlvcml0eRgDIAEoBCJl",
            "CgpUZXh0RWZmZWN0EioKCHBvcnRyYWl0GAEgASgLMhguZG91eWluLlRleHRF",
            "ZmZlY3REZXRhaWwSKwoJbGFuZHNjYXBlGAIgASgLMhguZG91eWluLlRleHRF",
            "ZmZlY3REZXRhaWwitgIKEFRleHRFZmZlY3REZXRhaWwSGgoEdGV4dBgBIAEo",
            "CzIMLmRvdXlpbi5UZXh0EhQKDHRleHRGb250U2l6ZRgCIAEoDRIhCgpiYWNr",
            "Z3JvdW5kGAMgASgLMg0uZG91eWluLkltYWdlEg0KBXN0YXJ0GAQgASgNEhAK",
            "CGR1cmF0aW9uGAUgASgNEgkKAXgYBiABKA0SCQoBeRgHIAEoDRINCgV3aWR0",
            "aBgIIAEoDRIOCgZoZWlnaHQYCSABKA0SEAoIc2hhZG93RHgYCiABKA0SEAoI",
            "c2hhZG93RHkYCyABKA0SFAoMc2hhZG93UmFkaXVzGAwgASgNEhMKC3NoYWRv",
            "d0NvbG9yGA0gASgJEhMKC3N0cm9rZUNvbG9yGA4gASgJEhMKC3N0cm9rZVdp",
            "ZHRoGA8gASgNIu8ECg1NZW1iZXJNZXNzYWdlEh4KBmNvbW1vbhgBIAEoCzIO",
            "LmRvdXlpbi5Db21tb24SGgoEdXNlchgCIAEoCzIMLmRvdXlpbi5Vc2VyEhMK",
            "C21lbWJlckNvdW50GAMgASgEEh4KCG9wZXJhdG9yGAQgASgLMgwuZG91eWlu",
            "LlVzZXISFAoMaXNTZXRUb0FkbWluGAUgASgIEhEKCWlzVG9wVXNlchgGIAEo",
            "CBIRCglyYW5rU2NvcmUYByABKAQSEQoJdG9wVXNlck5vGAggASgEEhEKCWVu",
            "dGVyVHlwZRgJIAEoBBIOCgZhY3Rpb24YCiABKAQSGQoRYWN0aW9uRGVzY3Jp",
            "cHRpb24YCyABKAkSDgoGdXNlcklkGAwgASgEEioKDGVmZmVjdENvbmZpZxgN",
            "IAEoCzIULmRvdXlpbi5FZmZlY3RDb25maWcSDgoGcG9wU3RyGA4gASgJEi8K",
            "EWVudGVyRWZmZWN0Q29uZmlnGA8gASgLMhQuZG91eWluLkVmZmVjdENvbmZp",
            "ZxImCg9iYWNrZ3JvdW5kSW1hZ2UYECABKAsyDS5kb3V5aW4uSW1hZ2USKAoR",
            "YmFja2dyb3VuZEltYWdlVjIYESABKAsyDS5kb3V5aW4uSW1hZ2USJwoRYW5j",
            "aG9yRGlzcGxheVRleHQYEiABKAsyDC5kb3V5aW4uVGV4dBIyChBwdWJsaWNB",
            "cmVhQ29tbW9uGBMgASgLMhguZG91eWluLlB1YmxpY0FyZWFDb21tb24SGAoQ",
            "dXNlckVudGVyVGlwVHlwZRgUIAEoBBIaChJhbmNob3JFbnRlclRpcFR5cGUY",
            "FSABKAQibgoQUHVibGljQXJlYUNvbW1vbhIgCgl1c2VyTGFiZWwYASABKAsy",
            "DS5kb3V5aW4uSW1hZ2USGQoRdXNlckNvbnN1bWVJblJvb20YAiABKAQSHQoV",
            "dXNlclNlbmRHaWZ0Q250SW5Sb29tGAMgASgEIpYFCgxFZmZlY3RDb25maWcS",
            "DAoEdHlwZRgBIAEoBBIbCgRpY29uGAIgASgLMg0uZG91eWluLkltYWdlEhEK",
            "CWF2YXRhclBvcxgDIAEoBBIaCgR0ZXh0GAQgASgLMgwuZG91eWluLlRleHQS",
            "HwoIdGV4dEljb24YBSABKAsyDS5kb3V5aW4uSW1hZ2USEAoIc3RheVRpbWUY",
            "BiABKA0SEwoLYW5pbUFzc2V0SWQYByABKAQSHAoFYmFkZ2UYCCABKAsyDS5k",
            "b3V5aW4uSW1hZ2USHAoUZmxleFNldHRpbmdBcnJheUxpc3QYCSADKAQSJgoP",
            "dGV4dEljb25PdmVybGF5GAogASgLMg0uZG91eWluLkltYWdlEiQKDWFuaW1h",
            "dGVkQmFkZ2UYCyABKAsyDS5kb3V5aW4uSW1hZ2USFQoNaGFzU3dlZXBMaWdo",
            "dBgMIAEoCBIgChh0ZXh0RmxleFNldHRpbmdBcnJheUxpc3QYDSADKAQSGQoR",
            "Y2VudGVyQW5pbUFzc2V0SWQYDiABKAQSIwoMZHluYW1pY0ltYWdlGA8gASgL",
            "Mg0uZG91eWluLkltYWdlEjQKCGV4dHJhTWFwGBAgAygLMiIuZG91eWluLkVm",
            "ZmVjdENvbmZpZy5FeHRyYU1hcEVudHJ5EhYKDm1wNEFuaW1Bc3NldElkGBEg",
            "ASgEEhAKCHByaW9yaXR5GBIgASgEEhMKC21heFdhaXRUaW1lGBMgASgEEg8K",
            "B2RyZXNzSWQYFCABKAkSEQoJYWxpZ25tZW50GBUgASgEEhcKD2FsaWdubWVu",
            "dE9mZnNldBgWIAEoBBovCg1FeHRyYU1hcEVudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEifAoEVGV4dBILCgNrZXkYASABKAkSFQoNZGVm",
            "YXVsdFBhdHRlchgCIAEoCRIpCg1kZWZhdWx0Rm9ybWF0GAMgASgLMhIuZG91",
            "eWluLlRleHRGb3JtYXQSJQoKcGllY2VzTGlzdBgEIAMoCzIRLmRvdXlpbi5U",
            "ZXh0UGllY2UitAIKCVRleHRQaWVjZRIMCgR0eXBlGAEgASgIEiIKBmZvcm1h",
            "dBgCIAEoCzISLmRvdXlpbi5UZXh0Rm9ybWF0EhMKC3N0cmluZ1ZhbHVlGAMg",
            "ASgJEigKCXVzZXJWYWx1ZRgEIAEoCzIVLmRvdXlpbi5UZXh0UGllY2VVc2Vy",
            "EigKCWdpZnRWYWx1ZRgFIAEoCzIVLmRvdXlpbi5UZXh0UGllY2VHaWZ0EioK",
            "CmhlYXJ0VmFsdWUYBiABKAsyFi5kb3V5aW4uVGV4dFBpZWNlSGVhcnQSNAoP",
            "cGF0dGVyblJlZlZhbHVlGAcgASgLMhsuZG91eWluLlRleHRQaWVjZVBhdHRl",
            "cm5SZWYSKgoKaW1hZ2VWYWx1ZRgIIAEoCzIWLmRvdXlpbi5UZXh0UGllY2VJ",
            "bWFnZSJDCg5UZXh0UGllY2VJbWFnZRIcCgVpbWFnZRgBIAEoCzINLmRvdXlp",
            "bi5JbWFnZRITCgtzY2FsaW5nUmF0ZRgCIAEoAiI6ChNUZXh0UGllY2VQYXR0",
            "ZXJuUmVmEgsKA2tleRgBIAEoCRIWCg5kZWZhdWx0UGF0dGVybhgCIAEoCSIf",
            "Cg5UZXh0UGllY2VIZWFydBINCgVjb2xvchgBIAEoCSJECg1UZXh0UGllY2VH",
            "aWZ0Eg4KBmdpZnRJZBgBIAEoBBIjCgduYW1lUmVmGAIgASgLMhIuZG91eWlu",
            "LlBhdHRlcm5SZWYiMQoKUGF0dGVyblJlZhILCgNrZXkYASABKAkSFgoOZGVm",
            "YXVsdFBhdHRlcm4YAiABKAkiPgoNVGV4dFBpZWNlVXNlchIaCgR1c2VyGAEg",
            "ASgLMgwuZG91eWluLlVzZXISEQoJd2l0aENvbG9uGAIgASgIIqMBCgpUZXh0",
            "Rm9ybWF0Eg0KBWNvbG9yGAEgASgJEgwKBGJvbGQYAiABKAgSDgoGaXRhbGlj",
            "GAMgASgIEg4KBndlaWdodBgEIAEoDRITCgtpdGFsaWNBbmdsZRgFIAEoDRIQ",
            "Cghmb250U2l6ZRgGIAEoDRIaChJ1c2VIZWlnaExpZ2h0Q29sb3IYByABKAgS",
            "FQoNdXNlUmVtb3RlQ2xvchgIIAEoCCLKAgoLTGlrZU1lc3NhZ2USHgoGY29t",
            "bW9uGAEgASgLMg4uZG91eWluLkNvbW1vbhINCgVjb3VudBgCIAEoBBINCgV0",
            "b3RhbBgDIAEoBBINCgVjb2xvchgEIAEoBBIaCgR1c2VyGAUgASgLMgwuZG91",
            "eWluLlVzZXISDAoEaWNvbhgGIAEoCRIyChBkb3VibGVMaWtlRGV0YWlsGAcg",
            "ASgLMhguZG91eWluLkRvdWJsZUxpa2VEZXRhaWwSNgoSZGlzcGxheUNvbnRy",
            "b2xJbmZvGAggASgLMhouZG91eWluLkRpc3BsYXlDb250cm9sSW5mbxIXCg9s",
            "aW5rbWljR3Vlc3RVaWQYCSABKAQSDQoFc2NlbmUYCiABKAkSMAoPcGljb0Rp",
            "c3BsYXlJbmZvGAsgASgLMhcuZG91eWluLlBpY29EaXNwbGF5SW5mbyLMAQoN",
            "U29jaWFsTWVzc2FnZRIeCgZjb21tb24YASABKAsyDi5kb3V5aW4uQ29tbW9u",
            "EhoKBHVzZXIYAiABKAsyDC5kb3V5aW4uVXNlchIRCglzaGFyZVR5cGUYAyAB",
            "KAQSDgoGYWN0aW9uGAQgASgEEhMKC3NoYXJlVGFyZ2V0GAUgASgJEhMKC2Zv",
            "bGxvd0NvdW50GAYgASgEEjIKEHB1YmxpY0FyZWFDb21tb24YByABKAsyGC5k",
            "b3V5aW4uUHVibGljQXJlYUNvbW1vbiJsCg9QaWNvRGlzcGxheUluZm8SFQoN",
            "Y29tYm9TdW1Db3VudBgBIAEoBBINCgVlbW9qaRgCIAEoCRIgCgllbW9qaUlj",
            "b24YAyABKAsyDS5kb3V5aW4uSW1hZ2USEQoJZW1vamlUZXh0GAQgASgJIl8K",
            "EERvdWJsZUxpa2VEZXRhaWwSEgoKZG91YmxlRmxhZxgBIAEoCBINCgVzZXFJ",
            "ZBgCIAEoDRITCgtyZW5ld2Fsc051bRgDIAEoDRITCgt0cmlnZ2Vyc051bRgE",
            "IAEoDSI5ChJEaXNwbGF5Q29udHJvbEluZm8SEAoIc2hvd1RleHQYASABKAgS",
            "EQoJc2hvd0ljb25zGAIgASgIIsgBChJFcGlzb2RlQ2hhdE1lc3NhZ2USHwoG",
            "Y29tbW9uGAEgASgLMg8uZG91eWluLk1lc3NhZ2USGgoEdXNlchgCIAEoCzIM",
            "LmRvdXlpbi5Vc2VyEg8KB2NvbnRlbnQYAyABKAkSFgoOdmlzaWJsZVRvU2Vu",
            "ZGUYBCABKAgSIAoJZ2lmdEltYWdlGAcgASgLMg0uZG91eWluLkltYWdlEhIK",
            "CmFncmVlTXNnSWQYCCABKAQSFgoOY29sb3JWYWx1ZUxpc3QYCSADKAkiiAEK",
            "GE1hdGNoQWdhaW5zdFNjb3JlTWVzc2FnZRIeCgZjb21tb24YASABKAsyDi5k",
            "b3V5aW4uQ29tbW9uEiAKB2FnYWluc3QYAiABKAsyDy5kb3V5aW4uQWdhaW5z",
            "dBITCgttYXRjaFN0YXR1cxgDIAEoDRIVCg1kaXNwbGF5U3RhdHVzGAQgASgN",
            "IpIDCgdBZ2FpbnN0EhAKCGxlZnROYW1lGAEgASgJEh8KCGxlZnRMb2dvGAIg",
            "ASgLMg0uZG91eWluLkltYWdlEhAKCGxlZnRHb2FsGAMgASgJEhEKCXJpZ2h0",
            "TmFtZRgGIAEoCRIgCglyaWdodExvZ28YByABKAsyDS5kb3V5aW4uSW1hZ2US",
            "EQoJcmlnaHRHb2FsGAggASgJEhEKCXRpbWVzdGFtcBgLIAEoBBIPCgd2ZXJz",
            "aW9uGAwgASgEEhIKCmxlZnRUZWFtSWQYDSABKAQSEwoLcmlnaHRUZWFtSWQY",
            "DiABKAQSGQoRZGlmZlNlaTJhYnNTZWNvbmQYDyABKAQSFgoOZmluYWxHb2Fs",
            "U3RhZ2UYECABKA0SGAoQY3VycmVudEdvYWxTdGFnZRgRIAEoDRIZChFsZWZ0",
            "U2NvcmVBZGRpdGlvbhgSIAEoDRIaChJyaWdodFNjb3JlQWRkaXRpb24YEyAB",
            "KA0SEwoLbGVmdEdvYWxJbnQYFCABKAQSFAoMcmlnaHRHb2FsSW50GBUgASgE",
            "ItEDCgZDb21tb24SDgoGbWV0aG9kGAEgASgJEg0KBW1zZ0lkGAIgASgEEg4K",
            "BnJvb21JZBgDIAEoBBISCgpjcmVhdGVUaW1lGAQgASgEEg8KB21vbml0b3IY",
            "BSABKA0SEQoJaXNTaG93TXNnGAYgASgIEhAKCGRlc2NyaWJlGAcgASgJEhAK",
            "CGZvbGRUeXBlGAkgASgEEhYKDmFuY2hvckZvbGRUeXBlGAogASgEEhUKDXBy",
            "aW9yaXR5U2NvcmUYCyABKAQSDQoFbG9nSWQYDCABKAkSGQoRbXNnUHJvY2Vz",
            "c0ZpbHRlcksYDSABKAkSGQoRbXNnUHJvY2Vzc0ZpbHRlclYYDiABKAkSGgoE",
            "dXNlchgPIAEoCzIMLmRvdXlpbi5Vc2VyEhgKEGFuY2hvckZvbGRUeXBlVjIY",
            "ESABKAQSGgoScHJvY2Vzc0F0U2VpVGltZU1zGBIgASgEEhgKEHJhbmRvbURp",
            "c3BhdGNoTXMYEyABKAQSEgoKaXNEaXNwYXRjaBgUIAEoCBIRCgljaGFubmVs",
            "SWQYFSABKAQSGQoRZGlmZlNlaTJhYnNTZWNvbmQYFiABKAQSGgoSYW5jaG9y",
            "Rm9sZER1cmF0aW9uGBcgASgEItcFCgRVc2VyEgoKAmlkGAEgASgEEg8KB3No",
            "b3J0SWQYAiABKAQSEAoIbmlja05hbWUYAyABKAkSDgoGZ2VuZGVyGAQgASgN",
            "EhEKCVNpZ25hdHVyZRgFIAEoCRINCgVMZXZlbBgGIAEoDRIQCghCaXJ0aGRh",
            "eRgHIAEoBBIRCglUZWxlcGhvbmUYCCABKAkSIgoLQXZhdGFyVGh1bWIYCSAB",
            "KAsyDS5kb3V5aW4uSW1hZ2USIwoMQXZhdGFyTWVkaXVtGAogASgLMg0uZG91",
            "eWluLkltYWdlEiIKC0F2YXRhckxhcmdlGAsgASgLMg0uZG91eWluLkltYWdl",
            "EhAKCFZlcmlmaWVkGAwgASgIEhIKCkV4cGVyaWVuY2UYDSABKA0SDAoEY2l0",
            "eRgOIAEoCRIOCgZTdGF0dXMYDyABKAUSEgoKQ3JlYXRlVGltZRgQIAEoBBIS",
            "CgpNb2RpZnlUaW1lGBEgASgEEg4KBlNlY3JldBgSIAEoDRIWCg5TaGFyZVFy",
            "Y29kZVVyaRgTIAEoCRIaChJJbmNvbWVTaGFyZVBlcmNlbnQYFCABKA0SJQoO",
            "QmFkZ2VJbWFnZUxpc3QYFSADKAsyDS5kb3V5aW4uSW1hZ2USJgoKRm9sbG93",
            "SW5mbxgWIAEoCzISLmRvdXlpbi5Gb2xsb3dJbmZvEhEKCVNwZWNpYWxJZBga",
            "IAEoCRIjCgxBdmF0YXJCb3JkZXIYGyABKAsyDS5kb3V5aW4uSW1hZ2USHAoF",
            "TWVkYWwYHCABKAsyDS5kb3V5aW4uSW1hZ2USKAoRUmVhbFRpbWVJY29uc0xp",
            "c3QYHSADKAsyDS5kb3V5aW4uSW1hZ2USEQoJZGlzcGxheUlkGCYgASgJEg4K",
            "BnNlY1VpZBguIAEoCRIXCg5mYW5UaWNrZXRDb3VudBj+ByABKAQSDgoFaWRT",
            "dHIYhAggASgJEhEKCGFnZVJhbmdlGJUIIAEoDSKuAQoKRm9sbG93SW5mbxIW",
            "Cg5mb2xsb3dpbmdDb3VudBgBIAEoBBIVCg1mb2xsb3dlckNvdW50GAIgASgE",
            "EhQKDGZvbGxvd1N0YXR1cxgDIAEoBBISCgpwdXNoU3RhdHVzGAQgASgEEhIK",
            "CnJlbWFya05hbWUYBSABKAkSGAoQZm9sbG93ZXJDb3VudFN0chgGIAEoCRIZ",
            "ChFmb2xsb3dpbmdDb3VudFN0chgHIAEoCSKiAgoFSW1hZ2USEwoLdXJsTGlz",
            "dExpc3QYASADKAkSCwoDdXJpGAIgASgJEg4KBmhlaWdodBgDIAEoBBINCgV3",
            "aWR0aBgEIAEoBBIQCghhdmdDb2xvchgFIAEoCRIRCglpbWFnZVR5cGUYBiAB",
            "KA0SEgoKb3BlbldlYlVybBgHIAEoCRIlCgdjb250ZW50GAggASgLMhQuZG91",
            "eWluLkltYWdlQ29udGVudBISCgppc0FuaW1hdGVkGAkgASgIEjEKD0ZsZXhT",
            "ZXR0aW5nTGlzdBgKIAEoCzIYLmRvdXlpbi5OaW5lUGF0Y2hTZXR0aW5nEjEK",
            "D1RleHRTZXR0aW5nTGlzdBgLIAEoCzIYLmRvdXlpbi5OaW5lUGF0Y2hTZXR0",
            "aW5nIisKEE5pbmVQYXRjaFNldHRpbmcSFwoPc2V0dGluZ0xpc3RMaXN0GAEg",
            "AygJIlcKDEltYWdlQ29udGVudBIMCgRuYW1lGAEgASgJEhEKCWZvbnRDb2xv",
            "chgCIAEoCRINCgVsZXZlbBgDIAEoBBIXCg9hbHRlcm5hdGl2ZVRleHQYBCAB",
            "KAkiswEKCVB1c2hGcmFtZRINCgVzZXFJZBgBIAEoBBINCgVsb2dJZBgCIAEo",
            "BBIPCgdzZXJ2aWNlGAMgASgEEg4KBm1ldGhvZBgEIAEoBBIoCgtoZWFkZXJz",
            "TGlzdBgFIAMoCzITLmRvdXlpbi5IZWFkZXJzTGlzdBIXCg9wYXlsb2FkRW5j",
            "b2RpbmcYBiABKAkSEwoLcGF5bG9hZFR5cGUYByABKAkSDwoHcGF5bG9hZBgI",
            "IAEoDCIPCgJraxIJCgFrGA4gASgNIs0BCg9TZW5kTWVzc2FnZUJvZHkSFgoO",
            "Y29udmVyc2F0aW9uSWQYASABKAkSGAoQY29udmVyc2F0aW9uVHlwZRgCIAEo",
            "DRIbChNjb252ZXJzYXRpb25TaG9ydElkGAMgASgEEg8KB2NvbnRlbnQYBCAB",
            "KAkSHAoDZXh0GAUgAygLMg8uZG91eWluLkV4dExpc3QSEwoLbWVzc2FnZVR5",
            "cGUYBiABKA0SDgoGdGlja2V0GAcgASgJEhcKD2NsaWVudE1lc3NhZ2VJZBgI",
            "IAEoCSIlCgdFeHRMaXN0EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCSK3",
            "AQoDUnNwEgkKAWEYASABKAUSCQoBYhgCIAEoBRIJCgFjGAMgASgFEgkKAWQY",
            "BCABKAkSCQoBZRgFIAEoBRIYCgFmGAYgASgLMg0uZG91eWluLlJzcC5GEgkK",
            "AWcYByABKAkSCQoBaBgKIAEoBBIJCgFpGAsgASgEEgkKAWoYDSABKAQaMwoB",
            "RhIKCgJxMRgBIAEoBBIKCgJxMxgDIAEoBBIKCgJxNBgEIAEoCRIKCgJxNRgF",
            "IAEoBCKyAgoKUHJlTWVzc2FnZRILCgNjbWQYASABKA0SEgoKc2VxdWVuY2VJ",
            "ZBgCIAEoDRISCgpzZGtWZXJzaW9uGAMgASgJEg0KBXRva2VuGAQgASgJEg0K",
            "BXJlZmVyGAUgASgNEhEKCWluYm94VHlwZRgGIAEoDRITCgtidWlsZE51bWJl",
            "chgHIAEoCRIwCg9zZW5kTWVzc2FnZUJvZHkYCCABKAsyFy5kb3V5aW4uU2Vu",
            "ZE1lc3NhZ2VCb2R5EgoKAmFhGAkgASgJEhYKDmRldmljZVBsYXRmb3JtGAsg",
            "ASgJEiQKB2hlYWRlcnMYDyADKAsyEy5kb3V5aW4uSGVhZGVyc0xpc3QSEAoI",
            "YXV0aFR5cGUYEiABKA0SCwoDYml6GBUgASgJEg4KBmFjY2VzcxgWIAEoCSIp",
            "CgtIZWFkZXJzTGlzdBILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkqQwoO",
            "Q29tbWVudFR5cGVUYWcSGQoVQ09NTUVOVFRZUEVUQUdVTktOT1dOEAASFgoS",
            "Q09NTUVOVFRZUEVUQUdTVEFSEAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Douyin.CommentTypeTag), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Response), global::Douyin.Response.Parser, new[]{ "MessagesList", "Cursor", "FetchInterval", "Now", "InternalExt", "FetchType", "RouteParams", "HeartbeatDuration", "NeedAck", "PushServer", "LiveCursor", "HistoryNoMore" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Message), global::Douyin.Message.Parser, new[]{ "Method", "Payload", "MsgId", "MsgType", "Offset", "NeedWrdsStore", "WrdsVersion", "WrdsSubKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.ChatMessage), global::Douyin.ChatMessage.Parser, new[]{ "Common", "User", "Content", "VisibleToSender", "BackgroundImage", "FullScreenTextColor", "BackgroundImageV2", "PublicAreaCommon", "GiftImage", "AgreeMsgId", "PriorityLevel", "LandscapeAreaCommon", "EventTime", "SendReview", "FromIntercom", "IntercomHideUserCard", "ChatBy", "IndividualChatPriority", "RtfContent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.LandscapeAreaCommon), global::Douyin.LandscapeAreaCommon.Parser, new[]{ "ShowHead", "ShowNickname", "ShowFontColor", "ColorValueList", "CommentTypeTagsList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.RoomUserSeqMessage), global::Douyin.RoomUserSeqMessage.Parser, new[]{ "Common", "RanksList", "Total", "PopStr", "SeatsList", "Popularity", "TotalUser", "TotalUserStr", "TotalStr", "OnlineUserForAnchor", "TotalPvForAnchor", "UpRightStatsStr", "UpRightStatsStrComplete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.CommonTextMessage), global::Douyin.CommonTextMessage.Parser, new[]{ "Common", "User", "Scene" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.UpdateFanTicketMessage), global::Douyin.UpdateFanTicketMessage.Parser, new[]{ "Common", "RoomFanTicketCountText", "RoomFanTicketCount", "ForceUpdate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.RoomUserSeqMessageContributor), global::Douyin.RoomUserSeqMessageContributor.Parser, new[]{ "Score", "User", "Rank", "Delta", "IsHidden", "ScoreDescription", "ExactlyScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.GiftMessage), global::Douyin.GiftMessage.Parser, new[]{ "Common", "GiftId", "FanTicketCount", "GroupCount", "RepeatCount", "ComboCount", "User", "ToUser", "RepeatEnd", "TextEffect", "GroupId", "IncomeTaskgifts", "RoomFanTicketCount", "Priority", "Gift", "LogId", "SendType", "PublicAreaCommon", "TrayDisplayText", "BannedDisplayEffects", "DisplayForSelf", "InteractGiftInfo", "DiyItemInfo", "MinAssetSetList", "TotalCount", "ClientGiftSource", "ToUserIdsList", "SendTime", "ForceDisplayEffects", "TraceId", "EffectDisplayTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.GiftStruct), global::Douyin.GiftStruct.Parser, new[]{ "Image", "Describe", "Notify", "Duration", "Id", "ForLinkmic", "Doodle", "ForFansclub", "Combo", "Type", "DiamondCount", "IsDisplayedOnPanel", "PrimaryEffectId", "GiftLabelIcon", "Name", "Region", "Manual", "ForCustom", "Icon", "ActionType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.GiftIMPriority), global::Douyin.GiftIMPriority.Parser, new[]{ "QueueSizesList", "SelfQueuePriority", "Priority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextEffect), global::Douyin.TextEffect.Parser, new[]{ "Portrait", "Landscape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextEffectDetail), global::Douyin.TextEffectDetail.Parser, new[]{ "Text", "TextFontSize", "Background", "Start", "Duration", "X", "Y", "Width", "Height", "ShadowDx", "ShadowDy", "ShadowRadius", "ShadowColor", "StrokeColor", "StrokeWidth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.MemberMessage), global::Douyin.MemberMessage.Parser, new[]{ "Common", "User", "MemberCount", "Operator", "IsSetToAdmin", "IsTopUser", "RankScore", "TopUserNo", "EnterType", "Action", "ActionDescription", "UserId", "EffectConfig", "PopStr", "EnterEffectConfig", "BackgroundImage", "BackgroundImageV2", "AnchorDisplayText", "PublicAreaCommon", "UserEnterTipType", "AnchorEnterTipType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.PublicAreaCommon), global::Douyin.PublicAreaCommon.Parser, new[]{ "UserLabel", "UserConsumeInRoom", "UserSendGiftCntInRoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.EffectConfig), global::Douyin.EffectConfig.Parser, new[]{ "Type", "Icon", "AvatarPos", "Text", "TextIcon", "StayTime", "AnimAssetId", "Badge", "FlexSettingArrayList", "TextIconOverlay", "AnimatedBadge", "HasSweepLight", "TextFlexSettingArrayList", "CenterAnimAssetId", "DynamicImage", "ExtraMap", "Mp4AnimAssetId", "Priority", "MaxWaitTime", "DressId", "Alignment", "AlignmentOffset" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Text), global::Douyin.Text.Parser, new[]{ "Key", "DefaultPatter", "DefaultFormat", "PiecesList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPiece), global::Douyin.TextPiece.Parser, new[]{ "Type", "Format", "StringValue", "UserValue", "GiftValue", "HeartValue", "PatternRefValue", "ImageValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPieceImage), global::Douyin.TextPieceImage.Parser, new[]{ "Image", "ScalingRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPiecePatternRef), global::Douyin.TextPiecePatternRef.Parser, new[]{ "Key", "DefaultPattern" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPieceHeart), global::Douyin.TextPieceHeart.Parser, new[]{ "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPieceGift), global::Douyin.TextPieceGift.Parser, new[]{ "GiftId", "NameRef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.PatternRef), global::Douyin.PatternRef.Parser, new[]{ "Key", "DefaultPattern" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextPieceUser), global::Douyin.TextPieceUser.Parser, new[]{ "User", "WithColon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.TextFormat), global::Douyin.TextFormat.Parser, new[]{ "Color", "Bold", "Italic", "Weight", "ItalicAngle", "FontSize", "UseHeighLightColor", "UseRemoteClor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.LikeMessage), global::Douyin.LikeMessage.Parser, new[]{ "Common", "Count", "Total", "Color", "User", "Icon", "DoubleLikeDetail", "DisplayControlInfo", "LinkmicGuestUid", "Scene", "PicoDisplayInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.SocialMessage), global::Douyin.SocialMessage.Parser, new[]{ "Common", "User", "ShareType", "Action", "ShareTarget", "FollowCount", "PublicAreaCommon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.PicoDisplayInfo), global::Douyin.PicoDisplayInfo.Parser, new[]{ "ComboSumCount", "Emoji", "EmojiIcon", "EmojiText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.DoubleLikeDetail), global::Douyin.DoubleLikeDetail.Parser, new[]{ "DoubleFlag", "SeqId", "RenewalsNum", "TriggersNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.DisplayControlInfo), global::Douyin.DisplayControlInfo.Parser, new[]{ "ShowText", "ShowIcons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.EpisodeChatMessage), global::Douyin.EpisodeChatMessage.Parser, new[]{ "Common", "User", "Content", "VisibleToSende", "GiftImage", "AgreeMsgId", "ColorValueList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.MatchAgainstScoreMessage), global::Douyin.MatchAgainstScoreMessage.Parser, new[]{ "Common", "Against", "MatchStatus", "DisplayStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Against), global::Douyin.Against.Parser, new[]{ "LeftName", "LeftLogo", "LeftGoal", "RightName", "RightLogo", "RightGoal", "Timestamp", "Version", "LeftTeamId", "RightTeamId", "DiffSei2AbsSecond", "FinalGoalStage", "CurrentGoalStage", "LeftScoreAddition", "RightScoreAddition", "LeftGoalInt", "RightGoalInt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Common), global::Douyin.Common.Parser, new[]{ "Method", "MsgId", "RoomId", "CreateTime", "Monitor", "IsShowMsg", "Describe", "FoldType", "AnchorFoldType", "PriorityScore", "LogId", "MsgProcessFilterK", "MsgProcessFilterV", "User", "AnchorFoldTypeV2", "ProcessAtSeiTimeMs", "RandomDispatchMs", "IsDispatch", "ChannelId", "DiffSei2AbsSecond", "AnchorFoldDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.User), global::Douyin.User.Parser, new[]{ "Id", "ShortId", "NickName", "Gender", "Signature", "Level", "Birthday", "Telephone", "AvatarThumb", "AvatarMedium", "AvatarLarge", "Verified", "Experience", "City", "Status", "CreateTime", "ModifyTime", "Secret", "ShareQrcodeUri", "IncomeSharePercent", "BadgeImageList", "FollowInfo", "SpecialId", "AvatarBorder", "Medal", "RealTimeIconsList", "DisplayId", "SecUid", "FanTicketCount", "IdStr", "AgeRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.FollowInfo), global::Douyin.FollowInfo.Parser, new[]{ "FollowingCount", "FollowerCount", "FollowStatus", "PushStatus", "RemarkName", "FollowerCountStr", "FollowingCountStr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Image), global::Douyin.Image.Parser, new[]{ "UrlListList", "Uri", "Height", "Width", "AvgColor", "ImageType", "OpenWebUrl", "Content", "IsAnimated", "FlexSettingList", "TextSettingList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.NinePatchSetting), global::Douyin.NinePatchSetting.Parser, new[]{ "SettingListList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.ImageContent), global::Douyin.ImageContent.Parser, new[]{ "Name", "FontColor", "Level", "AlternativeText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.PushFrame), global::Douyin.PushFrame.Parser, new[]{ "SeqId", "LogId", "Service", "Method", "HeadersList", "PayloadEncoding", "PayloadType", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.kk), global::Douyin.kk.Parser, new[]{ "K" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.SendMessageBody), global::Douyin.SendMessageBody.Parser, new[]{ "ConversationId", "ConversationType", "ConversationShortId", "Content", "Ext", "MessageType", "Ticket", "ClientMessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.ExtList), global::Douyin.ExtList.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Rsp), global::Douyin.Rsp.Parser, new[]{ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.Rsp.Types.F), global::Douyin.Rsp.Types.F.Parser, new[]{ "Q1", "Q3", "Q4", "Q5" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.PreMessage), global::Douyin.PreMessage.Parser, new[]{ "Cmd", "SequenceId", "SdkVersion", "Token", "Refer", "InboxType", "BuildNumber", "SendMessageBody", "Aa", "DevicePlatform", "Headers", "AuthType", "Biz", "Access" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Douyin.HeadersList), global::Douyin.HeadersList.Parser, new[]{ "Key", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CommentTypeTag {
    [pbr::OriginalName("COMMENTTYPETAGUNKNOWN")] Unknown = 0,
    [pbr::OriginalName("COMMENTTYPETAGSTAR")] Star = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      messagesList_ = other.messagesList_.Clone();
      cursor_ = other.cursor_;
      fetchInterval_ = other.fetchInterval_;
      now_ = other.now_;
      internalExt_ = other.internalExt_;
      fetchType_ = other.fetchType_;
      routeParams_ = other.routeParams_.Clone();
      heartbeatDuration_ = other.heartbeatDuration_;
      needAck_ = other.needAck_;
      pushServer_ = other.pushServer_;
      liveCursor_ = other.liveCursor_;
      historyNoMore_ = other.historyNoMore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "messagesList" field.</summary>
    public const int MessagesListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Douyin.Message> _repeated_messagesList_codec
        = pb::FieldCodec.ForMessage(10, global::Douyin.Message.Parser);
    private readonly pbc::RepeatedField<global::Douyin.Message> messagesList_ = new pbc::RepeatedField<global::Douyin.Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.Message> MessagesList {
      get { return messagesList_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetchInterval" field.</summary>
    public const int FetchIntervalFieldNumber = 3;
    private ulong fetchInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FetchInterval {
      get { return fetchInterval_; }
      set {
        fetchInterval_ = value;
      }
    }

    /// <summary>Field number for the "now" field.</summary>
    public const int NowFieldNumber = 4;
    private ulong now_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    /// <summary>Field number for the "internalExt" field.</summary>
    public const int InternalExtFieldNumber = 5;
    private string internalExt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalExt {
      get { return internalExt_; }
      set {
        internalExt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fetchType" field.</summary>
    public const int FetchTypeFieldNumber = 6;
    private uint fetchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FetchType {
      get { return fetchType_; }
      set {
        fetchType_ = value;
      }
    }

    /// <summary>Field number for the "routeParams" field.</summary>
    public const int RouteParamsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_routeParams_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 58);
    private readonly pbc::MapField<string, string> routeParams_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RouteParams {
      get { return routeParams_; }
    }

    /// <summary>Field number for the "heartbeatDuration" field.</summary>
    public const int HeartbeatDurationFieldNumber = 8;
    private ulong heartbeatDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeartbeatDuration {
      get { return heartbeatDuration_; }
      set {
        heartbeatDuration_ = value;
      }
    }

    /// <summary>Field number for the "needAck" field.</summary>
    public const int NeedAckFieldNumber = 9;
    private bool needAck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedAck {
      get { return needAck_; }
      set {
        needAck_ = value;
      }
    }

    /// <summary>Field number for the "pushServer" field.</summary>
    public const int PushServerFieldNumber = 10;
    private string pushServer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushServer {
      get { return pushServer_; }
      set {
        pushServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveCursor" field.</summary>
    public const int LiveCursorFieldNumber = 11;
    private string liveCursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveCursor {
      get { return liveCursor_; }
      set {
        liveCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "historyNoMore" field.</summary>
    public const int HistoryNoMoreFieldNumber = 12;
    private bool historyNoMore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HistoryNoMore {
      get { return historyNoMore_; }
      set {
        historyNoMore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messagesList_.Equals(other.messagesList_)) return false;
      if (Cursor != other.Cursor) return false;
      if (FetchInterval != other.FetchInterval) return false;
      if (Now != other.Now) return false;
      if (InternalExt != other.InternalExt) return false;
      if (FetchType != other.FetchType) return false;
      if (!RouteParams.Equals(other.RouteParams)) return false;
      if (HeartbeatDuration != other.HeartbeatDuration) return false;
      if (NeedAck != other.NeedAck) return false;
      if (PushServer != other.PushServer) return false;
      if (LiveCursor != other.LiveCursor) return false;
      if (HistoryNoMore != other.HistoryNoMore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messagesList_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (FetchInterval != 0UL) hash ^= FetchInterval.GetHashCode();
      if (Now != 0UL) hash ^= Now.GetHashCode();
      if (InternalExt.Length != 0) hash ^= InternalExt.GetHashCode();
      if (FetchType != 0) hash ^= FetchType.GetHashCode();
      hash ^= RouteParams.GetHashCode();
      if (HeartbeatDuration != 0UL) hash ^= HeartbeatDuration.GetHashCode();
      if (NeedAck != false) hash ^= NeedAck.GetHashCode();
      if (PushServer.Length != 0) hash ^= PushServer.GetHashCode();
      if (LiveCursor.Length != 0) hash ^= LiveCursor.GetHashCode();
      if (HistoryNoMore != false) hash ^= HistoryNoMore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      messagesList_.WriteTo(output, _repeated_messagesList_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (FetchInterval != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FetchInterval);
      }
      if (Now != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Now);
      }
      if (InternalExt.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InternalExt);
      }
      if (FetchType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(FetchType);
      }
      routeParams_.WriteTo(output, _map_routeParams_codec);
      if (HeartbeatDuration != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(HeartbeatDuration);
      }
      if (NeedAck != false) {
        output.WriteRawTag(72);
        output.WriteBool(NeedAck);
      }
      if (PushServer.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PushServer);
      }
      if (LiveCursor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LiveCursor);
      }
      if (HistoryNoMore != false) {
        output.WriteRawTag(96);
        output.WriteBool(HistoryNoMore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messagesList_.CalculateSize(_repeated_messagesList_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (FetchInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FetchInterval);
      }
      if (Now != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Now);
      }
      if (InternalExt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalExt);
      }
      if (FetchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FetchType);
      }
      size += routeParams_.CalculateSize(_map_routeParams_codec);
      if (HeartbeatDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeartbeatDuration);
      }
      if (NeedAck != false) {
        size += 1 + 1;
      }
      if (PushServer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushServer);
      }
      if (LiveCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveCursor);
      }
      if (HistoryNoMore != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      messagesList_.Add(other.messagesList_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.FetchInterval != 0UL) {
        FetchInterval = other.FetchInterval;
      }
      if (other.Now != 0UL) {
        Now = other.Now;
      }
      if (other.InternalExt.Length != 0) {
        InternalExt = other.InternalExt;
      }
      if (other.FetchType != 0) {
        FetchType = other.FetchType;
      }
      routeParams_.Add(other.routeParams_);
      if (other.HeartbeatDuration != 0UL) {
        HeartbeatDuration = other.HeartbeatDuration;
      }
      if (other.NeedAck != false) {
        NeedAck = other.NeedAck;
      }
      if (other.PushServer.Length != 0) {
        PushServer = other.PushServer;
      }
      if (other.LiveCursor.Length != 0) {
        LiveCursor = other.LiveCursor;
      }
      if (other.HistoryNoMore != false) {
        HistoryNoMore = other.HistoryNoMore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            messagesList_.AddEntriesFrom(input, _repeated_messagesList_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
          case 24: {
            FetchInterval = input.ReadUInt64();
            break;
          }
          case 32: {
            Now = input.ReadUInt64();
            break;
          }
          case 42: {
            InternalExt = input.ReadString();
            break;
          }
          case 48: {
            FetchType = input.ReadUInt32();
            break;
          }
          case 58: {
            routeParams_.AddEntriesFrom(input, _map_routeParams_codec);
            break;
          }
          case 64: {
            HeartbeatDuration = input.ReadUInt64();
            break;
          }
          case 72: {
            NeedAck = input.ReadBool();
            break;
          }
          case 82: {
            PushServer = input.ReadString();
            break;
          }
          case 90: {
            LiveCursor = input.ReadString();
            break;
          }
          case 96: {
            HistoryNoMore = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      method_ = other.method_;
      payload_ = other.payload_;
      msgId_ = other.msgId_;
      msgType_ = other.msgType_;
      offset_ = other.offset_;
      needWrdsStore_ = other.needWrdsStore_;
      wrdsVersion_ = other.wrdsVersion_;
      wrdsSubKey_ = other.wrdsSubKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 3;
    private long msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 4;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "needWrdsStore" field.</summary>
    public const int NeedWrdsStoreFieldNumber = 6;
    private bool needWrdsStore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedWrdsStore {
      get { return needWrdsStore_; }
      set {
        needWrdsStore_ = value;
      }
    }

    /// <summary>Field number for the "wrdsVersion" field.</summary>
    public const int WrdsVersionFieldNumber = 7;
    private long wrdsVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WrdsVersion {
      get { return wrdsVersion_; }
      set {
        wrdsVersion_ = value;
      }
    }

    /// <summary>Field number for the "wrdsSubKey" field.</summary>
    public const int WrdsSubKeyFieldNumber = 8;
    private string wrdsSubKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WrdsSubKey {
      get { return wrdsSubKey_; }
      set {
        wrdsSubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Payload != other.Payload) return false;
      if (MsgId != other.MsgId) return false;
      if (MsgType != other.MsgType) return false;
      if (Offset != other.Offset) return false;
      if (NeedWrdsStore != other.NeedWrdsStore) return false;
      if (WrdsVersion != other.WrdsVersion) return false;
      if (WrdsSubKey != other.WrdsSubKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (MsgId != 0L) hash ^= MsgId.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (NeedWrdsStore != false) hash ^= NeedWrdsStore.GetHashCode();
      if (WrdsVersion != 0L) hash ^= WrdsVersion.GetHashCode();
      if (WrdsSubKey.Length != 0) hash ^= WrdsSubKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Payload);
      }
      if (MsgId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MsgId);
      }
      if (MsgType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgType);
      }
      if (Offset != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Offset);
      }
      if (NeedWrdsStore != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedWrdsStore);
      }
      if (WrdsVersion != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WrdsVersion);
      }
      if (WrdsSubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WrdsSubKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (MsgId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MsgId);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (NeedWrdsStore != false) {
        size += 1 + 1;
      }
      if (WrdsVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WrdsVersion);
      }
      if (WrdsSubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WrdsSubKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.MsgId != 0L) {
        MsgId = other.MsgId;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.NeedWrdsStore != false) {
        NeedWrdsStore = other.NeedWrdsStore;
      }
      if (other.WrdsVersion != 0L) {
        WrdsVersion = other.WrdsVersion;
      }
      if (other.WrdsSubKey.Length != 0) {
        WrdsSubKey = other.WrdsSubKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadBytes();
            break;
          }
          case 24: {
            MsgId = input.ReadInt64();
            break;
          }
          case 32: {
            MsgType = input.ReadInt32();
            break;
          }
          case 40: {
            Offset = input.ReadInt64();
            break;
          }
          case 48: {
            NeedWrdsStore = input.ReadBool();
            break;
          }
          case 56: {
            WrdsVersion = input.ReadInt64();
            break;
          }
          case 66: {
            WrdsSubKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天
  /// </summary>
  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      content_ = other.content_;
      visibleToSender_ = other.visibleToSender_;
      BackgroundImage = other.backgroundImage_ != null ? other.BackgroundImage.Clone() : null;
      fullScreenTextColor_ = other.fullScreenTextColor_;
      BackgroundImageV2 = other.backgroundImageV2_ != null ? other.BackgroundImageV2.Clone() : null;
      PublicAreaCommon = other.publicAreaCommon_ != null ? other.PublicAreaCommon.Clone() : null;
      GiftImage = other.giftImage_ != null ? other.GiftImage.Clone() : null;
      agreeMsgId_ = other.agreeMsgId_;
      priorityLevel_ = other.priorityLevel_;
      LandscapeAreaCommon = other.landscapeAreaCommon_ != null ? other.LandscapeAreaCommon.Clone() : null;
      eventTime_ = other.eventTime_;
      sendReview_ = other.sendReview_;
      fromIntercom_ = other.fromIntercom_;
      intercomHideUserCard_ = other.intercomHideUserCard_;
      chatBy_ = other.chatBy_;
      individualChatPriority_ = other.individualChatPriority_;
      RtfContent = other.rtfContent_ != null ? other.RtfContent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibleToSender" field.</summary>
    public const int VisibleToSenderFieldNumber = 4;
    private bool visibleToSender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VisibleToSender {
      get { return visibleToSender_; }
      set {
        visibleToSender_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImage" field.</summary>
    public const int BackgroundImageFieldNumber = 5;
    private global::Douyin.Image backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "fullScreenTextColor" field.</summary>
    public const int FullScreenTextColorFieldNumber = 6;
    private string fullScreenTextColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullScreenTextColor {
      get { return fullScreenTextColor_; }
      set {
        fullScreenTextColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundImageV2" field.</summary>
    public const int BackgroundImageV2FieldNumber = 7;
    private global::Douyin.Image backgroundImageV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image BackgroundImageV2 {
      get { return backgroundImageV2_; }
      set {
        backgroundImageV2_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 8;
    private global::Douyin.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "giftImage" field.</summary>
    public const int GiftImageFieldNumber = 9;
    private global::Douyin.Image giftImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image GiftImage {
      get { return giftImage_; }
      set {
        giftImage_ = value;
      }
    }

    /// <summary>Field number for the "agreeMsgId" field.</summary>
    public const int AgreeMsgIdFieldNumber = 11;
    private ulong agreeMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AgreeMsgId {
      get { return agreeMsgId_; }
      set {
        agreeMsgId_ = value;
      }
    }

    /// <summary>Field number for the "priorityLevel" field.</summary>
    public const int PriorityLevelFieldNumber = 12;
    private uint priorityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PriorityLevel {
      get { return priorityLevel_; }
      set {
        priorityLevel_ = value;
      }
    }

    /// <summary>Field number for the "landscapeAreaCommon" field.</summary>
    public const int LandscapeAreaCommonFieldNumber = 13;
    private global::Douyin.LandscapeAreaCommon landscapeAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.LandscapeAreaCommon LandscapeAreaCommon {
      get { return landscapeAreaCommon_; }
      set {
        landscapeAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "eventTime" field.</summary>
    public const int EventTimeFieldNumber = 15;
    private ulong eventTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = value;
      }
    }

    /// <summary>Field number for the "sendReview" field.</summary>
    public const int SendReviewFieldNumber = 16;
    private bool sendReview_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendReview {
      get { return sendReview_; }
      set {
        sendReview_ = value;
      }
    }

    /// <summary>Field number for the "fromIntercom" field.</summary>
    public const int FromIntercomFieldNumber = 17;
    private bool fromIntercom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromIntercom {
      get { return fromIntercom_; }
      set {
        fromIntercom_ = value;
      }
    }

    /// <summary>Field number for the "intercomHideUserCard" field.</summary>
    public const int IntercomHideUserCardFieldNumber = 18;
    private bool intercomHideUserCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IntercomHideUserCard {
      get { return intercomHideUserCard_; }
      set {
        intercomHideUserCard_ = value;
      }
    }

    /// <summary>Field number for the "chatBy" field.</summary>
    public const int ChatByFieldNumber = 20;
    private string chatBy_ = "";
    /// <summary>
    ///  repeated chatTagsList = 19;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatBy {
      get { return chatBy_; }
      set {
        chatBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "individualChatPriority" field.</summary>
    public const int IndividualChatPriorityFieldNumber = 21;
    private uint individualChatPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndividualChatPriority {
      get { return individualChatPriority_; }
      set {
        individualChatPriority_ = value;
      }
    }

    /// <summary>Field number for the "rtfContent" field.</summary>
    public const int RtfContentFieldNumber = 22;
    private global::Douyin.Text rtfContent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Text RtfContent {
      get { return rtfContent_; }
      set {
        rtfContent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Content != other.Content) return false;
      if (VisibleToSender != other.VisibleToSender) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (FullScreenTextColor != other.FullScreenTextColor) return false;
      if (!object.Equals(BackgroundImageV2, other.BackgroundImageV2)) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      if (!object.Equals(GiftImage, other.GiftImage)) return false;
      if (AgreeMsgId != other.AgreeMsgId) return false;
      if (PriorityLevel != other.PriorityLevel) return false;
      if (!object.Equals(LandscapeAreaCommon, other.LandscapeAreaCommon)) return false;
      if (EventTime != other.EventTime) return false;
      if (SendReview != other.SendReview) return false;
      if (FromIntercom != other.FromIntercom) return false;
      if (IntercomHideUserCard != other.IntercomHideUserCard) return false;
      if (ChatBy != other.ChatBy) return false;
      if (IndividualChatPriority != other.IndividualChatPriority) return false;
      if (!object.Equals(RtfContent, other.RtfContent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (VisibleToSender != false) hash ^= VisibleToSender.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (FullScreenTextColor.Length != 0) hash ^= FullScreenTextColor.GetHashCode();
      if (backgroundImageV2_ != null) hash ^= BackgroundImageV2.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (giftImage_ != null) hash ^= GiftImage.GetHashCode();
      if (AgreeMsgId != 0UL) hash ^= AgreeMsgId.GetHashCode();
      if (PriorityLevel != 0) hash ^= PriorityLevel.GetHashCode();
      if (landscapeAreaCommon_ != null) hash ^= LandscapeAreaCommon.GetHashCode();
      if (EventTime != 0UL) hash ^= EventTime.GetHashCode();
      if (SendReview != false) hash ^= SendReview.GetHashCode();
      if (FromIntercom != false) hash ^= FromIntercom.GetHashCode();
      if (IntercomHideUserCard != false) hash ^= IntercomHideUserCard.GetHashCode();
      if (ChatBy.Length != 0) hash ^= ChatBy.GetHashCode();
      if (IndividualChatPriority != 0) hash ^= IndividualChatPriority.GetHashCode();
      if (rtfContent_ != null) hash ^= RtfContent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (VisibleToSender != false) {
        output.WriteRawTag(32);
        output.WriteBool(VisibleToSender);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundImage);
      }
      if (FullScreenTextColor.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FullScreenTextColor);
      }
      if (backgroundImageV2_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BackgroundImageV2);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PublicAreaCommon);
      }
      if (giftImage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GiftImage);
      }
      if (AgreeMsgId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(AgreeMsgId);
      }
      if (PriorityLevel != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PriorityLevel);
      }
      if (landscapeAreaCommon_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LandscapeAreaCommon);
      }
      if (EventTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(EventTime);
      }
      if (SendReview != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SendReview);
      }
      if (FromIntercom != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(FromIntercom);
      }
      if (IntercomHideUserCard != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IntercomHideUserCard);
      }
      if (ChatBy.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ChatBy);
      }
      if (IndividualChatPriority != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(IndividualChatPriority);
      }
      if (rtfContent_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RtfContent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (VisibleToSender != false) {
        size += 1 + 1;
      }
      if (backgroundImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (FullScreenTextColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullScreenTextColor);
      }
      if (backgroundImageV2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageV2);
      }
      if (publicAreaCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (giftImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftImage);
      }
      if (AgreeMsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AgreeMsgId);
      }
      if (PriorityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriorityLevel);
      }
      if (landscapeAreaCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LandscapeAreaCommon);
      }
      if (EventTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      if (SendReview != false) {
        size += 2 + 1;
      }
      if (FromIntercom != false) {
        size += 2 + 1;
      }
      if (IntercomHideUserCard != false) {
        size += 2 + 1;
      }
      if (ChatBy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChatBy);
      }
      if (IndividualChatPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IndividualChatPriority);
      }
      if (rtfContent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RtfContent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.VisibleToSender != false) {
        VisibleToSender = other.VisibleToSender;
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          backgroundImage_ = new global::Douyin.Image();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.FullScreenTextColor.Length != 0) {
        FullScreenTextColor = other.FullScreenTextColor;
      }
      if (other.backgroundImageV2_ != null) {
        if (backgroundImageV2_ == null) {
          backgroundImageV2_ = new global::Douyin.Image();
        }
        BackgroundImageV2.MergeFrom(other.BackgroundImageV2);
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      if (other.giftImage_ != null) {
        if (giftImage_ == null) {
          giftImage_ = new global::Douyin.Image();
        }
        GiftImage.MergeFrom(other.GiftImage);
      }
      if (other.AgreeMsgId != 0UL) {
        AgreeMsgId = other.AgreeMsgId;
      }
      if (other.PriorityLevel != 0) {
        PriorityLevel = other.PriorityLevel;
      }
      if (other.landscapeAreaCommon_ != null) {
        if (landscapeAreaCommon_ == null) {
          landscapeAreaCommon_ = new global::Douyin.LandscapeAreaCommon();
        }
        LandscapeAreaCommon.MergeFrom(other.LandscapeAreaCommon);
      }
      if (other.EventTime != 0UL) {
        EventTime = other.EventTime;
      }
      if (other.SendReview != false) {
        SendReview = other.SendReview;
      }
      if (other.FromIntercom != false) {
        FromIntercom = other.FromIntercom;
      }
      if (other.IntercomHideUserCard != false) {
        IntercomHideUserCard = other.IntercomHideUserCard;
      }
      if (other.ChatBy.Length != 0) {
        ChatBy = other.ChatBy;
      }
      if (other.IndividualChatPriority != 0) {
        IndividualChatPriority = other.IndividualChatPriority;
      }
      if (other.rtfContent_ != null) {
        if (rtfContent_ == null) {
          rtfContent_ = new global::Douyin.Text();
        }
        RtfContent.MergeFrom(other.RtfContent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            VisibleToSender = input.ReadBool();
            break;
          }
          case 42: {
            if (backgroundImage_ == null) {
              backgroundImage_ = new global::Douyin.Image();
            }
            input.ReadMessage(backgroundImage_);
            break;
          }
          case 50: {
            FullScreenTextColor = input.ReadString();
            break;
          }
          case 58: {
            if (backgroundImageV2_ == null) {
              backgroundImageV2_ = new global::Douyin.Image();
            }
            input.ReadMessage(backgroundImageV2_);
            break;
          }
          case 66: {
            if (publicAreaCommon_ == null) {
              publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
            }
            input.ReadMessage(publicAreaCommon_);
            break;
          }
          case 74: {
            if (giftImage_ == null) {
              giftImage_ = new global::Douyin.Image();
            }
            input.ReadMessage(giftImage_);
            break;
          }
          case 88: {
            AgreeMsgId = input.ReadUInt64();
            break;
          }
          case 96: {
            PriorityLevel = input.ReadUInt32();
            break;
          }
          case 106: {
            if (landscapeAreaCommon_ == null) {
              landscapeAreaCommon_ = new global::Douyin.LandscapeAreaCommon();
            }
            input.ReadMessage(landscapeAreaCommon_);
            break;
          }
          case 120: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 128: {
            SendReview = input.ReadBool();
            break;
          }
          case 136: {
            FromIntercom = input.ReadBool();
            break;
          }
          case 144: {
            IntercomHideUserCard = input.ReadBool();
            break;
          }
          case 162: {
            ChatBy = input.ReadString();
            break;
          }
          case 168: {
            IndividualChatPriority = input.ReadUInt32();
            break;
          }
          case 178: {
            if (rtfContent_ == null) {
              rtfContent_ = new global::Douyin.Text();
            }
            input.ReadMessage(rtfContent_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LandscapeAreaCommon : pb::IMessage<LandscapeAreaCommon> {
    private static readonly pb::MessageParser<LandscapeAreaCommon> _parser = new pb::MessageParser<LandscapeAreaCommon>(() => new LandscapeAreaCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandscapeAreaCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandscapeAreaCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandscapeAreaCommon(LandscapeAreaCommon other) : this() {
      showHead_ = other.showHead_;
      showNickname_ = other.showNickname_;
      showFontColor_ = other.showFontColor_;
      colorValueList_ = other.colorValueList_.Clone();
      commentTypeTagsList_ = other.commentTypeTagsList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandscapeAreaCommon Clone() {
      return new LandscapeAreaCommon(this);
    }

    /// <summary>Field number for the "showHead" field.</summary>
    public const int ShowHeadFieldNumber = 1;
    private bool showHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHead {
      get { return showHead_; }
      set {
        showHead_ = value;
      }
    }

    /// <summary>Field number for the "showNickname" field.</summary>
    public const int ShowNicknameFieldNumber = 2;
    private bool showNickname_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowNickname {
      get { return showNickname_; }
      set {
        showNickname_ = value;
      }
    }

    /// <summary>Field number for the "showFontColor" field.</summary>
    public const int ShowFontColorFieldNumber = 3;
    private bool showFontColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowFontColor {
      get { return showFontColor_; }
      set {
        showFontColor_ = value;
      }
    }

    /// <summary>Field number for the "colorValueList" field.</summary>
    public const int ColorValueListFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_colorValueList_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> colorValueList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColorValueList {
      get { return colorValueList_; }
    }

    /// <summary>Field number for the "commentTypeTagsList" field.</summary>
    public const int CommentTypeTagsListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Douyin.CommentTypeTag> _repeated_commentTypeTagsList_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Douyin.CommentTypeTag) x);
    private readonly pbc::RepeatedField<global::Douyin.CommentTypeTag> commentTypeTagsList_ = new pbc::RepeatedField<global::Douyin.CommentTypeTag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.CommentTypeTag> CommentTypeTagsList {
      get { return commentTypeTagsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandscapeAreaCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandscapeAreaCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowHead != other.ShowHead) return false;
      if (ShowNickname != other.ShowNickname) return false;
      if (ShowFontColor != other.ShowFontColor) return false;
      if(!colorValueList_.Equals(other.colorValueList_)) return false;
      if(!commentTypeTagsList_.Equals(other.commentTypeTagsList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowHead != false) hash ^= ShowHead.GetHashCode();
      if (ShowNickname != false) hash ^= ShowNickname.GetHashCode();
      if (ShowFontColor != false) hash ^= ShowFontColor.GetHashCode();
      hash ^= colorValueList_.GetHashCode();
      hash ^= commentTypeTagsList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowHead != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowHead);
      }
      if (ShowNickname != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowNickname);
      }
      if (ShowFontColor != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShowFontColor);
      }
      colorValueList_.WriteTo(output, _repeated_colorValueList_codec);
      commentTypeTagsList_.WriteTo(output, _repeated_commentTypeTagsList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowHead != false) {
        size += 1 + 1;
      }
      if (ShowNickname != false) {
        size += 1 + 1;
      }
      if (ShowFontColor != false) {
        size += 1 + 1;
      }
      size += colorValueList_.CalculateSize(_repeated_colorValueList_codec);
      size += commentTypeTagsList_.CalculateSize(_repeated_commentTypeTagsList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandscapeAreaCommon other) {
      if (other == null) {
        return;
      }
      if (other.ShowHead != false) {
        ShowHead = other.ShowHead;
      }
      if (other.ShowNickname != false) {
        ShowNickname = other.ShowNickname;
      }
      if (other.ShowFontColor != false) {
        ShowFontColor = other.ShowFontColor;
      }
      colorValueList_.Add(other.colorValueList_);
      commentTypeTagsList_.Add(other.commentTypeTagsList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowHead = input.ReadBool();
            break;
          }
          case 16: {
            ShowNickname = input.ReadBool();
            break;
          }
          case 24: {
            ShowFontColor = input.ReadBool();
            break;
          }
          case 34: {
            colorValueList_.AddEntriesFrom(input, _repeated_colorValueList_codec);
            break;
          }
          case 42:
          case 40: {
            commentTypeTagsList_.AddEntriesFrom(input, _repeated_commentTypeTagsList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomUserSeqMessage : pb::IMessage<RoomUserSeqMessage> {
    private static readonly pb::MessageParser<RoomUserSeqMessage> _parser = new pb::MessageParser<RoomUserSeqMessage>(() => new RoomUserSeqMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserSeqMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage(RoomUserSeqMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      ranksList_ = other.ranksList_.Clone();
      total_ = other.total_;
      popStr_ = other.popStr_;
      seatsList_ = other.seatsList_.Clone();
      popularity_ = other.popularity_;
      totalUser_ = other.totalUser_;
      totalUserStr_ = other.totalUserStr_;
      totalStr_ = other.totalStr_;
      onlineUserForAnchor_ = other.onlineUserForAnchor_;
      totalPvForAnchor_ = other.totalPvForAnchor_;
      upRightStatsStr_ = other.upRightStatsStr_;
      upRightStatsStrComplete_ = other.upRightStatsStrComplete_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessage Clone() {
      return new RoomUserSeqMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "ranksList" field.</summary>
    public const int RanksListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Douyin.RoomUserSeqMessageContributor> _repeated_ranksList_codec
        = pb::FieldCodec.ForMessage(18, global::Douyin.RoomUserSeqMessageContributor.Parser);
    private readonly pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor> ranksList_ = new pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor> RanksList {
      get { return ranksList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "popStr" field.</summary>
    public const int PopStrFieldNumber = 4;
    private string popStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PopStr {
      get { return popStr_; }
      set {
        popStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatsList" field.</summary>
    public const int SeatsListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Douyin.RoomUserSeqMessageContributor> _repeated_seatsList_codec
        = pb::FieldCodec.ForMessage(42, global::Douyin.RoomUserSeqMessageContributor.Parser);
    private readonly pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor> seatsList_ = new pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.RoomUserSeqMessageContributor> SeatsList {
      get { return seatsList_; }
    }

    /// <summary>Field number for the "popularity" field.</summary>
    public const int PopularityFieldNumber = 6;
    private long popularity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Popularity {
      get { return popularity_; }
      set {
        popularity_ = value;
      }
    }

    /// <summary>Field number for the "totalUser" field.</summary>
    public const int TotalUserFieldNumber = 7;
    private long totalUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalUser {
      get { return totalUser_; }
      set {
        totalUser_ = value;
      }
    }

    /// <summary>Field number for the "totalUserStr" field.</summary>
    public const int TotalUserStrFieldNumber = 8;
    private string totalUserStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalUserStr {
      get { return totalUserStr_; }
      set {
        totalUserStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalStr" field.</summary>
    public const int TotalStrFieldNumber = 9;
    private string totalStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalStr {
      get { return totalStr_; }
      set {
        totalStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "onlineUserForAnchor" field.</summary>
    public const int OnlineUserForAnchorFieldNumber = 10;
    private string onlineUserForAnchor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OnlineUserForAnchor {
      get { return onlineUserForAnchor_; }
      set {
        onlineUserForAnchor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalPvForAnchor" field.</summary>
    public const int TotalPvForAnchorFieldNumber = 11;
    private string totalPvForAnchor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalPvForAnchor {
      get { return totalPvForAnchor_; }
      set {
        totalPvForAnchor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upRightStatsStr" field.</summary>
    public const int UpRightStatsStrFieldNumber = 12;
    private string upRightStatsStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpRightStatsStr {
      get { return upRightStatsStr_; }
      set {
        upRightStatsStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upRightStatsStrComplete" field.</summary>
    public const int UpRightStatsStrCompleteFieldNumber = 13;
    private string upRightStatsStrComplete_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpRightStatsStrComplete {
      get { return upRightStatsStrComplete_; }
      set {
        upRightStatsStrComplete_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserSeqMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserSeqMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if(!ranksList_.Equals(other.ranksList_)) return false;
      if (Total != other.Total) return false;
      if (PopStr != other.PopStr) return false;
      if(!seatsList_.Equals(other.seatsList_)) return false;
      if (Popularity != other.Popularity) return false;
      if (TotalUser != other.TotalUser) return false;
      if (TotalUserStr != other.TotalUserStr) return false;
      if (TotalStr != other.TotalStr) return false;
      if (OnlineUserForAnchor != other.OnlineUserForAnchor) return false;
      if (TotalPvForAnchor != other.TotalPvForAnchor) return false;
      if (UpRightStatsStr != other.UpRightStatsStr) return false;
      if (UpRightStatsStrComplete != other.UpRightStatsStrComplete) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      hash ^= ranksList_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (PopStr.Length != 0) hash ^= PopStr.GetHashCode();
      hash ^= seatsList_.GetHashCode();
      if (Popularity != 0L) hash ^= Popularity.GetHashCode();
      if (TotalUser != 0L) hash ^= TotalUser.GetHashCode();
      if (TotalUserStr.Length != 0) hash ^= TotalUserStr.GetHashCode();
      if (TotalStr.Length != 0) hash ^= TotalStr.GetHashCode();
      if (OnlineUserForAnchor.Length != 0) hash ^= OnlineUserForAnchor.GetHashCode();
      if (TotalPvForAnchor.Length != 0) hash ^= TotalPvForAnchor.GetHashCode();
      if (UpRightStatsStr.Length != 0) hash ^= UpRightStatsStr.GetHashCode();
      if (UpRightStatsStrComplete.Length != 0) hash ^= UpRightStatsStrComplete.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      ranksList_.WriteTo(output, _repeated_ranksList_codec);
      if (Total != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Total);
      }
      if (PopStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PopStr);
      }
      seatsList_.WriteTo(output, _repeated_seatsList_codec);
      if (Popularity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Popularity);
      }
      if (TotalUser != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalUser);
      }
      if (TotalUserStr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TotalUserStr);
      }
      if (TotalStr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TotalStr);
      }
      if (OnlineUserForAnchor.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OnlineUserForAnchor);
      }
      if (TotalPvForAnchor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TotalPvForAnchor);
      }
      if (UpRightStatsStr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UpRightStatsStr);
      }
      if (UpRightStatsStrComplete.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(UpRightStatsStrComplete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      size += ranksList_.CalculateSize(_repeated_ranksList_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (PopStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PopStr);
      }
      size += seatsList_.CalculateSize(_repeated_seatsList_codec);
      if (Popularity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Popularity);
      }
      if (TotalUser != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalUser);
      }
      if (TotalUserStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalUserStr);
      }
      if (TotalStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalStr);
      }
      if (OnlineUserForAnchor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnlineUserForAnchor);
      }
      if (TotalPvForAnchor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalPvForAnchor);
      }
      if (UpRightStatsStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpRightStatsStr);
      }
      if (UpRightStatsStrComplete.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpRightStatsStrComplete);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserSeqMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      ranksList_.Add(other.ranksList_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.PopStr.Length != 0) {
        PopStr = other.PopStr;
      }
      seatsList_.Add(other.seatsList_);
      if (other.Popularity != 0L) {
        Popularity = other.Popularity;
      }
      if (other.TotalUser != 0L) {
        TotalUser = other.TotalUser;
      }
      if (other.TotalUserStr.Length != 0) {
        TotalUserStr = other.TotalUserStr;
      }
      if (other.TotalStr.Length != 0) {
        TotalStr = other.TotalStr;
      }
      if (other.OnlineUserForAnchor.Length != 0) {
        OnlineUserForAnchor = other.OnlineUserForAnchor;
      }
      if (other.TotalPvForAnchor.Length != 0) {
        TotalPvForAnchor = other.TotalPvForAnchor;
      }
      if (other.UpRightStatsStr.Length != 0) {
        UpRightStatsStr = other.UpRightStatsStr;
      }
      if (other.UpRightStatsStrComplete.Length != 0) {
        UpRightStatsStrComplete = other.UpRightStatsStrComplete;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            ranksList_.AddEntriesFrom(input, _repeated_ranksList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt64();
            break;
          }
          case 34: {
            PopStr = input.ReadString();
            break;
          }
          case 42: {
            seatsList_.AddEntriesFrom(input, _repeated_seatsList_codec);
            break;
          }
          case 48: {
            Popularity = input.ReadInt64();
            break;
          }
          case 56: {
            TotalUser = input.ReadInt64();
            break;
          }
          case 66: {
            TotalUserStr = input.ReadString();
            break;
          }
          case 74: {
            TotalStr = input.ReadString();
            break;
          }
          case 82: {
            OnlineUserForAnchor = input.ReadString();
            break;
          }
          case 90: {
            TotalPvForAnchor = input.ReadString();
            break;
          }
          case 98: {
            UpRightStatsStr = input.ReadString();
            break;
          }
          case 106: {
            UpRightStatsStrComplete = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonTextMessage : pb::IMessage<CommonTextMessage> {
    private static readonly pb::MessageParser<CommonTextMessage> _parser = new pb::MessageParser<CommonTextMessage>(() => new CommonTextMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonTextMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextMessage(CommonTextMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      scene_ = other.scene_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonTextMessage Clone() {
      return new CommonTextMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 3;
    private string scene_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scene {
      get { return scene_; }
      set {
        scene_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonTextMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonTextMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Scene != other.Scene) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Scene.Length != 0) hash ^= Scene.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Scene.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Scene);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Scene.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scene);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonTextMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Scene.Length != 0) {
        Scene = other.Scene;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26: {
            Scene = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateFanTicketMessage : pb::IMessage<UpdateFanTicketMessage> {
    private static readonly pb::MessageParser<UpdateFanTicketMessage> _parser = new pb::MessageParser<UpdateFanTicketMessage>(() => new UpdateFanTicketMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFanTicketMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFanTicketMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFanTicketMessage(UpdateFanTicketMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      roomFanTicketCountText_ = other.roomFanTicketCountText_;
      roomFanTicketCount_ = other.roomFanTicketCount_;
      forceUpdate_ = other.forceUpdate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFanTicketMessage Clone() {
      return new UpdateFanTicketMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "roomFanTicketCountText" field.</summary>
    public const int RoomFanTicketCountTextFieldNumber = 2;
    private string roomFanTicketCountText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomFanTicketCountText {
      get { return roomFanTicketCountText_; }
      set {
        roomFanTicketCountText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomFanTicketCount" field.</summary>
    public const int RoomFanTicketCountFieldNumber = 3;
    private ulong roomFanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomFanTicketCount {
      get { return roomFanTicketCount_; }
      set {
        roomFanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "forceUpdate" field.</summary>
    public const int ForceUpdateFieldNumber = 4;
    private bool forceUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceUpdate {
      get { return forceUpdate_; }
      set {
        forceUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFanTicketMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFanTicketMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (RoomFanTicketCountText != other.RoomFanTicketCountText) return false;
      if (RoomFanTicketCount != other.RoomFanTicketCount) return false;
      if (ForceUpdate != other.ForceUpdate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (RoomFanTicketCountText.Length != 0) hash ^= RoomFanTicketCountText.GetHashCode();
      if (RoomFanTicketCount != 0UL) hash ^= RoomFanTicketCount.GetHashCode();
      if (ForceUpdate != false) hash ^= ForceUpdate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (RoomFanTicketCountText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomFanTicketCountText);
      }
      if (RoomFanTicketCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomFanTicketCount);
      }
      if (ForceUpdate != false) {
        output.WriteRawTag(32);
        output.WriteBool(ForceUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (RoomFanTicketCountText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomFanTicketCountText);
      }
      if (RoomFanTicketCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomFanTicketCount);
      }
      if (ForceUpdate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFanTicketMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.RoomFanTicketCountText.Length != 0) {
        RoomFanTicketCountText = other.RoomFanTicketCountText;
      }
      if (other.RoomFanTicketCount != 0UL) {
        RoomFanTicketCount = other.RoomFanTicketCount;
      }
      if (other.ForceUpdate != false) {
        ForceUpdate = other.ForceUpdate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            RoomFanTicketCountText = input.ReadString();
            break;
          }
          case 24: {
            RoomFanTicketCount = input.ReadUInt64();
            break;
          }
          case 32: {
            ForceUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomUserSeqMessageContributor : pb::IMessage<RoomUserSeqMessageContributor> {
    private static readonly pb::MessageParser<RoomUserSeqMessageContributor> _parser = new pb::MessageParser<RoomUserSeqMessageContributor>(() => new RoomUserSeqMessageContributor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserSeqMessageContributor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessageContributor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessageContributor(RoomUserSeqMessageContributor other) : this() {
      score_ = other.score_;
      User = other.user_ != null ? other.User.Clone() : null;
      rank_ = other.rank_;
      delta_ = other.delta_;
      isHidden_ = other.isHidden_;
      scoreDescription_ = other.scoreDescription_;
      exactlyScore_ = other.exactlyScore_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserSeqMessageContributor Clone() {
      return new RoomUserSeqMessageContributor(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private ulong score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private ulong rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 4;
    private ulong delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "isHidden" field.</summary>
    public const int IsHiddenFieldNumber = 5;
    private bool isHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHidden {
      get { return isHidden_; }
      set {
        isHidden_ = value;
      }
    }

    /// <summary>Field number for the "scoreDescription" field.</summary>
    public const int ScoreDescriptionFieldNumber = 6;
    private string scoreDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScoreDescription {
      get { return scoreDescription_; }
      set {
        scoreDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exactlyScore" field.</summary>
    public const int ExactlyScoreFieldNumber = 7;
    private string exactlyScore_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExactlyScore {
      get { return exactlyScore_; }
      set {
        exactlyScore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserSeqMessageContributor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserSeqMessageContributor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Rank != other.Rank) return false;
      if (Delta != other.Delta) return false;
      if (IsHidden != other.IsHidden) return false;
      if (ScoreDescription != other.ScoreDescription) return false;
      if (ExactlyScore != other.ExactlyScore) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0UL) hash ^= Score.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Rank != 0UL) hash ^= Rank.GetHashCode();
      if (Delta != 0UL) hash ^= Delta.GetHashCode();
      if (IsHidden != false) hash ^= IsHidden.GetHashCode();
      if (ScoreDescription.Length != 0) hash ^= ScoreDescription.GetHashCode();
      if (ExactlyScore.Length != 0) hash ^= ExactlyScore.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Score);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Rank != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rank);
      }
      if (Delta != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Delta);
      }
      if (IsHidden != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsHidden);
      }
      if (ScoreDescription.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ScoreDescription);
      }
      if (ExactlyScore.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExactlyScore);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Rank != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rank);
      }
      if (Delta != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Delta);
      }
      if (IsHidden != false) {
        size += 1 + 1;
      }
      if (ScoreDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScoreDescription);
      }
      if (ExactlyScore.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExactlyScore);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserSeqMessageContributor other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0UL) {
        Score = other.Score;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Rank != 0UL) {
        Rank = other.Rank;
      }
      if (other.Delta != 0UL) {
        Delta = other.Delta;
      }
      if (other.IsHidden != false) {
        IsHidden = other.IsHidden;
      }
      if (other.ScoreDescription.Length != 0) {
        ScoreDescription = other.ScoreDescription;
      }
      if (other.ExactlyScore.Length != 0) {
        ExactlyScore = other.ExactlyScore;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadUInt64();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            Rank = input.ReadUInt64();
            break;
          }
          case 32: {
            Delta = input.ReadUInt64();
            break;
          }
          case 40: {
            IsHidden = input.ReadBool();
            break;
          }
          case 50: {
            ScoreDescription = input.ReadString();
            break;
          }
          case 58: {
            ExactlyScore = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 礼物消息
  /// </summary>
  public sealed partial class GiftMessage : pb::IMessage<GiftMessage> {
    private static readonly pb::MessageParser<GiftMessage> _parser = new pb::MessageParser<GiftMessage>(() => new GiftMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage(GiftMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      giftId_ = other.giftId_;
      fanTicketCount_ = other.fanTicketCount_;
      groupCount_ = other.groupCount_;
      repeatCount_ = other.repeatCount_;
      comboCount_ = other.comboCount_;
      User = other.user_ != null ? other.User.Clone() : null;
      ToUser = other.toUser_ != null ? other.ToUser.Clone() : null;
      repeatEnd_ = other.repeatEnd_;
      TextEffect = other.textEffect_ != null ? other.TextEffect.Clone() : null;
      groupId_ = other.groupId_;
      incomeTaskgifts_ = other.incomeTaskgifts_;
      roomFanTicketCount_ = other.roomFanTicketCount_;
      Priority = other.priority_ != null ? other.Priority.Clone() : null;
      Gift = other.gift_ != null ? other.Gift.Clone() : null;
      logId_ = other.logId_;
      sendType_ = other.sendType_;
      PublicAreaCommon = other.publicAreaCommon_ != null ? other.PublicAreaCommon.Clone() : null;
      TrayDisplayText = other.trayDisplayText_ != null ? other.TrayDisplayText.Clone() : null;
      bannedDisplayEffects_ = other.bannedDisplayEffects_;
      displayForSelf_ = other.displayForSelf_;
      interactGiftInfo_ = other.interactGiftInfo_;
      diyItemInfo_ = other.diyItemInfo_;
      minAssetSetList_ = other.minAssetSetList_.Clone();
      totalCount_ = other.totalCount_;
      clientGiftSource_ = other.clientGiftSource_;
      toUserIdsList_ = other.toUserIdsList_.Clone();
      sendTime_ = other.sendTime_;
      forceDisplayEffects_ = other.forceDisplayEffects_;
      traceId_ = other.traceId_;
      effectDisplayTs_ = other.effectDisplayTs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftMessage Clone() {
      return new GiftMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 2;
    private ulong giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GiftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    /// <summary>Field number for the "fanTicketCount" field.</summary>
    public const int FanTicketCountFieldNumber = 3;
    private ulong fanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FanTicketCount {
      get { return fanTicketCount_; }
      set {
        fanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "groupCount" field.</summary>
    public const int GroupCountFieldNumber = 4;
    private ulong groupCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupCount {
      get { return groupCount_; }
      set {
        groupCount_ = value;
      }
    }

    /// <summary>Field number for the "repeatCount" field.</summary>
    public const int RepeatCountFieldNumber = 5;
    private ulong repeatCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RepeatCount {
      get { return repeatCount_; }
      set {
        repeatCount_ = value;
      }
    }

    /// <summary>Field number for the "comboCount" field.</summary>
    public const int ComboCountFieldNumber = 6;
    private ulong comboCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ComboCount {
      get { return comboCount_; }
      set {
        comboCount_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 7;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "toUser" field.</summary>
    public const int ToUserFieldNumber = 8;
    private global::Douyin.User toUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User ToUser {
      get { return toUser_; }
      set {
        toUser_ = value;
      }
    }

    /// <summary>Field number for the "repeatEnd" field.</summary>
    public const int RepeatEndFieldNumber = 9;
    private uint repeatEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RepeatEnd {
      get { return repeatEnd_; }
      set {
        repeatEnd_ = value;
      }
    }

    /// <summary>Field number for the "textEffect" field.</summary>
    public const int TextEffectFieldNumber = 10;
    private global::Douyin.TextEffect textEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextEffect TextEffect {
      get { return textEffect_; }
      set {
        textEffect_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private ulong groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "incomeTaskgifts" field.</summary>
    public const int IncomeTaskgiftsFieldNumber = 12;
    private ulong incomeTaskgifts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncomeTaskgifts {
      get { return incomeTaskgifts_; }
      set {
        incomeTaskgifts_ = value;
      }
    }

    /// <summary>Field number for the "roomFanTicketCount" field.</summary>
    public const int RoomFanTicketCountFieldNumber = 13;
    private ulong roomFanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomFanTicketCount {
      get { return roomFanTicketCount_; }
      set {
        roomFanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 14;
    private global::Douyin.GiftIMPriority priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.GiftIMPriority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "gift" field.</summary>
    public const int GiftFieldNumber = 15;
    private global::Douyin.GiftStruct gift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.GiftStruct Gift {
      get { return gift_; }
      set {
        gift_ = value;
      }
    }

    /// <summary>Field number for the "logId" field.</summary>
    public const int LogIdFieldNumber = 16;
    private string logId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogId {
      get { return logId_; }
      set {
        logId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendType" field.</summary>
    public const int SendTypeFieldNumber = 17;
    private ulong sendType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SendType {
      get { return sendType_; }
      set {
        sendType_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 18;
    private global::Douyin.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "trayDisplayText" field.</summary>
    public const int TrayDisplayTextFieldNumber = 19;
    private global::Douyin.Text trayDisplayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Text TrayDisplayText {
      get { return trayDisplayText_; }
      set {
        trayDisplayText_ = value;
      }
    }

    /// <summary>Field number for the "bannedDisplayEffects" field.</summary>
    public const int BannedDisplayEffectsFieldNumber = 20;
    private ulong bannedDisplayEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BannedDisplayEffects {
      get { return bannedDisplayEffects_; }
      set {
        bannedDisplayEffects_ = value;
      }
    }

    /// <summary>Field number for the "displayForSelf" field.</summary>
    public const int DisplayForSelfFieldNumber = 25;
    private bool displayForSelf_;
    /// <summary>
    ///  GiftTrayInfo trayInfo = 21;
    ///  AssetEffectMixInfo assetEffectMixInfo = 22;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisplayForSelf {
      get { return displayForSelf_; }
      set {
        displayForSelf_ = value;
      }
    }

    /// <summary>Field number for the "interactGiftInfo" field.</summary>
    public const int InteractGiftInfoFieldNumber = 26;
    private string interactGiftInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InteractGiftInfo {
      get { return interactGiftInfo_; }
      set {
        interactGiftInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diyItemInfo" field.</summary>
    public const int DiyItemInfoFieldNumber = 27;
    private string diyItemInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiyItemInfo {
      get { return diyItemInfo_; }
      set {
        diyItemInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minAssetSetList" field.</summary>
    public const int MinAssetSetListFieldNumber = 28;
    private static readonly pb::FieldCodec<ulong> _repeated_minAssetSetList_codec
        = pb::FieldCodec.ForUInt64(226);
    private readonly pbc::RepeatedField<ulong> minAssetSetList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> MinAssetSetList {
      get { return minAssetSetList_; }
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 29;
    private ulong totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "clientGiftSource" field.</summary>
    public const int ClientGiftSourceFieldNumber = 30;
    private uint clientGiftSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientGiftSource {
      get { return clientGiftSource_; }
      set {
        clientGiftSource_ = value;
      }
    }

    /// <summary>Field number for the "toUserIdsList" field.</summary>
    public const int ToUserIdsListFieldNumber = 32;
    private static readonly pb::FieldCodec<ulong> _repeated_toUserIdsList_codec
        = pb::FieldCodec.ForUInt64(258);
    private readonly pbc::RepeatedField<ulong> toUserIdsList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  AnchorGiftData anchorGift = 31;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ToUserIdsList {
      get { return toUserIdsList_; }
    }

    /// <summary>Field number for the "sendTime" field.</summary>
    public const int SendTimeFieldNumber = 33;
    private ulong sendTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "forceDisplayEffects" field.</summary>
    public const int ForceDisplayEffectsFieldNumber = 34;
    private ulong forceDisplayEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ForceDisplayEffects {
      get { return forceDisplayEffects_; }
      set {
        forceDisplayEffects_ = value;
      }
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 35;
    private string traceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effectDisplayTs" field.</summary>
    public const int EffectDisplayTsFieldNumber = 36;
    private ulong effectDisplayTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EffectDisplayTs {
      get { return effectDisplayTs_; }
      set {
        effectDisplayTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (GiftId != other.GiftId) return false;
      if (FanTicketCount != other.FanTicketCount) return false;
      if (GroupCount != other.GroupCount) return false;
      if (RepeatCount != other.RepeatCount) return false;
      if (ComboCount != other.ComboCount) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ToUser, other.ToUser)) return false;
      if (RepeatEnd != other.RepeatEnd) return false;
      if (!object.Equals(TextEffect, other.TextEffect)) return false;
      if (GroupId != other.GroupId) return false;
      if (IncomeTaskgifts != other.IncomeTaskgifts) return false;
      if (RoomFanTicketCount != other.RoomFanTicketCount) return false;
      if (!object.Equals(Priority, other.Priority)) return false;
      if (!object.Equals(Gift, other.Gift)) return false;
      if (LogId != other.LogId) return false;
      if (SendType != other.SendType) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      if (!object.Equals(TrayDisplayText, other.TrayDisplayText)) return false;
      if (BannedDisplayEffects != other.BannedDisplayEffects) return false;
      if (DisplayForSelf != other.DisplayForSelf) return false;
      if (InteractGiftInfo != other.InteractGiftInfo) return false;
      if (DiyItemInfo != other.DiyItemInfo) return false;
      if(!minAssetSetList_.Equals(other.minAssetSetList_)) return false;
      if (TotalCount != other.TotalCount) return false;
      if (ClientGiftSource != other.ClientGiftSource) return false;
      if(!toUserIdsList_.Equals(other.toUserIdsList_)) return false;
      if (SendTime != other.SendTime) return false;
      if (ForceDisplayEffects != other.ForceDisplayEffects) return false;
      if (TraceId != other.TraceId) return false;
      if (EffectDisplayTs != other.EffectDisplayTs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (GiftId != 0UL) hash ^= GiftId.GetHashCode();
      if (FanTicketCount != 0UL) hash ^= FanTicketCount.GetHashCode();
      if (GroupCount != 0UL) hash ^= GroupCount.GetHashCode();
      if (RepeatCount != 0UL) hash ^= RepeatCount.GetHashCode();
      if (ComboCount != 0UL) hash ^= ComboCount.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (toUser_ != null) hash ^= ToUser.GetHashCode();
      if (RepeatEnd != 0) hash ^= RepeatEnd.GetHashCode();
      if (textEffect_ != null) hash ^= TextEffect.GetHashCode();
      if (GroupId != 0UL) hash ^= GroupId.GetHashCode();
      if (IncomeTaskgifts != 0UL) hash ^= IncomeTaskgifts.GetHashCode();
      if (RoomFanTicketCount != 0UL) hash ^= RoomFanTicketCount.GetHashCode();
      if (priority_ != null) hash ^= Priority.GetHashCode();
      if (gift_ != null) hash ^= Gift.GetHashCode();
      if (LogId.Length != 0) hash ^= LogId.GetHashCode();
      if (SendType != 0UL) hash ^= SendType.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (trayDisplayText_ != null) hash ^= TrayDisplayText.GetHashCode();
      if (BannedDisplayEffects != 0UL) hash ^= BannedDisplayEffects.GetHashCode();
      if (DisplayForSelf != false) hash ^= DisplayForSelf.GetHashCode();
      if (InteractGiftInfo.Length != 0) hash ^= InteractGiftInfo.GetHashCode();
      if (DiyItemInfo.Length != 0) hash ^= DiyItemInfo.GetHashCode();
      hash ^= minAssetSetList_.GetHashCode();
      if (TotalCount != 0UL) hash ^= TotalCount.GetHashCode();
      if (ClientGiftSource != 0) hash ^= ClientGiftSource.GetHashCode();
      hash ^= toUserIdsList_.GetHashCode();
      if (SendTime != 0UL) hash ^= SendTime.GetHashCode();
      if (ForceDisplayEffects != 0UL) hash ^= ForceDisplayEffects.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (EffectDisplayTs != 0UL) hash ^= EffectDisplayTs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (GiftId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GiftId);
      }
      if (FanTicketCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FanTicketCount);
      }
      if (GroupCount != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GroupCount);
      }
      if (RepeatCount != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RepeatCount);
      }
      if (ComboCount != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ComboCount);
      }
      if (user_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(User);
      }
      if (toUser_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ToUser);
      }
      if (RepeatEnd != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RepeatEnd);
      }
      if (textEffect_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TextEffect);
      }
      if (GroupId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(GroupId);
      }
      if (IncomeTaskgifts != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(IncomeTaskgifts);
      }
      if (RoomFanTicketCount != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(RoomFanTicketCount);
      }
      if (priority_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Priority);
      }
      if (gift_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Gift);
      }
      if (LogId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LogId);
      }
      if (SendType != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SendType);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PublicAreaCommon);
      }
      if (trayDisplayText_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TrayDisplayText);
      }
      if (BannedDisplayEffects != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(BannedDisplayEffects);
      }
      if (DisplayForSelf != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(DisplayForSelf);
      }
      if (InteractGiftInfo.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(InteractGiftInfo);
      }
      if (DiyItemInfo.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(DiyItemInfo);
      }
      minAssetSetList_.WriteTo(output, _repeated_minAssetSetList_codec);
      if (TotalCount != 0UL) {
        output.WriteRawTag(232, 1);
        output.WriteUInt64(TotalCount);
      }
      if (ClientGiftSource != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ClientGiftSource);
      }
      toUserIdsList_.WriteTo(output, _repeated_toUserIdsList_codec);
      if (SendTime != 0UL) {
        output.WriteRawTag(136, 2);
        output.WriteUInt64(SendTime);
      }
      if (ForceDisplayEffects != 0UL) {
        output.WriteRawTag(144, 2);
        output.WriteUInt64(ForceDisplayEffects);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(TraceId);
      }
      if (EffectDisplayTs != 0UL) {
        output.WriteRawTag(160, 2);
        output.WriteUInt64(EffectDisplayTs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (GiftId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GiftId);
      }
      if (FanTicketCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FanTicketCount);
      }
      if (GroupCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupCount);
      }
      if (RepeatCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RepeatCount);
      }
      if (ComboCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ComboCount);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (toUser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToUser);
      }
      if (RepeatEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RepeatEnd);
      }
      if (textEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextEffect);
      }
      if (GroupId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GroupId);
      }
      if (IncomeTaskgifts != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncomeTaskgifts);
      }
      if (RoomFanTicketCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomFanTicketCount);
      }
      if (priority_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Priority);
      }
      if (gift_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
      }
      if (LogId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LogId);
      }
      if (SendType != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SendType);
      }
      if (publicAreaCommon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (trayDisplayText_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrayDisplayText);
      }
      if (BannedDisplayEffects != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BannedDisplayEffects);
      }
      if (DisplayForSelf != false) {
        size += 2 + 1;
      }
      if (InteractGiftInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InteractGiftInfo);
      }
      if (DiyItemInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DiyItemInfo);
      }
      size += minAssetSetList_.CalculateSize(_repeated_minAssetSetList_codec);
      if (TotalCount != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TotalCount);
      }
      if (ClientGiftSource != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClientGiftSource);
      }
      size += toUserIdsList_.CalculateSize(_repeated_toUserIdsList_codec);
      if (SendTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SendTime);
      }
      if (ForceDisplayEffects != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ForceDisplayEffects);
      }
      if (TraceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (EffectDisplayTs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EffectDisplayTs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.GiftId != 0UL) {
        GiftId = other.GiftId;
      }
      if (other.FanTicketCount != 0UL) {
        FanTicketCount = other.FanTicketCount;
      }
      if (other.GroupCount != 0UL) {
        GroupCount = other.GroupCount;
      }
      if (other.RepeatCount != 0UL) {
        RepeatCount = other.RepeatCount;
      }
      if (other.ComboCount != 0UL) {
        ComboCount = other.ComboCount;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.toUser_ != null) {
        if (toUser_ == null) {
          toUser_ = new global::Douyin.User();
        }
        ToUser.MergeFrom(other.ToUser);
      }
      if (other.RepeatEnd != 0) {
        RepeatEnd = other.RepeatEnd;
      }
      if (other.textEffect_ != null) {
        if (textEffect_ == null) {
          textEffect_ = new global::Douyin.TextEffect();
        }
        TextEffect.MergeFrom(other.TextEffect);
      }
      if (other.GroupId != 0UL) {
        GroupId = other.GroupId;
      }
      if (other.IncomeTaskgifts != 0UL) {
        IncomeTaskgifts = other.IncomeTaskgifts;
      }
      if (other.RoomFanTicketCount != 0UL) {
        RoomFanTicketCount = other.RoomFanTicketCount;
      }
      if (other.priority_ != null) {
        if (priority_ == null) {
          priority_ = new global::Douyin.GiftIMPriority();
        }
        Priority.MergeFrom(other.Priority);
      }
      if (other.gift_ != null) {
        if (gift_ == null) {
          gift_ = new global::Douyin.GiftStruct();
        }
        Gift.MergeFrom(other.Gift);
      }
      if (other.LogId.Length != 0) {
        LogId = other.LogId;
      }
      if (other.SendType != 0UL) {
        SendType = other.SendType;
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      if (other.trayDisplayText_ != null) {
        if (trayDisplayText_ == null) {
          trayDisplayText_ = new global::Douyin.Text();
        }
        TrayDisplayText.MergeFrom(other.TrayDisplayText);
      }
      if (other.BannedDisplayEffects != 0UL) {
        BannedDisplayEffects = other.BannedDisplayEffects;
      }
      if (other.DisplayForSelf != false) {
        DisplayForSelf = other.DisplayForSelf;
      }
      if (other.InteractGiftInfo.Length != 0) {
        InteractGiftInfo = other.InteractGiftInfo;
      }
      if (other.DiyItemInfo.Length != 0) {
        DiyItemInfo = other.DiyItemInfo;
      }
      minAssetSetList_.Add(other.minAssetSetList_);
      if (other.TotalCount != 0UL) {
        TotalCount = other.TotalCount;
      }
      if (other.ClientGiftSource != 0) {
        ClientGiftSource = other.ClientGiftSource;
      }
      toUserIdsList_.Add(other.toUserIdsList_);
      if (other.SendTime != 0UL) {
        SendTime = other.SendTime;
      }
      if (other.ForceDisplayEffects != 0UL) {
        ForceDisplayEffects = other.ForceDisplayEffects;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.EffectDisplayTs != 0UL) {
        EffectDisplayTs = other.EffectDisplayTs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 16: {
            GiftId = input.ReadUInt64();
            break;
          }
          case 24: {
            FanTicketCount = input.ReadUInt64();
            break;
          }
          case 32: {
            GroupCount = input.ReadUInt64();
            break;
          }
          case 40: {
            RepeatCount = input.ReadUInt64();
            break;
          }
          case 48: {
            ComboCount = input.ReadUInt64();
            break;
          }
          case 58: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 66: {
            if (toUser_ == null) {
              toUser_ = new global::Douyin.User();
            }
            input.ReadMessage(toUser_);
            break;
          }
          case 72: {
            RepeatEnd = input.ReadUInt32();
            break;
          }
          case 82: {
            if (textEffect_ == null) {
              textEffect_ = new global::Douyin.TextEffect();
            }
            input.ReadMessage(textEffect_);
            break;
          }
          case 88: {
            GroupId = input.ReadUInt64();
            break;
          }
          case 96: {
            IncomeTaskgifts = input.ReadUInt64();
            break;
          }
          case 104: {
            RoomFanTicketCount = input.ReadUInt64();
            break;
          }
          case 114: {
            if (priority_ == null) {
              priority_ = new global::Douyin.GiftIMPriority();
            }
            input.ReadMessage(priority_);
            break;
          }
          case 122: {
            if (gift_ == null) {
              gift_ = new global::Douyin.GiftStruct();
            }
            input.ReadMessage(gift_);
            break;
          }
          case 130: {
            LogId = input.ReadString();
            break;
          }
          case 136: {
            SendType = input.ReadUInt64();
            break;
          }
          case 146: {
            if (publicAreaCommon_ == null) {
              publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
            }
            input.ReadMessage(publicAreaCommon_);
            break;
          }
          case 154: {
            if (trayDisplayText_ == null) {
              trayDisplayText_ = new global::Douyin.Text();
            }
            input.ReadMessage(trayDisplayText_);
            break;
          }
          case 160: {
            BannedDisplayEffects = input.ReadUInt64();
            break;
          }
          case 200: {
            DisplayForSelf = input.ReadBool();
            break;
          }
          case 210: {
            InteractGiftInfo = input.ReadString();
            break;
          }
          case 218: {
            DiyItemInfo = input.ReadString();
            break;
          }
          case 226:
          case 224: {
            minAssetSetList_.AddEntriesFrom(input, _repeated_minAssetSetList_codec);
            break;
          }
          case 232: {
            TotalCount = input.ReadUInt64();
            break;
          }
          case 240: {
            ClientGiftSource = input.ReadUInt32();
            break;
          }
          case 258:
          case 256: {
            toUserIdsList_.AddEntriesFrom(input, _repeated_toUserIdsList_codec);
            break;
          }
          case 264: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 272: {
            ForceDisplayEffects = input.ReadUInt64();
            break;
          }
          case 282: {
            TraceId = input.ReadString();
            break;
          }
          case 288: {
            EffectDisplayTs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftStruct : pb::IMessage<GiftStruct> {
    private static readonly pb::MessageParser<GiftStruct> _parser = new pb::MessageParser<GiftStruct>(() => new GiftStruct());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct(GiftStruct other) : this() {
      Image = other.image_ != null ? other.Image.Clone() : null;
      describe_ = other.describe_;
      notify_ = other.notify_;
      duration_ = other.duration_;
      id_ = other.id_;
      forLinkmic_ = other.forLinkmic_;
      doodle_ = other.doodle_;
      forFansclub_ = other.forFansclub_;
      combo_ = other.combo_;
      type_ = other.type_;
      diamondCount_ = other.diamondCount_;
      isDisplayedOnPanel_ = other.isDisplayedOnPanel_;
      primaryEffectId_ = other.primaryEffectId_;
      GiftLabelIcon = other.giftLabelIcon_ != null ? other.GiftLabelIcon.Clone() : null;
      name_ = other.name_;
      region_ = other.region_;
      manual_ = other.manual_;
      forCustom_ = other.forCustom_;
      Icon = other.icon_ != null ? other.Icon.Clone() : null;
      actionType_ = other.actionType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftStruct Clone() {
      return new GiftStruct(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Douyin.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 2;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notify" field.</summary>
    public const int NotifyFieldNumber = 3;
    private bool notify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Notify {
      get { return notify_; }
      set {
        notify_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private ulong duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "forLinkmic" field.</summary>
    public const int ForLinkmicFieldNumber = 7;
    private bool forLinkmic_;
    /// <summary>
    ///  GiftStructFansClubInfo fansclubInfo = 6;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForLinkmic {
      get { return forLinkmic_; }
      set {
        forLinkmic_ = value;
      }
    }

    /// <summary>Field number for the "doodle" field.</summary>
    public const int DoodleFieldNumber = 8;
    private bool doodle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Doodle {
      get { return doodle_; }
      set {
        doodle_ = value;
      }
    }

    /// <summary>Field number for the "forFansclub" field.</summary>
    public const int ForFansclubFieldNumber = 9;
    private bool forFansclub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForFansclub {
      get { return forFansclub_; }
      set {
        forFansclub_ = value;
      }
    }

    /// <summary>Field number for the "combo" field.</summary>
    public const int ComboFieldNumber = 10;
    private bool combo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Combo {
      get { return combo_; }
      set {
        combo_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "diamondCount" field.</summary>
    public const int DiamondCountFieldNumber = 12;
    private uint diamondCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "isDisplayedOnPanel" field.</summary>
    public const int IsDisplayedOnPanelFieldNumber = 13;
    private bool isDisplayedOnPanel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDisplayedOnPanel {
      get { return isDisplayedOnPanel_; }
      set {
        isDisplayedOnPanel_ = value;
      }
    }

    /// <summary>Field number for the "primaryEffectId" field.</summary>
    public const int PrimaryEffectIdFieldNumber = 14;
    private ulong primaryEffectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PrimaryEffectId {
      get { return primaryEffectId_; }
      set {
        primaryEffectId_ = value;
      }
    }

    /// <summary>Field number for the "giftLabelIcon" field.</summary>
    public const int GiftLabelIconFieldNumber = 15;
    private global::Douyin.Image giftLabelIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image GiftLabelIcon {
      get { return giftLabelIcon_; }
      set {
        giftLabelIcon_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 16;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 17;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manual" field.</summary>
    public const int ManualFieldNumber = 18;
    private string manual_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manual {
      get { return manual_; }
      set {
        manual_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forCustom" field.</summary>
    public const int ForCustomFieldNumber = 19;
    private bool forCustom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForCustom {
      get { return forCustom_; }
      set {
        forCustom_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 21;
    private global::Douyin.Image icon_;
    /// <summary>
    ///  specialEffectsMap = 20;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 22;
    private uint actionType_;
    /// <summary>
    /// fixme 后面的就不写了还有几十个属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (Describe != other.Describe) return false;
      if (Notify != other.Notify) return false;
      if (Duration != other.Duration) return false;
      if (Id != other.Id) return false;
      if (ForLinkmic != other.ForLinkmic) return false;
      if (Doodle != other.Doodle) return false;
      if (ForFansclub != other.ForFansclub) return false;
      if (Combo != other.Combo) return false;
      if (Type != other.Type) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if (IsDisplayedOnPanel != other.IsDisplayedOnPanel) return false;
      if (PrimaryEffectId != other.PrimaryEffectId) return false;
      if (!object.Equals(GiftLabelIcon, other.GiftLabelIcon)) return false;
      if (Name != other.Name) return false;
      if (Region != other.Region) return false;
      if (Manual != other.Manual) return false;
      if (ForCustom != other.ForCustom) return false;
      if (!object.Equals(Icon, other.Icon)) return false;
      if (ActionType != other.ActionType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (Notify != false) hash ^= Notify.GetHashCode();
      if (Duration != 0UL) hash ^= Duration.GetHashCode();
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ForLinkmic != false) hash ^= ForLinkmic.GetHashCode();
      if (Doodle != false) hash ^= Doodle.GetHashCode();
      if (ForFansclub != false) hash ^= ForFansclub.GetHashCode();
      if (Combo != false) hash ^= Combo.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      if (IsDisplayedOnPanel != false) hash ^= IsDisplayedOnPanel.GetHashCode();
      if (PrimaryEffectId != 0UL) hash ^= PrimaryEffectId.GetHashCode();
      if (giftLabelIcon_ != null) hash ^= GiftLabelIcon.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Manual.Length != 0) hash ^= Manual.GetHashCode();
      if (ForCustom != false) hash ^= ForCustom.GetHashCode();
      if (icon_ != null) hash ^= Icon.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Describe);
      }
      if (Notify != false) {
        output.WriteRawTag(24);
        output.WriteBool(Notify);
      }
      if (Duration != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Duration);
      }
      if (Id != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Id);
      }
      if (ForLinkmic != false) {
        output.WriteRawTag(56);
        output.WriteBool(ForLinkmic);
      }
      if (Doodle != false) {
        output.WriteRawTag(64);
        output.WriteBool(Doodle);
      }
      if (ForFansclub != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForFansclub);
      }
      if (Combo != false) {
        output.WriteRawTag(80);
        output.WriteBool(Combo);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Type);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DiamondCount);
      }
      if (IsDisplayedOnPanel != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsDisplayedOnPanel);
      }
      if (PrimaryEffectId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(PrimaryEffectId);
      }
      if (giftLabelIcon_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GiftLabelIcon);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Region);
      }
      if (Manual.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Manual);
      }
      if (ForCustom != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ForCustom);
      }
      if (icon_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Icon);
      }
      if (ActionType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(ActionType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (Notify != false) {
        size += 1 + 1;
      }
      if (Duration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Duration);
      }
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ForLinkmic != false) {
        size += 1 + 1;
      }
      if (Doodle != false) {
        size += 1 + 1;
      }
      if (ForFansclub != false) {
        size += 1 + 1;
      }
      if (Combo != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondCount);
      }
      if (IsDisplayedOnPanel != false) {
        size += 1 + 1;
      }
      if (PrimaryEffectId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PrimaryEffectId);
      }
      if (giftLabelIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftLabelIcon);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Region.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Manual.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Manual);
      }
      if (ForCustom != false) {
        size += 2 + 1;
      }
      if (icon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Icon);
      }
      if (ActionType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ActionType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftStruct other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Douyin.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.Notify != false) {
        Notify = other.Notify;
      }
      if (other.Duration != 0UL) {
        Duration = other.Duration;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ForLinkmic != false) {
        ForLinkmic = other.ForLinkmic;
      }
      if (other.Doodle != false) {
        Doodle = other.Doodle;
      }
      if (other.ForFansclub != false) {
        ForFansclub = other.ForFansclub;
      }
      if (other.Combo != false) {
        Combo = other.Combo;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      if (other.IsDisplayedOnPanel != false) {
        IsDisplayedOnPanel = other.IsDisplayedOnPanel;
      }
      if (other.PrimaryEffectId != 0UL) {
        PrimaryEffectId = other.PrimaryEffectId;
      }
      if (other.giftLabelIcon_ != null) {
        if (giftLabelIcon_ == null) {
          giftLabelIcon_ = new global::Douyin.Image();
        }
        GiftLabelIcon.MergeFrom(other.GiftLabelIcon);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Manual.Length != 0) {
        Manual = other.Manual;
      }
      if (other.ForCustom != false) {
        ForCustom = other.ForCustom;
      }
      if (other.icon_ != null) {
        if (icon_ == null) {
          icon_ = new global::Douyin.Image();
        }
        Icon.MergeFrom(other.Icon);
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (image_ == null) {
              image_ = new global::Douyin.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 18: {
            Describe = input.ReadString();
            break;
          }
          case 24: {
            Notify = input.ReadBool();
            break;
          }
          case 32: {
            Duration = input.ReadUInt64();
            break;
          }
          case 40: {
            Id = input.ReadUInt64();
            break;
          }
          case 56: {
            ForLinkmic = input.ReadBool();
            break;
          }
          case 64: {
            Doodle = input.ReadBool();
            break;
          }
          case 72: {
            ForFansclub = input.ReadBool();
            break;
          }
          case 80: {
            Combo = input.ReadBool();
            break;
          }
          case 88: {
            Type = input.ReadUInt32();
            break;
          }
          case 96: {
            DiamondCount = input.ReadUInt32();
            break;
          }
          case 104: {
            IsDisplayedOnPanel = input.ReadBool();
            break;
          }
          case 112: {
            PrimaryEffectId = input.ReadUInt64();
            break;
          }
          case 122: {
            if (giftLabelIcon_ == null) {
              giftLabelIcon_ = new global::Douyin.Image();
            }
            input.ReadMessage(giftLabelIcon_);
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 138: {
            Region = input.ReadString();
            break;
          }
          case 146: {
            Manual = input.ReadString();
            break;
          }
          case 152: {
            ForCustom = input.ReadBool();
            break;
          }
          case 170: {
            if (icon_ == null) {
              icon_ = new global::Douyin.Image();
            }
            input.ReadMessage(icon_);
            break;
          }
          case 176: {
            ActionType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiftIMPriority : pb::IMessage<GiftIMPriority> {
    private static readonly pb::MessageParser<GiftIMPriority> _parser = new pb::MessageParser<GiftIMPriority>(() => new GiftIMPriority());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftIMPriority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority(GiftIMPriority other) : this() {
      queueSizesList_ = other.queueSizesList_.Clone();
      selfQueuePriority_ = other.selfQueuePriority_;
      priority_ = other.priority_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftIMPriority Clone() {
      return new GiftIMPriority(this);
    }

    /// <summary>Field number for the "queueSizesList" field.</summary>
    public const int QueueSizesListFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_queueSizesList_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> queueSizesList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> QueueSizesList {
      get { return queueSizesList_; }
    }

    /// <summary>Field number for the "selfQueuePriority" field.</summary>
    public const int SelfQueuePriorityFieldNumber = 2;
    private ulong selfQueuePriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SelfQueuePriority {
      get { return selfQueuePriority_; }
      set {
        selfQueuePriority_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 3;
    private ulong priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftIMPriority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftIMPriority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!queueSizesList_.Equals(other.queueSizesList_)) return false;
      if (SelfQueuePriority != other.SelfQueuePriority) return false;
      if (Priority != other.Priority) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= queueSizesList_.GetHashCode();
      if (SelfQueuePriority != 0UL) hash ^= SelfQueuePriority.GetHashCode();
      if (Priority != 0UL) hash ^= Priority.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      queueSizesList_.WriteTo(output, _repeated_queueSizesList_codec);
      if (SelfQueuePriority != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SelfQueuePriority);
      }
      if (Priority != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Priority);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += queueSizesList_.CalculateSize(_repeated_queueSizesList_codec);
      if (SelfQueuePriority != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SelfQueuePriority);
      }
      if (Priority != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Priority);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftIMPriority other) {
      if (other == null) {
        return;
      }
      queueSizesList_.Add(other.queueSizesList_);
      if (other.SelfQueuePriority != 0UL) {
        SelfQueuePriority = other.SelfQueuePriority;
      }
      if (other.Priority != 0UL) {
        Priority = other.Priority;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            queueSizesList_.AddEntriesFrom(input, _repeated_queueSizesList_codec);
            break;
          }
          case 16: {
            SelfQueuePriority = input.ReadUInt64();
            break;
          }
          case 24: {
            Priority = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextEffect : pb::IMessage<TextEffect> {
    private static readonly pb::MessageParser<TextEffect> _parser = new pb::MessageParser<TextEffect>(() => new TextEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffect(TextEffect other) : this() {
      Portrait = other.portrait_ != null ? other.Portrait.Clone() : null;
      Landscape = other.landscape_ != null ? other.Landscape.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffect Clone() {
      return new TextEffect(this);
    }

    /// <summary>Field number for the "portrait" field.</summary>
    public const int PortraitFieldNumber = 1;
    private global::Douyin.TextEffectDetail portrait_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextEffectDetail Portrait {
      get { return portrait_; }
      set {
        portrait_ = value;
      }
    }

    /// <summary>Field number for the "landscape" field.</summary>
    public const int LandscapeFieldNumber = 2;
    private global::Douyin.TextEffectDetail landscape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextEffectDetail Landscape {
      get { return landscape_; }
      set {
        landscape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Portrait, other.Portrait)) return false;
      if (!object.Equals(Landscape, other.Landscape)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (portrait_ != null) hash ^= Portrait.GetHashCode();
      if (landscape_ != null) hash ^= Landscape.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (portrait_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Portrait);
      }
      if (landscape_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Landscape);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (portrait_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portrait);
      }
      if (landscape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Landscape);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextEffect other) {
      if (other == null) {
        return;
      }
      if (other.portrait_ != null) {
        if (portrait_ == null) {
          portrait_ = new global::Douyin.TextEffectDetail();
        }
        Portrait.MergeFrom(other.Portrait);
      }
      if (other.landscape_ != null) {
        if (landscape_ == null) {
          landscape_ = new global::Douyin.TextEffectDetail();
        }
        Landscape.MergeFrom(other.Landscape);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (portrait_ == null) {
              portrait_ = new global::Douyin.TextEffectDetail();
            }
            input.ReadMessage(portrait_);
            break;
          }
          case 18: {
            if (landscape_ == null) {
              landscape_ = new global::Douyin.TextEffectDetail();
            }
            input.ReadMessage(landscape_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextEffectDetail : pb::IMessage<TextEffectDetail> {
    private static readonly pb::MessageParser<TextEffectDetail> _parser = new pb::MessageParser<TextEffectDetail>(() => new TextEffectDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextEffectDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffectDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffectDetail(TextEffectDetail other) : this() {
      Text = other.text_ != null ? other.Text.Clone() : null;
      textFontSize_ = other.textFontSize_;
      Background = other.background_ != null ? other.Background.Clone() : null;
      start_ = other.start_;
      duration_ = other.duration_;
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      shadowDx_ = other.shadowDx_;
      shadowDy_ = other.shadowDy_;
      shadowRadius_ = other.shadowRadius_;
      shadowColor_ = other.shadowColor_;
      strokeColor_ = other.strokeColor_;
      strokeWidth_ = other.strokeWidth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextEffectDetail Clone() {
      return new TextEffectDetail(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private global::Douyin.Text text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "textFontSize" field.</summary>
    public const int TextFontSizeFieldNumber = 2;
    private uint textFontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TextFontSize {
      get { return textFontSize_; }
      set {
        textFontSize_ = value;
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 3;
    private global::Douyin.Image background_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private uint start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 5;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 6;
    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 7;
    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 8;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 9;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "shadowDx" field.</summary>
    public const int ShadowDxFieldNumber = 10;
    private uint shadowDx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShadowDx {
      get { return shadowDx_; }
      set {
        shadowDx_ = value;
      }
    }

    /// <summary>Field number for the "shadowDy" field.</summary>
    public const int ShadowDyFieldNumber = 11;
    private uint shadowDy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShadowDy {
      get { return shadowDy_; }
      set {
        shadowDy_ = value;
      }
    }

    /// <summary>Field number for the "shadowRadius" field.</summary>
    public const int ShadowRadiusFieldNumber = 12;
    private uint shadowRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShadowRadius {
      get { return shadowRadius_; }
      set {
        shadowRadius_ = value;
      }
    }

    /// <summary>Field number for the "shadowColor" field.</summary>
    public const int ShadowColorFieldNumber = 13;
    private string shadowColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShadowColor {
      get { return shadowColor_; }
      set {
        shadowColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strokeColor" field.</summary>
    public const int StrokeColorFieldNumber = 14;
    private string strokeColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrokeColor {
      get { return strokeColor_; }
      set {
        strokeColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strokeWidth" field.</summary>
    public const int StrokeWidthFieldNumber = 15;
    private uint strokeWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrokeWidth {
      get { return strokeWidth_; }
      set {
        strokeWidth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextEffectDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextEffectDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Text, other.Text)) return false;
      if (TextFontSize != other.TextFontSize) return false;
      if (!object.Equals(Background, other.Background)) return false;
      if (Start != other.Start) return false;
      if (Duration != other.Duration) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ShadowDx != other.ShadowDx) return false;
      if (ShadowDy != other.ShadowDy) return false;
      if (ShadowRadius != other.ShadowRadius) return false;
      if (ShadowColor != other.ShadowColor) return false;
      if (StrokeColor != other.StrokeColor) return false;
      if (StrokeWidth != other.StrokeWidth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (text_ != null) hash ^= Text.GetHashCode();
      if (TextFontSize != 0) hash ^= TextFontSize.GetHashCode();
      if (background_ != null) hash ^= Background.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ShadowDx != 0) hash ^= ShadowDx.GetHashCode();
      if (ShadowDy != 0) hash ^= ShadowDy.GetHashCode();
      if (ShadowRadius != 0) hash ^= ShadowRadius.GetHashCode();
      if (ShadowColor.Length != 0) hash ^= ShadowColor.GetHashCode();
      if (StrokeColor.Length != 0) hash ^= StrokeColor.GetHashCode();
      if (StrokeWidth != 0) hash ^= StrokeWidth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (text_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Text);
      }
      if (TextFontSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TextFontSize);
      }
      if (background_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Background);
      }
      if (Start != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Start);
      }
      if (Duration != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Duration);
      }
      if (X != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Height);
      }
      if (ShadowDx != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ShadowDx);
      }
      if (ShadowDy != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ShadowDy);
      }
      if (ShadowRadius != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ShadowRadius);
      }
      if (ShadowColor.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ShadowColor);
      }
      if (StrokeColor.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(StrokeColor);
      }
      if (StrokeWidth != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(StrokeWidth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (TextFontSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TextFontSize);
      }
      if (background_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Background);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (ShadowDx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShadowDx);
      }
      if (ShadowDy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShadowDy);
      }
      if (ShadowRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShadowRadius);
      }
      if (ShadowColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShadowColor);
      }
      if (StrokeColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrokeColor);
      }
      if (StrokeWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrokeWidth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextEffectDetail other) {
      if (other == null) {
        return;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Douyin.Text();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.TextFontSize != 0) {
        TextFontSize = other.TextFontSize;
      }
      if (other.background_ != null) {
        if (background_ == null) {
          background_ = new global::Douyin.Image();
        }
        Background.MergeFrom(other.Background);
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ShadowDx != 0) {
        ShadowDx = other.ShadowDx;
      }
      if (other.ShadowDy != 0) {
        ShadowDy = other.ShadowDy;
      }
      if (other.ShadowRadius != 0) {
        ShadowRadius = other.ShadowRadius;
      }
      if (other.ShadowColor.Length != 0) {
        ShadowColor = other.ShadowColor;
      }
      if (other.StrokeColor.Length != 0) {
        StrokeColor = other.StrokeColor;
      }
      if (other.StrokeWidth != 0) {
        StrokeWidth = other.StrokeWidth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (text_ == null) {
              text_ = new global::Douyin.Text();
            }
            input.ReadMessage(text_);
            break;
          }
          case 16: {
            TextFontSize = input.ReadUInt32();
            break;
          }
          case 26: {
            if (background_ == null) {
              background_ = new global::Douyin.Image();
            }
            input.ReadMessage(background_);
            break;
          }
          case 32: {
            Start = input.ReadUInt32();
            break;
          }
          case 40: {
            Duration = input.ReadUInt32();
            break;
          }
          case 48: {
            X = input.ReadUInt32();
            break;
          }
          case 56: {
            Y = input.ReadUInt32();
            break;
          }
          case 64: {
            Width = input.ReadUInt32();
            break;
          }
          case 72: {
            Height = input.ReadUInt32();
            break;
          }
          case 80: {
            ShadowDx = input.ReadUInt32();
            break;
          }
          case 88: {
            ShadowDy = input.ReadUInt32();
            break;
          }
          case 96: {
            ShadowRadius = input.ReadUInt32();
            break;
          }
          case 106: {
            ShadowColor = input.ReadString();
            break;
          }
          case 114: {
            StrokeColor = input.ReadString();
            break;
          }
          case 120: {
            StrokeWidth = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 成员消息
  /// </summary>
  public sealed partial class MemberMessage : pb::IMessage<MemberMessage> {
    private static readonly pb::MessageParser<MemberMessage> _parser = new pb::MessageParser<MemberMessage>(() => new MemberMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage(MemberMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      memberCount_ = other.memberCount_;
      Operator = other.operator_ != null ? other.Operator.Clone() : null;
      isSetToAdmin_ = other.isSetToAdmin_;
      isTopUser_ = other.isTopUser_;
      rankScore_ = other.rankScore_;
      topUserNo_ = other.topUserNo_;
      enterType_ = other.enterType_;
      action_ = other.action_;
      actionDescription_ = other.actionDescription_;
      userId_ = other.userId_;
      EffectConfig = other.effectConfig_ != null ? other.EffectConfig.Clone() : null;
      popStr_ = other.popStr_;
      EnterEffectConfig = other.enterEffectConfig_ != null ? other.EnterEffectConfig.Clone() : null;
      BackgroundImage = other.backgroundImage_ != null ? other.BackgroundImage.Clone() : null;
      BackgroundImageV2 = other.backgroundImageV2_ != null ? other.BackgroundImageV2.Clone() : null;
      AnchorDisplayText = other.anchorDisplayText_ != null ? other.AnchorDisplayText.Clone() : null;
      PublicAreaCommon = other.publicAreaCommon_ != null ? other.PublicAreaCommon.Clone() : null;
      userEnterTipType_ = other.userEnterTipType_;
      anchorEnterTipType_ = other.anchorEnterTipType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMessage Clone() {
      return new MemberMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "memberCount" field.</summary>
    public const int MemberCountFieldNumber = 3;
    private ulong memberCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 4;
    private global::Douyin.User operator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "isSetToAdmin" field.</summary>
    public const int IsSetToAdminFieldNumber = 5;
    private bool isSetToAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSetToAdmin {
      get { return isSetToAdmin_; }
      set {
        isSetToAdmin_ = value;
      }
    }

    /// <summary>Field number for the "isTopUser" field.</summary>
    public const int IsTopUserFieldNumber = 6;
    private bool isTopUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTopUser {
      get { return isTopUser_; }
      set {
        isTopUser_ = value;
      }
    }

    /// <summary>Field number for the "rankScore" field.</summary>
    public const int RankScoreFieldNumber = 7;
    private ulong rankScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RankScore {
      get { return rankScore_; }
      set {
        rankScore_ = value;
      }
    }

    /// <summary>Field number for the "topUserNo" field.</summary>
    public const int TopUserNoFieldNumber = 8;
    private ulong topUserNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TopUserNo {
      get { return topUserNo_; }
      set {
        topUserNo_ = value;
      }
    }

    /// <summary>Field number for the "enterType" field.</summary>
    public const int EnterTypeFieldNumber = 9;
    private ulong enterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EnterType {
      get { return enterType_; }
      set {
        enterType_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 10;
    private ulong action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "actionDescription" field.</summary>
    public const int ActionDescriptionFieldNumber = 11;
    private string actionDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionDescription {
      get { return actionDescription_; }
      set {
        actionDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 12;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "effectConfig" field.</summary>
    public const int EffectConfigFieldNumber = 13;
    private global::Douyin.EffectConfig effectConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.EffectConfig EffectConfig {
      get { return effectConfig_; }
      set {
        effectConfig_ = value;
      }
    }

    /// <summary>Field number for the "popStr" field.</summary>
    public const int PopStrFieldNumber = 14;
    private string popStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PopStr {
      get { return popStr_; }
      set {
        popStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enterEffectConfig" field.</summary>
    public const int EnterEffectConfigFieldNumber = 15;
    private global::Douyin.EffectConfig enterEffectConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.EffectConfig EnterEffectConfig {
      get { return enterEffectConfig_; }
      set {
        enterEffectConfig_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImage" field.</summary>
    public const int BackgroundImageFieldNumber = 16;
    private global::Douyin.Image backgroundImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = value;
      }
    }

    /// <summary>Field number for the "backgroundImageV2" field.</summary>
    public const int BackgroundImageV2FieldNumber = 17;
    private global::Douyin.Image backgroundImageV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image BackgroundImageV2 {
      get { return backgroundImageV2_; }
      set {
        backgroundImageV2_ = value;
      }
    }

    /// <summary>Field number for the "anchorDisplayText" field.</summary>
    public const int AnchorDisplayTextFieldNumber = 18;
    private global::Douyin.Text anchorDisplayText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Text AnchorDisplayText {
      get { return anchorDisplayText_; }
      set {
        anchorDisplayText_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 19;
    private global::Douyin.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    /// <summary>Field number for the "userEnterTipType" field.</summary>
    public const int UserEnterTipTypeFieldNumber = 20;
    private ulong userEnterTipType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserEnterTipType {
      get { return userEnterTipType_; }
      set {
        userEnterTipType_ = value;
      }
    }

    /// <summary>Field number for the "anchorEnterTipType" field.</summary>
    public const int AnchorEnterTipTypeFieldNumber = 21;
    private ulong anchorEnterTipType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnchorEnterTipType {
      get { return anchorEnterTipType_; }
      set {
        anchorEnterTipType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (MemberCount != other.MemberCount) return false;
      if (!object.Equals(Operator, other.Operator)) return false;
      if (IsSetToAdmin != other.IsSetToAdmin) return false;
      if (IsTopUser != other.IsTopUser) return false;
      if (RankScore != other.RankScore) return false;
      if (TopUserNo != other.TopUserNo) return false;
      if (EnterType != other.EnterType) return false;
      if (Action != other.Action) return false;
      if (ActionDescription != other.ActionDescription) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(EffectConfig, other.EffectConfig)) return false;
      if (PopStr != other.PopStr) return false;
      if (!object.Equals(EnterEffectConfig, other.EnterEffectConfig)) return false;
      if (!object.Equals(BackgroundImage, other.BackgroundImage)) return false;
      if (!object.Equals(BackgroundImageV2, other.BackgroundImageV2)) return false;
      if (!object.Equals(AnchorDisplayText, other.AnchorDisplayText)) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      if (UserEnterTipType != other.UserEnterTipType) return false;
      if (AnchorEnterTipType != other.AnchorEnterTipType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (MemberCount != 0UL) hash ^= MemberCount.GetHashCode();
      if (operator_ != null) hash ^= Operator.GetHashCode();
      if (IsSetToAdmin != false) hash ^= IsSetToAdmin.GetHashCode();
      if (IsTopUser != false) hash ^= IsTopUser.GetHashCode();
      if (RankScore != 0UL) hash ^= RankScore.GetHashCode();
      if (TopUserNo != 0UL) hash ^= TopUserNo.GetHashCode();
      if (EnterType != 0UL) hash ^= EnterType.GetHashCode();
      if (Action != 0UL) hash ^= Action.GetHashCode();
      if (ActionDescription.Length != 0) hash ^= ActionDescription.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (effectConfig_ != null) hash ^= EffectConfig.GetHashCode();
      if (PopStr.Length != 0) hash ^= PopStr.GetHashCode();
      if (enterEffectConfig_ != null) hash ^= EnterEffectConfig.GetHashCode();
      if (backgroundImage_ != null) hash ^= BackgroundImage.GetHashCode();
      if (backgroundImageV2_ != null) hash ^= BackgroundImageV2.GetHashCode();
      if (anchorDisplayText_ != null) hash ^= AnchorDisplayText.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      if (UserEnterTipType != 0UL) hash ^= UserEnterTipType.GetHashCode();
      if (AnchorEnterTipType != 0UL) hash ^= AnchorEnterTipType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (MemberCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MemberCount);
      }
      if (operator_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Operator);
      }
      if (IsSetToAdmin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSetToAdmin);
      }
      if (IsTopUser != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTopUser);
      }
      if (RankScore != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(RankScore);
      }
      if (TopUserNo != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TopUserNo);
      }
      if (EnterType != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EnterType);
      }
      if (Action != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Action);
      }
      if (ActionDescription.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ActionDescription);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(UserId);
      }
      if (effectConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EffectConfig);
      }
      if (PopStr.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PopStr);
      }
      if (enterEffectConfig_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EnterEffectConfig);
      }
      if (backgroundImage_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BackgroundImage);
      }
      if (backgroundImageV2_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BackgroundImageV2);
      }
      if (anchorDisplayText_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AnchorDisplayText);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PublicAreaCommon);
      }
      if (UserEnterTipType != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(UserEnterTipType);
      }
      if (AnchorEnterTipType != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(AnchorEnterTipType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (MemberCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemberCount);
      }
      if (operator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operator);
      }
      if (IsSetToAdmin != false) {
        size += 1 + 1;
      }
      if (IsTopUser != false) {
        size += 1 + 1;
      }
      if (RankScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RankScore);
      }
      if (TopUserNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TopUserNo);
      }
      if (EnterType != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EnterType);
      }
      if (Action != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Action);
      }
      if (ActionDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionDescription);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (effectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectConfig);
      }
      if (PopStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PopStr);
      }
      if (enterEffectConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnterEffectConfig);
      }
      if (backgroundImage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImage);
      }
      if (backgroundImageV2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundImageV2);
      }
      if (anchorDisplayText_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorDisplayText);
      }
      if (publicAreaCommon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      if (UserEnterTipType != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(UserEnterTipType);
      }
      if (AnchorEnterTipType != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AnchorEnterTipType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.MemberCount != 0UL) {
        MemberCount = other.MemberCount;
      }
      if (other.operator_ != null) {
        if (operator_ == null) {
          operator_ = new global::Douyin.User();
        }
        Operator.MergeFrom(other.Operator);
      }
      if (other.IsSetToAdmin != false) {
        IsSetToAdmin = other.IsSetToAdmin;
      }
      if (other.IsTopUser != false) {
        IsTopUser = other.IsTopUser;
      }
      if (other.RankScore != 0UL) {
        RankScore = other.RankScore;
      }
      if (other.TopUserNo != 0UL) {
        TopUserNo = other.TopUserNo;
      }
      if (other.EnterType != 0UL) {
        EnterType = other.EnterType;
      }
      if (other.Action != 0UL) {
        Action = other.Action;
      }
      if (other.ActionDescription.Length != 0) {
        ActionDescription = other.ActionDescription;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.effectConfig_ != null) {
        if (effectConfig_ == null) {
          effectConfig_ = new global::Douyin.EffectConfig();
        }
        EffectConfig.MergeFrom(other.EffectConfig);
      }
      if (other.PopStr.Length != 0) {
        PopStr = other.PopStr;
      }
      if (other.enterEffectConfig_ != null) {
        if (enterEffectConfig_ == null) {
          enterEffectConfig_ = new global::Douyin.EffectConfig();
        }
        EnterEffectConfig.MergeFrom(other.EnterEffectConfig);
      }
      if (other.backgroundImage_ != null) {
        if (backgroundImage_ == null) {
          backgroundImage_ = new global::Douyin.Image();
        }
        BackgroundImage.MergeFrom(other.BackgroundImage);
      }
      if (other.backgroundImageV2_ != null) {
        if (backgroundImageV2_ == null) {
          backgroundImageV2_ = new global::Douyin.Image();
        }
        BackgroundImageV2.MergeFrom(other.BackgroundImageV2);
      }
      if (other.anchorDisplayText_ != null) {
        if (anchorDisplayText_ == null) {
          anchorDisplayText_ = new global::Douyin.Text();
        }
        AnchorDisplayText.MergeFrom(other.AnchorDisplayText);
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
      if (other.UserEnterTipType != 0UL) {
        UserEnterTipType = other.UserEnterTipType;
      }
      if (other.AnchorEnterTipType != 0UL) {
        AnchorEnterTipType = other.AnchorEnterTipType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            MemberCount = input.ReadUInt64();
            break;
          }
          case 34: {
            if (operator_ == null) {
              operator_ = new global::Douyin.User();
            }
            input.ReadMessage(operator_);
            break;
          }
          case 40: {
            IsSetToAdmin = input.ReadBool();
            break;
          }
          case 48: {
            IsTopUser = input.ReadBool();
            break;
          }
          case 56: {
            RankScore = input.ReadUInt64();
            break;
          }
          case 64: {
            TopUserNo = input.ReadUInt64();
            break;
          }
          case 72: {
            EnterType = input.ReadUInt64();
            break;
          }
          case 80: {
            Action = input.ReadUInt64();
            break;
          }
          case 90: {
            ActionDescription = input.ReadString();
            break;
          }
          case 96: {
            UserId = input.ReadUInt64();
            break;
          }
          case 106: {
            if (effectConfig_ == null) {
              effectConfig_ = new global::Douyin.EffectConfig();
            }
            input.ReadMessage(effectConfig_);
            break;
          }
          case 114: {
            PopStr = input.ReadString();
            break;
          }
          case 122: {
            if (enterEffectConfig_ == null) {
              enterEffectConfig_ = new global::Douyin.EffectConfig();
            }
            input.ReadMessage(enterEffectConfig_);
            break;
          }
          case 130: {
            if (backgroundImage_ == null) {
              backgroundImage_ = new global::Douyin.Image();
            }
            input.ReadMessage(backgroundImage_);
            break;
          }
          case 138: {
            if (backgroundImageV2_ == null) {
              backgroundImageV2_ = new global::Douyin.Image();
            }
            input.ReadMessage(backgroundImageV2_);
            break;
          }
          case 146: {
            if (anchorDisplayText_ == null) {
              anchorDisplayText_ = new global::Douyin.Text();
            }
            input.ReadMessage(anchorDisplayText_);
            break;
          }
          case 154: {
            if (publicAreaCommon_ == null) {
              publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
            }
            input.ReadMessage(publicAreaCommon_);
            break;
          }
          case 160: {
            UserEnterTipType = input.ReadUInt64();
            break;
          }
          case 168: {
            AnchorEnterTipType = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicAreaCommon : pb::IMessage<PublicAreaCommon> {
    private static readonly pb::MessageParser<PublicAreaCommon> _parser = new pb::MessageParser<PublicAreaCommon>(() => new PublicAreaCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicAreaCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon(PublicAreaCommon other) : this() {
      UserLabel = other.userLabel_ != null ? other.UserLabel.Clone() : null;
      userConsumeInRoom_ = other.userConsumeInRoom_;
      userSendGiftCntInRoom_ = other.userSendGiftCntInRoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicAreaCommon Clone() {
      return new PublicAreaCommon(this);
    }

    /// <summary>Field number for the "userLabel" field.</summary>
    public const int UserLabelFieldNumber = 1;
    private global::Douyin.Image userLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image UserLabel {
      get { return userLabel_; }
      set {
        userLabel_ = value;
      }
    }

    /// <summary>Field number for the "userConsumeInRoom" field.</summary>
    public const int UserConsumeInRoomFieldNumber = 2;
    private ulong userConsumeInRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserConsumeInRoom {
      get { return userConsumeInRoom_; }
      set {
        userConsumeInRoom_ = value;
      }
    }

    /// <summary>Field number for the "userSendGiftCntInRoom" field.</summary>
    public const int UserSendGiftCntInRoomFieldNumber = 3;
    private ulong userSendGiftCntInRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserSendGiftCntInRoom {
      get { return userSendGiftCntInRoom_; }
      set {
        userSendGiftCntInRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicAreaCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicAreaCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserLabel, other.UserLabel)) return false;
      if (UserConsumeInRoom != other.UserConsumeInRoom) return false;
      if (UserSendGiftCntInRoom != other.UserSendGiftCntInRoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userLabel_ != null) hash ^= UserLabel.GetHashCode();
      if (UserConsumeInRoom != 0UL) hash ^= UserConsumeInRoom.GetHashCode();
      if (UserSendGiftCntInRoom != 0UL) hash ^= UserSendGiftCntInRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userLabel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserLabel);
      }
      if (UserConsumeInRoom != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserConsumeInRoom);
      }
      if (UserSendGiftCntInRoom != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserSendGiftCntInRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userLabel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLabel);
      }
      if (UserConsumeInRoom != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserConsumeInRoom);
      }
      if (UserSendGiftCntInRoom != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserSendGiftCntInRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicAreaCommon other) {
      if (other == null) {
        return;
      }
      if (other.userLabel_ != null) {
        if (userLabel_ == null) {
          userLabel_ = new global::Douyin.Image();
        }
        UserLabel.MergeFrom(other.UserLabel);
      }
      if (other.UserConsumeInRoom != 0UL) {
        UserConsumeInRoom = other.UserConsumeInRoom;
      }
      if (other.UserSendGiftCntInRoom != 0UL) {
        UserSendGiftCntInRoom = other.UserSendGiftCntInRoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userLabel_ == null) {
              userLabel_ = new global::Douyin.Image();
            }
            input.ReadMessage(userLabel_);
            break;
          }
          case 16: {
            UserConsumeInRoom = input.ReadUInt64();
            break;
          }
          case 24: {
            UserSendGiftCntInRoom = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectConfig : pb::IMessage<EffectConfig> {
    private static readonly pb::MessageParser<EffectConfig> _parser = new pb::MessageParser<EffectConfig>(() => new EffectConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig(EffectConfig other) : this() {
      type_ = other.type_;
      Icon = other.icon_ != null ? other.Icon.Clone() : null;
      avatarPos_ = other.avatarPos_;
      Text = other.text_ != null ? other.Text.Clone() : null;
      TextIcon = other.textIcon_ != null ? other.TextIcon.Clone() : null;
      stayTime_ = other.stayTime_;
      animAssetId_ = other.animAssetId_;
      Badge = other.badge_ != null ? other.Badge.Clone() : null;
      flexSettingArrayList_ = other.flexSettingArrayList_.Clone();
      TextIconOverlay = other.textIconOverlay_ != null ? other.TextIconOverlay.Clone() : null;
      AnimatedBadge = other.animatedBadge_ != null ? other.AnimatedBadge.Clone() : null;
      hasSweepLight_ = other.hasSweepLight_;
      textFlexSettingArrayList_ = other.textFlexSettingArrayList_.Clone();
      centerAnimAssetId_ = other.centerAnimAssetId_;
      DynamicImage = other.dynamicImage_ != null ? other.DynamicImage.Clone() : null;
      extraMap_ = other.extraMap_.Clone();
      mp4AnimAssetId_ = other.mp4AnimAssetId_;
      priority_ = other.priority_;
      maxWaitTime_ = other.maxWaitTime_;
      dressId_ = other.dressId_;
      alignment_ = other.alignment_;
      alignmentOffset_ = other.alignmentOffset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectConfig Clone() {
      return new EffectConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private ulong type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private global::Douyin.Image icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "avatarPos" field.</summary>
    public const int AvatarPosFieldNumber = 3;
    private ulong avatarPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AvatarPos {
      get { return avatarPos_; }
      set {
        avatarPos_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private global::Douyin.Text text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "textIcon" field.</summary>
    public const int TextIconFieldNumber = 5;
    private global::Douyin.Image textIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image TextIcon {
      get { return textIcon_; }
      set {
        textIcon_ = value;
      }
    }

    /// <summary>Field number for the "stayTime" field.</summary>
    public const int StayTimeFieldNumber = 6;
    private uint stayTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StayTime {
      get { return stayTime_; }
      set {
        stayTime_ = value;
      }
    }

    /// <summary>Field number for the "animAssetId" field.</summary>
    public const int AnimAssetIdFieldNumber = 7;
    private ulong animAssetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnimAssetId {
      get { return animAssetId_; }
      set {
        animAssetId_ = value;
      }
    }

    /// <summary>Field number for the "badge" field.</summary>
    public const int BadgeFieldNumber = 8;
    private global::Douyin.Image badge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Badge {
      get { return badge_; }
      set {
        badge_ = value;
      }
    }

    /// <summary>Field number for the "flexSettingArrayList" field.</summary>
    public const int FlexSettingArrayListFieldNumber = 9;
    private static readonly pb::FieldCodec<ulong> _repeated_flexSettingArrayList_codec
        = pb::FieldCodec.ForUInt64(74);
    private readonly pbc::RepeatedField<ulong> flexSettingArrayList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> FlexSettingArrayList {
      get { return flexSettingArrayList_; }
    }

    /// <summary>Field number for the "textIconOverlay" field.</summary>
    public const int TextIconOverlayFieldNumber = 10;
    private global::Douyin.Image textIconOverlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image TextIconOverlay {
      get { return textIconOverlay_; }
      set {
        textIconOverlay_ = value;
      }
    }

    /// <summary>Field number for the "animatedBadge" field.</summary>
    public const int AnimatedBadgeFieldNumber = 11;
    private global::Douyin.Image animatedBadge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image AnimatedBadge {
      get { return animatedBadge_; }
      set {
        animatedBadge_ = value;
      }
    }

    /// <summary>Field number for the "hasSweepLight" field.</summary>
    public const int HasSweepLightFieldNumber = 12;
    private bool hasSweepLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSweepLight {
      get { return hasSweepLight_; }
      set {
        hasSweepLight_ = value;
      }
    }

    /// <summary>Field number for the "textFlexSettingArrayList" field.</summary>
    public const int TextFlexSettingArrayListFieldNumber = 13;
    private static readonly pb::FieldCodec<ulong> _repeated_textFlexSettingArrayList_codec
        = pb::FieldCodec.ForUInt64(106);
    private readonly pbc::RepeatedField<ulong> textFlexSettingArrayList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> TextFlexSettingArrayList {
      get { return textFlexSettingArrayList_; }
    }

    /// <summary>Field number for the "centerAnimAssetId" field.</summary>
    public const int CenterAnimAssetIdFieldNumber = 14;
    private ulong centerAnimAssetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CenterAnimAssetId {
      get { return centerAnimAssetId_; }
      set {
        centerAnimAssetId_ = value;
      }
    }

    /// <summary>Field number for the "dynamicImage" field.</summary>
    public const int DynamicImageFieldNumber = 15;
    private global::Douyin.Image dynamicImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image DynamicImage {
      get { return dynamicImage_; }
      set {
        dynamicImage_ = value;
      }
    }

    /// <summary>Field number for the "extraMap" field.</summary>
    public const int ExtraMapFieldNumber = 16;
    private static readonly pbc::MapField<string, string>.Codec _map_extraMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 130);
    private readonly pbc::MapField<string, string> extraMap_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ExtraMap {
      get { return extraMap_; }
    }

    /// <summary>Field number for the "mp4AnimAssetId" field.</summary>
    public const int Mp4AnimAssetIdFieldNumber = 17;
    private ulong mp4AnimAssetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Mp4AnimAssetId {
      get { return mp4AnimAssetId_; }
      set {
        mp4AnimAssetId_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 18;
    private ulong priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "maxWaitTime" field.</summary>
    public const int MaxWaitTimeFieldNumber = 19;
    private ulong maxWaitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxWaitTime {
      get { return maxWaitTime_; }
      set {
        maxWaitTime_ = value;
      }
    }

    /// <summary>Field number for the "dressId" field.</summary>
    public const int DressIdFieldNumber = 20;
    private string dressId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DressId {
      get { return dressId_; }
      set {
        dressId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alignment" field.</summary>
    public const int AlignmentFieldNumber = 21;
    private ulong alignment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Alignment {
      get { return alignment_; }
      set {
        alignment_ = value;
      }
    }

    /// <summary>Field number for the "alignmentOffset" field.</summary>
    public const int AlignmentOffsetFieldNumber = 22;
    private ulong alignmentOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AlignmentOffset {
      get { return alignmentOffset_; }
      set {
        alignmentOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Icon, other.Icon)) return false;
      if (AvatarPos != other.AvatarPos) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(TextIcon, other.TextIcon)) return false;
      if (StayTime != other.StayTime) return false;
      if (AnimAssetId != other.AnimAssetId) return false;
      if (!object.Equals(Badge, other.Badge)) return false;
      if(!flexSettingArrayList_.Equals(other.flexSettingArrayList_)) return false;
      if (!object.Equals(TextIconOverlay, other.TextIconOverlay)) return false;
      if (!object.Equals(AnimatedBadge, other.AnimatedBadge)) return false;
      if (HasSweepLight != other.HasSweepLight) return false;
      if(!textFlexSettingArrayList_.Equals(other.textFlexSettingArrayList_)) return false;
      if (CenterAnimAssetId != other.CenterAnimAssetId) return false;
      if (!object.Equals(DynamicImage, other.DynamicImage)) return false;
      if (!ExtraMap.Equals(other.ExtraMap)) return false;
      if (Mp4AnimAssetId != other.Mp4AnimAssetId) return false;
      if (Priority != other.Priority) return false;
      if (MaxWaitTime != other.MaxWaitTime) return false;
      if (DressId != other.DressId) return false;
      if (Alignment != other.Alignment) return false;
      if (AlignmentOffset != other.AlignmentOffset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0UL) hash ^= Type.GetHashCode();
      if (icon_ != null) hash ^= Icon.GetHashCode();
      if (AvatarPos != 0UL) hash ^= AvatarPos.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (textIcon_ != null) hash ^= TextIcon.GetHashCode();
      if (StayTime != 0) hash ^= StayTime.GetHashCode();
      if (AnimAssetId != 0UL) hash ^= AnimAssetId.GetHashCode();
      if (badge_ != null) hash ^= Badge.GetHashCode();
      hash ^= flexSettingArrayList_.GetHashCode();
      if (textIconOverlay_ != null) hash ^= TextIconOverlay.GetHashCode();
      if (animatedBadge_ != null) hash ^= AnimatedBadge.GetHashCode();
      if (HasSweepLight != false) hash ^= HasSweepLight.GetHashCode();
      hash ^= textFlexSettingArrayList_.GetHashCode();
      if (CenterAnimAssetId != 0UL) hash ^= CenterAnimAssetId.GetHashCode();
      if (dynamicImage_ != null) hash ^= DynamicImage.GetHashCode();
      hash ^= ExtraMap.GetHashCode();
      if (Mp4AnimAssetId != 0UL) hash ^= Mp4AnimAssetId.GetHashCode();
      if (Priority != 0UL) hash ^= Priority.GetHashCode();
      if (MaxWaitTime != 0UL) hash ^= MaxWaitTime.GetHashCode();
      if (DressId.Length != 0) hash ^= DressId.GetHashCode();
      if (Alignment != 0UL) hash ^= Alignment.GetHashCode();
      if (AlignmentOffset != 0UL) hash ^= AlignmentOffset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Type);
      }
      if (icon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Icon);
      }
      if (AvatarPos != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AvatarPos);
      }
      if (text_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Text);
      }
      if (textIcon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TextIcon);
      }
      if (StayTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(StayTime);
      }
      if (AnimAssetId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AnimAssetId);
      }
      if (badge_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Badge);
      }
      flexSettingArrayList_.WriteTo(output, _repeated_flexSettingArrayList_codec);
      if (textIconOverlay_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TextIconOverlay);
      }
      if (animatedBadge_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AnimatedBadge);
      }
      if (HasSweepLight != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasSweepLight);
      }
      textFlexSettingArrayList_.WriteTo(output, _repeated_textFlexSettingArrayList_codec);
      if (CenterAnimAssetId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(CenterAnimAssetId);
      }
      if (dynamicImage_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DynamicImage);
      }
      extraMap_.WriteTo(output, _map_extraMap_codec);
      if (Mp4AnimAssetId != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(Mp4AnimAssetId);
      }
      if (Priority != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(Priority);
      }
      if (MaxWaitTime != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(MaxWaitTime);
      }
      if (DressId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(DressId);
      }
      if (Alignment != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(Alignment);
      }
      if (AlignmentOffset != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(AlignmentOffset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Type);
      }
      if (icon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Icon);
      }
      if (AvatarPos != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvatarPos);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (textIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextIcon);
      }
      if (StayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StayTime);
      }
      if (AnimAssetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AnimAssetId);
      }
      if (badge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Badge);
      }
      size += flexSettingArrayList_.CalculateSize(_repeated_flexSettingArrayList_codec);
      if (textIconOverlay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextIconOverlay);
      }
      if (animatedBadge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnimatedBadge);
      }
      if (HasSweepLight != false) {
        size += 1 + 1;
      }
      size += textFlexSettingArrayList_.CalculateSize(_repeated_textFlexSettingArrayList_codec);
      if (CenterAnimAssetId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CenterAnimAssetId);
      }
      if (dynamicImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicImage);
      }
      size += extraMap_.CalculateSize(_map_extraMap_codec);
      if (Mp4AnimAssetId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Mp4AnimAssetId);
      }
      if (Priority != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Priority);
      }
      if (MaxWaitTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(MaxWaitTime);
      }
      if (DressId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DressId);
      }
      if (Alignment != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Alignment);
      }
      if (AlignmentOffset != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AlignmentOffset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0UL) {
        Type = other.Type;
      }
      if (other.icon_ != null) {
        if (icon_ == null) {
          icon_ = new global::Douyin.Image();
        }
        Icon.MergeFrom(other.Icon);
      }
      if (other.AvatarPos != 0UL) {
        AvatarPos = other.AvatarPos;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::Douyin.Text();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.textIcon_ != null) {
        if (textIcon_ == null) {
          textIcon_ = new global::Douyin.Image();
        }
        TextIcon.MergeFrom(other.TextIcon);
      }
      if (other.StayTime != 0) {
        StayTime = other.StayTime;
      }
      if (other.AnimAssetId != 0UL) {
        AnimAssetId = other.AnimAssetId;
      }
      if (other.badge_ != null) {
        if (badge_ == null) {
          badge_ = new global::Douyin.Image();
        }
        Badge.MergeFrom(other.Badge);
      }
      flexSettingArrayList_.Add(other.flexSettingArrayList_);
      if (other.textIconOverlay_ != null) {
        if (textIconOverlay_ == null) {
          textIconOverlay_ = new global::Douyin.Image();
        }
        TextIconOverlay.MergeFrom(other.TextIconOverlay);
      }
      if (other.animatedBadge_ != null) {
        if (animatedBadge_ == null) {
          animatedBadge_ = new global::Douyin.Image();
        }
        AnimatedBadge.MergeFrom(other.AnimatedBadge);
      }
      if (other.HasSweepLight != false) {
        HasSweepLight = other.HasSweepLight;
      }
      textFlexSettingArrayList_.Add(other.textFlexSettingArrayList_);
      if (other.CenterAnimAssetId != 0UL) {
        CenterAnimAssetId = other.CenterAnimAssetId;
      }
      if (other.dynamicImage_ != null) {
        if (dynamicImage_ == null) {
          dynamicImage_ = new global::Douyin.Image();
        }
        DynamicImage.MergeFrom(other.DynamicImage);
      }
      extraMap_.Add(other.extraMap_);
      if (other.Mp4AnimAssetId != 0UL) {
        Mp4AnimAssetId = other.Mp4AnimAssetId;
      }
      if (other.Priority != 0UL) {
        Priority = other.Priority;
      }
      if (other.MaxWaitTime != 0UL) {
        MaxWaitTime = other.MaxWaitTime;
      }
      if (other.DressId.Length != 0) {
        DressId = other.DressId;
      }
      if (other.Alignment != 0UL) {
        Alignment = other.Alignment;
      }
      if (other.AlignmentOffset != 0UL) {
        AlignmentOffset = other.AlignmentOffset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt64();
            break;
          }
          case 18: {
            if (icon_ == null) {
              icon_ = new global::Douyin.Image();
            }
            input.ReadMessage(icon_);
            break;
          }
          case 24: {
            AvatarPos = input.ReadUInt64();
            break;
          }
          case 34: {
            if (text_ == null) {
              text_ = new global::Douyin.Text();
            }
            input.ReadMessage(text_);
            break;
          }
          case 42: {
            if (textIcon_ == null) {
              textIcon_ = new global::Douyin.Image();
            }
            input.ReadMessage(textIcon_);
            break;
          }
          case 48: {
            StayTime = input.ReadUInt32();
            break;
          }
          case 56: {
            AnimAssetId = input.ReadUInt64();
            break;
          }
          case 66: {
            if (badge_ == null) {
              badge_ = new global::Douyin.Image();
            }
            input.ReadMessage(badge_);
            break;
          }
          case 74:
          case 72: {
            flexSettingArrayList_.AddEntriesFrom(input, _repeated_flexSettingArrayList_codec);
            break;
          }
          case 82: {
            if (textIconOverlay_ == null) {
              textIconOverlay_ = new global::Douyin.Image();
            }
            input.ReadMessage(textIconOverlay_);
            break;
          }
          case 90: {
            if (animatedBadge_ == null) {
              animatedBadge_ = new global::Douyin.Image();
            }
            input.ReadMessage(animatedBadge_);
            break;
          }
          case 96: {
            HasSweepLight = input.ReadBool();
            break;
          }
          case 106:
          case 104: {
            textFlexSettingArrayList_.AddEntriesFrom(input, _repeated_textFlexSettingArrayList_codec);
            break;
          }
          case 112: {
            CenterAnimAssetId = input.ReadUInt64();
            break;
          }
          case 122: {
            if (dynamicImage_ == null) {
              dynamicImage_ = new global::Douyin.Image();
            }
            input.ReadMessage(dynamicImage_);
            break;
          }
          case 130: {
            extraMap_.AddEntriesFrom(input, _map_extraMap_codec);
            break;
          }
          case 136: {
            Mp4AnimAssetId = input.ReadUInt64();
            break;
          }
          case 144: {
            Priority = input.ReadUInt64();
            break;
          }
          case 152: {
            MaxWaitTime = input.ReadUInt64();
            break;
          }
          case 162: {
            DressId = input.ReadString();
            break;
          }
          case 168: {
            Alignment = input.ReadUInt64();
            break;
          }
          case 176: {
            AlignmentOffset = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      key_ = other.key_;
      defaultPatter_ = other.defaultPatter_;
      DefaultFormat = other.defaultFormat_ != null ? other.DefaultFormat.Clone() : null;
      piecesList_ = other.piecesList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultPatter" field.</summary>
    public const int DefaultPatterFieldNumber = 2;
    private string defaultPatter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultPatter {
      get { return defaultPatter_; }
      set {
        defaultPatter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultFormat" field.</summary>
    public const int DefaultFormatFieldNumber = 3;
    private global::Douyin.TextFormat defaultFormat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextFormat DefaultFormat {
      get { return defaultFormat_; }
      set {
        defaultFormat_ = value;
      }
    }

    /// <summary>Field number for the "piecesList" field.</summary>
    public const int PiecesListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Douyin.TextPiece> _repeated_piecesList_codec
        = pb::FieldCodec.ForMessage(34, global::Douyin.TextPiece.Parser);
    private readonly pbc::RepeatedField<global::Douyin.TextPiece> piecesList_ = new pbc::RepeatedField<global::Douyin.TextPiece>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.TextPiece> PiecesList {
      get { return piecesList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (DefaultPatter != other.DefaultPatter) return false;
      if (!object.Equals(DefaultFormat, other.DefaultFormat)) return false;
      if(!piecesList_.Equals(other.piecesList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (DefaultPatter.Length != 0) hash ^= DefaultPatter.GetHashCode();
      if (defaultFormat_ != null) hash ^= DefaultFormat.GetHashCode();
      hash ^= piecesList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (DefaultPatter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultPatter);
      }
      if (defaultFormat_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultFormat);
      }
      piecesList_.WriteTo(output, _repeated_piecesList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (DefaultPatter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultPatter);
      }
      if (defaultFormat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultFormat);
      }
      size += piecesList_.CalculateSize(_repeated_piecesList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.DefaultPatter.Length != 0) {
        DefaultPatter = other.DefaultPatter;
      }
      if (other.defaultFormat_ != null) {
        if (defaultFormat_ == null) {
          defaultFormat_ = new global::Douyin.TextFormat();
        }
        DefaultFormat.MergeFrom(other.DefaultFormat);
      }
      piecesList_.Add(other.piecesList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            DefaultPatter = input.ReadString();
            break;
          }
          case 26: {
            if (defaultFormat_ == null) {
              defaultFormat_ = new global::Douyin.TextFormat();
            }
            input.ReadMessage(defaultFormat_);
            break;
          }
          case 34: {
            piecesList_.AddEntriesFrom(input, _repeated_piecesList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPiece : pb::IMessage<TextPiece> {
    private static readonly pb::MessageParser<TextPiece> _parser = new pb::MessageParser<TextPiece>(() => new TextPiece());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPiece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece(TextPiece other) : this() {
      type_ = other.type_;
      Format = other.format_ != null ? other.Format.Clone() : null;
      stringValue_ = other.stringValue_;
      UserValue = other.userValue_ != null ? other.UserValue.Clone() : null;
      GiftValue = other.giftValue_ != null ? other.GiftValue.Clone() : null;
      HeartValue = other.heartValue_ != null ? other.HeartValue.Clone() : null;
      PatternRefValue = other.patternRefValue_ != null ? other.PatternRefValue.Clone() : null;
      ImageValue = other.imageValue_ != null ? other.ImageValue.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiece Clone() {
      return new TextPiece(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private bool type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::Douyin.TextFormat format_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 3;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userValue" field.</summary>
    public const int UserValueFieldNumber = 4;
    private global::Douyin.TextPieceUser userValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextPieceUser UserValue {
      get { return userValue_; }
      set {
        userValue_ = value;
      }
    }

    /// <summary>Field number for the "giftValue" field.</summary>
    public const int GiftValueFieldNumber = 5;
    private global::Douyin.TextPieceGift giftValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextPieceGift GiftValue {
      get { return giftValue_; }
      set {
        giftValue_ = value;
      }
    }

    /// <summary>Field number for the "heartValue" field.</summary>
    public const int HeartValueFieldNumber = 6;
    private global::Douyin.TextPieceHeart heartValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextPieceHeart HeartValue {
      get { return heartValue_; }
      set {
        heartValue_ = value;
      }
    }

    /// <summary>Field number for the "patternRefValue" field.</summary>
    public const int PatternRefValueFieldNumber = 7;
    private global::Douyin.TextPiecePatternRef patternRefValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextPiecePatternRef PatternRefValue {
      get { return patternRefValue_; }
      set {
        patternRefValue_ = value;
      }
    }

    /// <summary>Field number for the "imageValue" field.</summary>
    public const int ImageValueFieldNumber = 8;
    private global::Douyin.TextPieceImage imageValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.TextPieceImage ImageValue {
      get { return imageValue_; }
      set {
        imageValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPiece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPiece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Format, other.Format)) return false;
      if (StringValue != other.StringValue) return false;
      if (!object.Equals(UserValue, other.UserValue)) return false;
      if (!object.Equals(GiftValue, other.GiftValue)) return false;
      if (!object.Equals(HeartValue, other.HeartValue)) return false;
      if (!object.Equals(PatternRefValue, other.PatternRefValue)) return false;
      if (!object.Equals(ImageValue, other.ImageValue)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != false) hash ^= Type.GetHashCode();
      if (format_ != null) hash ^= Format.GetHashCode();
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (userValue_ != null) hash ^= UserValue.GetHashCode();
      if (giftValue_ != null) hash ^= GiftValue.GetHashCode();
      if (heartValue_ != null) hash ^= HeartValue.GetHashCode();
      if (patternRefValue_ != null) hash ^= PatternRefValue.GetHashCode();
      if (imageValue_ != null) hash ^= ImageValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != false) {
        output.WriteRawTag(8);
        output.WriteBool(Type);
      }
      if (format_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Format);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StringValue);
      }
      if (userValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserValue);
      }
      if (giftValue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GiftValue);
      }
      if (heartValue_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(HeartValue);
      }
      if (patternRefValue_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PatternRefValue);
      }
      if (imageValue_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ImageValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != false) {
        size += 1 + 1;
      }
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (userValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserValue);
      }
      if (giftValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftValue);
      }
      if (heartValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeartValue);
      }
      if (patternRefValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PatternRefValue);
      }
      if (imageValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPiece other) {
      if (other == null) {
        return;
      }
      if (other.Type != false) {
        Type = other.Type;
      }
      if (other.format_ != null) {
        if (format_ == null) {
          format_ = new global::Douyin.TextFormat();
        }
        Format.MergeFrom(other.Format);
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.userValue_ != null) {
        if (userValue_ == null) {
          userValue_ = new global::Douyin.TextPieceUser();
        }
        UserValue.MergeFrom(other.UserValue);
      }
      if (other.giftValue_ != null) {
        if (giftValue_ == null) {
          giftValue_ = new global::Douyin.TextPieceGift();
        }
        GiftValue.MergeFrom(other.GiftValue);
      }
      if (other.heartValue_ != null) {
        if (heartValue_ == null) {
          heartValue_ = new global::Douyin.TextPieceHeart();
        }
        HeartValue.MergeFrom(other.HeartValue);
      }
      if (other.patternRefValue_ != null) {
        if (patternRefValue_ == null) {
          patternRefValue_ = new global::Douyin.TextPiecePatternRef();
        }
        PatternRefValue.MergeFrom(other.PatternRefValue);
      }
      if (other.imageValue_ != null) {
        if (imageValue_ == null) {
          imageValue_ = new global::Douyin.TextPieceImage();
        }
        ImageValue.MergeFrom(other.ImageValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadBool();
            break;
          }
          case 18: {
            if (format_ == null) {
              format_ = new global::Douyin.TextFormat();
            }
            input.ReadMessage(format_);
            break;
          }
          case 26: {
            StringValue = input.ReadString();
            break;
          }
          case 34: {
            if (userValue_ == null) {
              userValue_ = new global::Douyin.TextPieceUser();
            }
            input.ReadMessage(userValue_);
            break;
          }
          case 42: {
            if (giftValue_ == null) {
              giftValue_ = new global::Douyin.TextPieceGift();
            }
            input.ReadMessage(giftValue_);
            break;
          }
          case 50: {
            if (heartValue_ == null) {
              heartValue_ = new global::Douyin.TextPieceHeart();
            }
            input.ReadMessage(heartValue_);
            break;
          }
          case 58: {
            if (patternRefValue_ == null) {
              patternRefValue_ = new global::Douyin.TextPiecePatternRef();
            }
            input.ReadMessage(patternRefValue_);
            break;
          }
          case 66: {
            if (imageValue_ == null) {
              imageValue_ = new global::Douyin.TextPieceImage();
            }
            input.ReadMessage(imageValue_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPieceImage : pb::IMessage<TextPieceImage> {
    private static readonly pb::MessageParser<TextPieceImage> _parser = new pb::MessageParser<TextPieceImage>(() => new TextPieceImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPieceImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceImage(TextPieceImage other) : this() {
      Image = other.image_ != null ? other.Image.Clone() : null;
      scalingRate_ = other.scalingRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceImage Clone() {
      return new TextPieceImage(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Douyin.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "scalingRate" field.</summary>
    public const int ScalingRateFieldNumber = 2;
    private float scalingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScalingRate {
      get { return scalingRate_; }
      set {
        scalingRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPieceImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPieceImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (ScalingRate != other.ScalingRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (ScalingRate != 0F) hash ^= ScalingRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (ScalingRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ScalingRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (ScalingRate != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPieceImage other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Douyin.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.ScalingRate != 0F) {
        ScalingRate = other.ScalingRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (image_ == null) {
              image_ = new global::Douyin.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 21: {
            ScalingRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPiecePatternRef : pb::IMessage<TextPiecePatternRef> {
    private static readonly pb::MessageParser<TextPiecePatternRef> _parser = new pb::MessageParser<TextPiecePatternRef>(() => new TextPiecePatternRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPiecePatternRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiecePatternRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiecePatternRef(TextPiecePatternRef other) : this() {
      key_ = other.key_;
      defaultPattern_ = other.defaultPattern_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPiecePatternRef Clone() {
      return new TextPiecePatternRef(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultPattern" field.</summary>
    public const int DefaultPatternFieldNumber = 2;
    private string defaultPattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultPattern {
      get { return defaultPattern_; }
      set {
        defaultPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPiecePatternRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPiecePatternRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (DefaultPattern != other.DefaultPattern) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (DefaultPattern.Length != 0) hash ^= DefaultPattern.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (DefaultPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultPattern);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (DefaultPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultPattern);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPiecePatternRef other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.DefaultPattern.Length != 0) {
        DefaultPattern = other.DefaultPattern;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            DefaultPattern = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPieceHeart : pb::IMessage<TextPieceHeart> {
    private static readonly pb::MessageParser<TextPieceHeart> _parser = new pb::MessageParser<TextPieceHeart>(() => new TextPieceHeart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPieceHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceHeart(TextPieceHeart other) : this() {
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceHeart Clone() {
      return new TextPieceHeart(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPieceHeart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPieceHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPieceHeart other) {
      if (other == null) {
        return;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPieceGift : pb::IMessage<TextPieceGift> {
    private static readonly pb::MessageParser<TextPieceGift> _parser = new pb::MessageParser<TextPieceGift>(() => new TextPieceGift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPieceGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceGift(TextPieceGift other) : this() {
      giftId_ = other.giftId_;
      NameRef = other.nameRef_ != null ? other.NameRef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceGift Clone() {
      return new TextPieceGift(this);
    }

    /// <summary>Field number for the "giftId" field.</summary>
    public const int GiftIdFieldNumber = 1;
    private ulong giftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GiftId {
      get { return giftId_; }
      set {
        giftId_ = value;
      }
    }

    /// <summary>Field number for the "nameRef" field.</summary>
    public const int NameRefFieldNumber = 2;
    private global::Douyin.PatternRef nameRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PatternRef NameRef {
      get { return nameRef_; }
      set {
        nameRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPieceGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPieceGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GiftId != other.GiftId) return false;
      if (!object.Equals(NameRef, other.NameRef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GiftId != 0UL) hash ^= GiftId.GetHashCode();
      if (nameRef_ != null) hash ^= NameRef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GiftId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GiftId);
      }
      if (nameRef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NameRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GiftId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GiftId);
      }
      if (nameRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NameRef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPieceGift other) {
      if (other == null) {
        return;
      }
      if (other.GiftId != 0UL) {
        GiftId = other.GiftId;
      }
      if (other.nameRef_ != null) {
        if (nameRef_ == null) {
          nameRef_ = new global::Douyin.PatternRef();
        }
        NameRef.MergeFrom(other.NameRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GiftId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (nameRef_ == null) {
              nameRef_ = new global::Douyin.PatternRef();
            }
            input.ReadMessage(nameRef_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatternRef : pb::IMessage<PatternRef> {
    private static readonly pb::MessageParser<PatternRef> _parser = new pb::MessageParser<PatternRef>(() => new PatternRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatternRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternRef(PatternRef other) : this() {
      key_ = other.key_;
      defaultPattern_ = other.defaultPattern_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternRef Clone() {
      return new PatternRef(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultPattern" field.</summary>
    public const int DefaultPatternFieldNumber = 2;
    private string defaultPattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultPattern {
      get { return defaultPattern_; }
      set {
        defaultPattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatternRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatternRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (DefaultPattern != other.DefaultPattern) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (DefaultPattern.Length != 0) hash ^= DefaultPattern.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (DefaultPattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DefaultPattern);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (DefaultPattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultPattern);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatternRef other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.DefaultPattern.Length != 0) {
        DefaultPattern = other.DefaultPattern;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            DefaultPattern = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextPieceUser : pb::IMessage<TextPieceUser> {
    private static readonly pb::MessageParser<TextPieceUser> _parser = new pb::MessageParser<TextPieceUser>(() => new TextPieceUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextPieceUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser(TextPieceUser other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      withColon_ = other.withColon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextPieceUser Clone() {
      return new TextPieceUser(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "withColon" field.</summary>
    public const int WithColonFieldNumber = 2;
    private bool withColon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithColon {
      get { return withColon_; }
      set {
        withColon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextPieceUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextPieceUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (WithColon != other.WithColon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (WithColon != false) hash ^= WithColon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (WithColon != false) {
        output.WriteRawTag(16);
        output.WriteBool(WithColon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (WithColon != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextPieceUser other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.WithColon != false) {
        WithColon = other.WithColon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 16: {
            WithColon = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextFormat : pb::IMessage<TextFormat> {
    private static readonly pb::MessageParser<TextFormat> _parser = new pb::MessageParser<TextFormat>(() => new TextFormat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat(TextFormat other) : this() {
      color_ = other.color_;
      bold_ = other.bold_;
      italic_ = other.italic_;
      weight_ = other.weight_;
      italicAngle_ = other.italicAngle_;
      fontSize_ = other.fontSize_;
      useHeighLightColor_ = other.useHeighLightColor_;
      useRemoteClor_ = other.useRemoteClor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextFormat Clone() {
      return new TextFormat(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bold" field.</summary>
    public const int BoldFieldNumber = 2;
    private bool bold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bold {
      get { return bold_; }
      set {
        bold_ = value;
      }
    }

    /// <summary>Field number for the "italic" field.</summary>
    public const int ItalicFieldNumber = 3;
    private bool italic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Italic {
      get { return italic_; }
      set {
        italic_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private uint weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "italicAngle" field.</summary>
    public const int ItalicAngleFieldNumber = 5;
    private uint italicAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItalicAngle {
      get { return italicAngle_; }
      set {
        italicAngle_ = value;
      }
    }

    /// <summary>Field number for the "fontSize" field.</summary>
    public const int FontSizeFieldNumber = 6;
    private uint fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "useHeighLightColor" field.</summary>
    public const int UseHeighLightColorFieldNumber = 7;
    private bool useHeighLightColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseHeighLightColor {
      get { return useHeighLightColor_; }
      set {
        useHeighLightColor_ = value;
      }
    }

    /// <summary>Field number for the "useRemoteClor" field.</summary>
    public const int UseRemoteClorFieldNumber = 8;
    private bool useRemoteClor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRemoteClor {
      get { return useRemoteClor_; }
      set {
        useRemoteClor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Bold != other.Bold) return false;
      if (Italic != other.Italic) return false;
      if (Weight != other.Weight) return false;
      if (ItalicAngle != other.ItalicAngle) return false;
      if (FontSize != other.FontSize) return false;
      if (UseHeighLightColor != other.UseHeighLightColor) return false;
      if (UseRemoteClor != other.UseRemoteClor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (Bold != false) hash ^= Bold.GetHashCode();
      if (Italic != false) hash ^= Italic.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (ItalicAngle != 0) hash ^= ItalicAngle.GetHashCode();
      if (FontSize != 0) hash ^= FontSize.GetHashCode();
      if (UseHeighLightColor != false) hash ^= UseHeighLightColor.GetHashCode();
      if (UseRemoteClor != false) hash ^= UseRemoteClor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Color);
      }
      if (Bold != false) {
        output.WriteRawTag(16);
        output.WriteBool(Bold);
      }
      if (Italic != false) {
        output.WriteRawTag(24);
        output.WriteBool(Italic);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Weight);
      }
      if (ItalicAngle != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ItalicAngle);
      }
      if (FontSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(FontSize);
      }
      if (UseHeighLightColor != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseHeighLightColor);
      }
      if (UseRemoteClor != false) {
        output.WriteRawTag(64);
        output.WriteBool(UseRemoteClor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (Bold != false) {
        size += 1 + 1;
      }
      if (Italic != false) {
        size += 1 + 1;
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (ItalicAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItalicAngle);
      }
      if (FontSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontSize);
      }
      if (UseHeighLightColor != false) {
        size += 1 + 1;
      }
      if (UseRemoteClor != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextFormat other) {
      if (other == null) {
        return;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.Bold != false) {
        Bold = other.Bold;
      }
      if (other.Italic != false) {
        Italic = other.Italic;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.ItalicAngle != 0) {
        ItalicAngle = other.ItalicAngle;
      }
      if (other.FontSize != 0) {
        FontSize = other.FontSize;
      }
      if (other.UseHeighLightColor != false) {
        UseHeighLightColor = other.UseHeighLightColor;
      }
      if (other.UseRemoteClor != false) {
        UseRemoteClor = other.UseRemoteClor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Color = input.ReadString();
            break;
          }
          case 16: {
            Bold = input.ReadBool();
            break;
          }
          case 24: {
            Italic = input.ReadBool();
            break;
          }
          case 32: {
            Weight = input.ReadUInt32();
            break;
          }
          case 40: {
            ItalicAngle = input.ReadUInt32();
            break;
          }
          case 48: {
            FontSize = input.ReadUInt32();
            break;
          }
          case 56: {
            UseHeighLightColor = input.ReadBool();
            break;
          }
          case 64: {
            UseRemoteClor = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 点赞
  /// </summary>
  public sealed partial class LikeMessage : pb::IMessage<LikeMessage> {
    private static readonly pb::MessageParser<LikeMessage> _parser = new pb::MessageParser<LikeMessage>(() => new LikeMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LikeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage(LikeMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      count_ = other.count_;
      total_ = other.total_;
      color_ = other.color_;
      User = other.user_ != null ? other.User.Clone() : null;
      icon_ = other.icon_;
      DoubleLikeDetail = other.doubleLikeDetail_ != null ? other.DoubleLikeDetail.Clone() : null;
      DisplayControlInfo = other.displayControlInfo_ != null ? other.DisplayControlInfo.Clone() : null;
      linkmicGuestUid_ = other.linkmicGuestUid_;
      scene_ = other.scene_;
      PicoDisplayInfo = other.picoDisplayInfo_ != null ? other.PicoDisplayInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LikeMessage Clone() {
      return new LikeMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private ulong count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private ulong total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private ulong color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 5;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doubleLikeDetail" field.</summary>
    public const int DoubleLikeDetailFieldNumber = 7;
    private global::Douyin.DoubleLikeDetail doubleLikeDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.DoubleLikeDetail DoubleLikeDetail {
      get { return doubleLikeDetail_; }
      set {
        doubleLikeDetail_ = value;
      }
    }

    /// <summary>Field number for the "displayControlInfo" field.</summary>
    public const int DisplayControlInfoFieldNumber = 8;
    private global::Douyin.DisplayControlInfo displayControlInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.DisplayControlInfo DisplayControlInfo {
      get { return displayControlInfo_; }
      set {
        displayControlInfo_ = value;
      }
    }

    /// <summary>Field number for the "linkmicGuestUid" field.</summary>
    public const int LinkmicGuestUidFieldNumber = 9;
    private ulong linkmicGuestUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LinkmicGuestUid {
      get { return linkmicGuestUid_; }
      set {
        linkmicGuestUid_ = value;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 10;
    private string scene_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scene {
      get { return scene_; }
      set {
        scene_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "picoDisplayInfo" field.</summary>
    public const int PicoDisplayInfoFieldNumber = 11;
    private global::Douyin.PicoDisplayInfo picoDisplayInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PicoDisplayInfo PicoDisplayInfo {
      get { return picoDisplayInfo_; }
      set {
        picoDisplayInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LikeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LikeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (Count != other.Count) return false;
      if (Total != other.Total) return false;
      if (Color != other.Color) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Icon != other.Icon) return false;
      if (!object.Equals(DoubleLikeDetail, other.DoubleLikeDetail)) return false;
      if (!object.Equals(DisplayControlInfo, other.DisplayControlInfo)) return false;
      if (LinkmicGuestUid != other.LinkmicGuestUid) return false;
      if (Scene != other.Scene) return false;
      if (!object.Equals(PicoDisplayInfo, other.PicoDisplayInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (Total != 0UL) hash ^= Total.GetHashCode();
      if (Color != 0UL) hash ^= Color.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (doubleLikeDetail_ != null) hash ^= DoubleLikeDetail.GetHashCode();
      if (displayControlInfo_ != null) hash ^= DisplayControlInfo.GetHashCode();
      if (LinkmicGuestUid != 0UL) hash ^= LinkmicGuestUid.GetHashCode();
      if (Scene.Length != 0) hash ^= Scene.GetHashCode();
      if (picoDisplayInfo_ != null) hash ^= PicoDisplayInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (Count != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Count);
      }
      if (Total != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Total);
      }
      if (Color != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Color);
      }
      if (user_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(User);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (doubleLikeDetail_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DoubleLikeDetail);
      }
      if (displayControlInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DisplayControlInfo);
      }
      if (LinkmicGuestUid != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(LinkmicGuestUid);
      }
      if (Scene.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Scene);
      }
      if (picoDisplayInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PicoDisplayInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      if (Color != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Color);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (doubleLikeDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleLikeDetail);
      }
      if (displayControlInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayControlInfo);
      }
      if (LinkmicGuestUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LinkmicGuestUid);
      }
      if (Scene.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scene);
      }
      if (picoDisplayInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PicoDisplayInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LikeMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      if (other.Total != 0UL) {
        Total = other.Total;
      }
      if (other.Color != 0UL) {
        Color = other.Color;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.doubleLikeDetail_ != null) {
        if (doubleLikeDetail_ == null) {
          doubleLikeDetail_ = new global::Douyin.DoubleLikeDetail();
        }
        DoubleLikeDetail.MergeFrom(other.DoubleLikeDetail);
      }
      if (other.displayControlInfo_ != null) {
        if (displayControlInfo_ == null) {
          displayControlInfo_ = new global::Douyin.DisplayControlInfo();
        }
        DisplayControlInfo.MergeFrom(other.DisplayControlInfo);
      }
      if (other.LinkmicGuestUid != 0UL) {
        LinkmicGuestUid = other.LinkmicGuestUid;
      }
      if (other.Scene.Length != 0) {
        Scene = other.Scene;
      }
      if (other.picoDisplayInfo_ != null) {
        if (picoDisplayInfo_ == null) {
          picoDisplayInfo_ = new global::Douyin.PicoDisplayInfo();
        }
        PicoDisplayInfo.MergeFrom(other.PicoDisplayInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 16: {
            Count = input.ReadUInt64();
            break;
          }
          case 24: {
            Total = input.ReadUInt64();
            break;
          }
          case 32: {
            Color = input.ReadUInt64();
            break;
          }
          case 42: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
          case 58: {
            if (doubleLikeDetail_ == null) {
              doubleLikeDetail_ = new global::Douyin.DoubleLikeDetail();
            }
            input.ReadMessage(doubleLikeDetail_);
            break;
          }
          case 66: {
            if (displayControlInfo_ == null) {
              displayControlInfo_ = new global::Douyin.DisplayControlInfo();
            }
            input.ReadMessage(displayControlInfo_);
            break;
          }
          case 72: {
            LinkmicGuestUid = input.ReadUInt64();
            break;
          }
          case 82: {
            Scene = input.ReadString();
            break;
          }
          case 90: {
            if (picoDisplayInfo_ == null) {
              picoDisplayInfo_ = new global::Douyin.PicoDisplayInfo();
            }
            input.ReadMessage(picoDisplayInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SocialMessage : pb::IMessage<SocialMessage> {
    private static readonly pb::MessageParser<SocialMessage> _parser = new pb::MessageParser<SocialMessage>(() => new SocialMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocialMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage(SocialMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      shareType_ = other.shareType_;
      action_ = other.action_;
      shareTarget_ = other.shareTarget_;
      followCount_ = other.followCount_;
      PublicAreaCommon = other.publicAreaCommon_ != null ? other.PublicAreaCommon.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocialMessage Clone() {
      return new SocialMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "shareType" field.</summary>
    public const int ShareTypeFieldNumber = 3;
    private ulong shareType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShareType {
      get { return shareType_; }
      set {
        shareType_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private ulong action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "shareTarget" field.</summary>
    public const int ShareTargetFieldNumber = 5;
    private string shareTarget_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareTarget {
      get { return shareTarget_; }
      set {
        shareTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "followCount" field.</summary>
    public const int FollowCountFieldNumber = 6;
    private ulong followCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FollowCount {
      get { return followCount_; }
      set {
        followCount_ = value;
      }
    }

    /// <summary>Field number for the "publicAreaCommon" field.</summary>
    public const int PublicAreaCommonFieldNumber = 7;
    private global::Douyin.PublicAreaCommon publicAreaCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.PublicAreaCommon PublicAreaCommon {
      get { return publicAreaCommon_; }
      set {
        publicAreaCommon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocialMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocialMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (ShareType != other.ShareType) return false;
      if (Action != other.Action) return false;
      if (ShareTarget != other.ShareTarget) return false;
      if (FollowCount != other.FollowCount) return false;
      if (!object.Equals(PublicAreaCommon, other.PublicAreaCommon)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (ShareType != 0UL) hash ^= ShareType.GetHashCode();
      if (Action != 0UL) hash ^= Action.GetHashCode();
      if (ShareTarget.Length != 0) hash ^= ShareTarget.GetHashCode();
      if (FollowCount != 0UL) hash ^= FollowCount.GetHashCode();
      if (publicAreaCommon_ != null) hash ^= PublicAreaCommon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (ShareType != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ShareType);
      }
      if (Action != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Action);
      }
      if (ShareTarget.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShareTarget);
      }
      if (FollowCount != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FollowCount);
      }
      if (publicAreaCommon_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PublicAreaCommon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (ShareType != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShareType);
      }
      if (Action != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Action);
      }
      if (ShareTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShareTarget);
      }
      if (FollowCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FollowCount);
      }
      if (publicAreaCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PublicAreaCommon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocialMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.ShareType != 0UL) {
        ShareType = other.ShareType;
      }
      if (other.Action != 0UL) {
        Action = other.Action;
      }
      if (other.ShareTarget.Length != 0) {
        ShareTarget = other.ShareTarget;
      }
      if (other.FollowCount != 0UL) {
        FollowCount = other.FollowCount;
      }
      if (other.publicAreaCommon_ != null) {
        if (publicAreaCommon_ == null) {
          publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
        }
        PublicAreaCommon.MergeFrom(other.PublicAreaCommon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            ShareType = input.ReadUInt64();
            break;
          }
          case 32: {
            Action = input.ReadUInt64();
            break;
          }
          case 42: {
            ShareTarget = input.ReadString();
            break;
          }
          case 48: {
            FollowCount = input.ReadUInt64();
            break;
          }
          case 58: {
            if (publicAreaCommon_ == null) {
              publicAreaCommon_ = new global::Douyin.PublicAreaCommon();
            }
            input.ReadMessage(publicAreaCommon_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PicoDisplayInfo : pb::IMessage<PicoDisplayInfo> {
    private static readonly pb::MessageParser<PicoDisplayInfo> _parser = new pb::MessageParser<PicoDisplayInfo>(() => new PicoDisplayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PicoDisplayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PicoDisplayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PicoDisplayInfo(PicoDisplayInfo other) : this() {
      comboSumCount_ = other.comboSumCount_;
      emoji_ = other.emoji_;
      EmojiIcon = other.emojiIcon_ != null ? other.EmojiIcon.Clone() : null;
      emojiText_ = other.emojiText_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PicoDisplayInfo Clone() {
      return new PicoDisplayInfo(this);
    }

    /// <summary>Field number for the "comboSumCount" field.</summary>
    public const int ComboSumCountFieldNumber = 1;
    private ulong comboSumCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ComboSumCount {
      get { return comboSumCount_; }
      set {
        comboSumCount_ = value;
      }
    }

    /// <summary>Field number for the "emoji" field.</summary>
    public const int EmojiFieldNumber = 2;
    private string emoji_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Emoji {
      get { return emoji_; }
      set {
        emoji_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "emojiIcon" field.</summary>
    public const int EmojiIconFieldNumber = 3;
    private global::Douyin.Image emojiIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image EmojiIcon {
      get { return emojiIcon_; }
      set {
        emojiIcon_ = value;
      }
    }

    /// <summary>Field number for the "emojiText" field.</summary>
    public const int EmojiTextFieldNumber = 4;
    private string emojiText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmojiText {
      get { return emojiText_; }
      set {
        emojiText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PicoDisplayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PicoDisplayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ComboSumCount != other.ComboSumCount) return false;
      if (Emoji != other.Emoji) return false;
      if (!object.Equals(EmojiIcon, other.EmojiIcon)) return false;
      if (EmojiText != other.EmojiText) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ComboSumCount != 0UL) hash ^= ComboSumCount.GetHashCode();
      if (Emoji.Length != 0) hash ^= Emoji.GetHashCode();
      if (emojiIcon_ != null) hash ^= EmojiIcon.GetHashCode();
      if (EmojiText.Length != 0) hash ^= EmojiText.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ComboSumCount != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ComboSumCount);
      }
      if (Emoji.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Emoji);
      }
      if (emojiIcon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EmojiIcon);
      }
      if (EmojiText.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EmojiText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ComboSumCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ComboSumCount);
      }
      if (Emoji.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Emoji);
      }
      if (emojiIcon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmojiIcon);
      }
      if (EmojiText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EmojiText);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PicoDisplayInfo other) {
      if (other == null) {
        return;
      }
      if (other.ComboSumCount != 0UL) {
        ComboSumCount = other.ComboSumCount;
      }
      if (other.Emoji.Length != 0) {
        Emoji = other.Emoji;
      }
      if (other.emojiIcon_ != null) {
        if (emojiIcon_ == null) {
          emojiIcon_ = new global::Douyin.Image();
        }
        EmojiIcon.MergeFrom(other.EmojiIcon);
      }
      if (other.EmojiText.Length != 0) {
        EmojiText = other.EmojiText;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ComboSumCount = input.ReadUInt64();
            break;
          }
          case 18: {
            Emoji = input.ReadString();
            break;
          }
          case 26: {
            if (emojiIcon_ == null) {
              emojiIcon_ = new global::Douyin.Image();
            }
            input.ReadMessage(emojiIcon_);
            break;
          }
          case 34: {
            EmojiText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DoubleLikeDetail : pb::IMessage<DoubleLikeDetail> {
    private static readonly pb::MessageParser<DoubleLikeDetail> _parser = new pb::MessageParser<DoubleLikeDetail>(() => new DoubleLikeDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleLikeDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleLikeDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleLikeDetail(DoubleLikeDetail other) : this() {
      doubleFlag_ = other.doubleFlag_;
      seqId_ = other.seqId_;
      renewalsNum_ = other.renewalsNum_;
      triggersNum_ = other.triggersNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleLikeDetail Clone() {
      return new DoubleLikeDetail(this);
    }

    /// <summary>Field number for the "doubleFlag" field.</summary>
    public const int DoubleFlagFieldNumber = 1;
    private bool doubleFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleFlag {
      get { return doubleFlag_; }
      set {
        doubleFlag_ = value;
      }
    }

    /// <summary>Field number for the "seqId" field.</summary>
    public const int SeqIdFieldNumber = 2;
    private uint seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "renewalsNum" field.</summary>
    public const int RenewalsNumFieldNumber = 3;
    private uint renewalsNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RenewalsNum {
      get { return renewalsNum_; }
      set {
        renewalsNum_ = value;
      }
    }

    /// <summary>Field number for the "triggersNum" field.</summary>
    public const int TriggersNumFieldNumber = 4;
    private uint triggersNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TriggersNum {
      get { return triggersNum_; }
      set {
        triggersNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleLikeDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleLikeDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoubleFlag != other.DoubleFlag) return false;
      if (SeqId != other.SeqId) return false;
      if (RenewalsNum != other.RenewalsNum) return false;
      if (TriggersNum != other.TriggersNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DoubleFlag != false) hash ^= DoubleFlag.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (RenewalsNum != 0) hash ^= RenewalsNum.GetHashCode();
      if (TriggersNum != 0) hash ^= TriggersNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DoubleFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(DoubleFlag);
      }
      if (SeqId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SeqId);
      }
      if (RenewalsNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RenewalsNum);
      }
      if (TriggersNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TriggersNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DoubleFlag != false) {
        size += 1 + 1;
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqId);
      }
      if (RenewalsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RenewalsNum);
      }
      if (TriggersNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TriggersNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleLikeDetail other) {
      if (other == null) {
        return;
      }
      if (other.DoubleFlag != false) {
        DoubleFlag = other.DoubleFlag;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      if (other.RenewalsNum != 0) {
        RenewalsNum = other.RenewalsNum;
      }
      if (other.TriggersNum != 0) {
        TriggersNum = other.TriggersNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DoubleFlag = input.ReadBool();
            break;
          }
          case 16: {
            SeqId = input.ReadUInt32();
            break;
          }
          case 24: {
            RenewalsNum = input.ReadUInt32();
            break;
          }
          case 32: {
            TriggersNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayControlInfo : pb::IMessage<DisplayControlInfo> {
    private static readonly pb::MessageParser<DisplayControlInfo> _parser = new pb::MessageParser<DisplayControlInfo>(() => new DisplayControlInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayControlInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayControlInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayControlInfo(DisplayControlInfo other) : this() {
      showText_ = other.showText_;
      showIcons_ = other.showIcons_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayControlInfo Clone() {
      return new DisplayControlInfo(this);
    }

    /// <summary>Field number for the "showText" field.</summary>
    public const int ShowTextFieldNumber = 1;
    private bool showText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowText {
      get { return showText_; }
      set {
        showText_ = value;
      }
    }

    /// <summary>Field number for the "showIcons" field.</summary>
    public const int ShowIconsFieldNumber = 2;
    private bool showIcons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowIcons {
      get { return showIcons_; }
      set {
        showIcons_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayControlInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayControlInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowText != other.ShowText) return false;
      if (ShowIcons != other.ShowIcons) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowText != false) hash ^= ShowText.GetHashCode();
      if (ShowIcons != false) hash ^= ShowIcons.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowText != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowText);
      }
      if (ShowIcons != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowIcons);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowText != false) {
        size += 1 + 1;
      }
      if (ShowIcons != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayControlInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShowText != false) {
        ShowText = other.ShowText;
      }
      if (other.ShowIcons != false) {
        ShowIcons = other.ShowIcons;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowText = input.ReadBool();
            break;
          }
          case 16: {
            ShowIcons = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EpisodeChatMessage : pb::IMessage<EpisodeChatMessage> {
    private static readonly pb::MessageParser<EpisodeChatMessage> _parser = new pb::MessageParser<EpisodeChatMessage>(() => new EpisodeChatMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpisodeChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpisodeChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpisodeChatMessage(EpisodeChatMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      User = other.user_ != null ? other.User.Clone() : null;
      content_ = other.content_;
      visibleToSende_ = other.visibleToSende_;
      GiftImage = other.giftImage_ != null ? other.GiftImage.Clone() : null;
      agreeMsgId_ = other.agreeMsgId_;
      colorValueList_ = other.colorValueList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpisodeChatMessage Clone() {
      return new EpisodeChatMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Message common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Message Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visibleToSende" field.</summary>
    public const int VisibleToSendeFieldNumber = 4;
    private bool visibleToSende_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VisibleToSende {
      get { return visibleToSende_; }
      set {
        visibleToSende_ = value;
      }
    }

    /// <summary>Field number for the "giftImage" field.</summary>
    public const int GiftImageFieldNumber = 7;
    private global::Douyin.Image giftImage_;
    /// <summary>
    ///   BackgroundImage backgroundImage = 5;
    ///   PublicAreaCommon publicAreaCommon = 6;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image GiftImage {
      get { return giftImage_; }
      set {
        giftImage_ = value;
      }
    }

    /// <summary>Field number for the "agreeMsgId" field.</summary>
    public const int AgreeMsgIdFieldNumber = 8;
    private ulong agreeMsgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AgreeMsgId {
      get { return agreeMsgId_; }
      set {
        agreeMsgId_ = value;
      }
    }

    /// <summary>Field number for the "colorValueList" field.</summary>
    public const int ColorValueListFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_colorValueList_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> colorValueList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColorValueList {
      get { return colorValueList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpisodeChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpisodeChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Content != other.Content) return false;
      if (VisibleToSende != other.VisibleToSende) return false;
      if (!object.Equals(GiftImage, other.GiftImage)) return false;
      if (AgreeMsgId != other.AgreeMsgId) return false;
      if(!colorValueList_.Equals(other.colorValueList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (VisibleToSende != false) hash ^= VisibleToSende.GetHashCode();
      if (giftImage_ != null) hash ^= GiftImage.GetHashCode();
      if (AgreeMsgId != 0UL) hash ^= AgreeMsgId.GetHashCode();
      hash ^= colorValueList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (VisibleToSende != false) {
        output.WriteRawTag(32);
        output.WriteBool(VisibleToSende);
      }
      if (giftImage_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GiftImage);
      }
      if (AgreeMsgId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(AgreeMsgId);
      }
      colorValueList_.WriteTo(output, _repeated_colorValueList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (VisibleToSende != false) {
        size += 1 + 1;
      }
      if (giftImage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftImage);
      }
      if (AgreeMsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AgreeMsgId);
      }
      size += colorValueList_.CalculateSize(_repeated_colorValueList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpisodeChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Message();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.VisibleToSende != false) {
        VisibleToSende = other.VisibleToSende;
      }
      if (other.giftImage_ != null) {
        if (giftImage_ == null) {
          giftImage_ = new global::Douyin.Image();
        }
        GiftImage.MergeFrom(other.GiftImage);
      }
      if (other.AgreeMsgId != 0UL) {
        AgreeMsgId = other.AgreeMsgId;
      }
      colorValueList_.Add(other.colorValueList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Message();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            VisibleToSende = input.ReadBool();
            break;
          }
          case 58: {
            if (giftImage_ == null) {
              giftImage_ = new global::Douyin.Image();
            }
            input.ReadMessage(giftImage_);
            break;
          }
          case 64: {
            AgreeMsgId = input.ReadUInt64();
            break;
          }
          case 74: {
            colorValueList_.AddEntriesFrom(input, _repeated_colorValueList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchAgainstScoreMessage : pb::IMessage<MatchAgainstScoreMessage> {
    private static readonly pb::MessageParser<MatchAgainstScoreMessage> _parser = new pb::MessageParser<MatchAgainstScoreMessage>(() => new MatchAgainstScoreMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAgainstScoreMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAgainstScoreMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAgainstScoreMessage(MatchAgainstScoreMessage other) : this() {
      Common = other.common_ != null ? other.Common.Clone() : null;
      Against = other.against_ != null ? other.Against.Clone() : null;
      matchStatus_ = other.matchStatus_;
      displayStatus_ = other.displayStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAgainstScoreMessage Clone() {
      return new MatchAgainstScoreMessage(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Douyin.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "against" field.</summary>
    public const int AgainstFieldNumber = 2;
    private global::Douyin.Against against_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Against Against {
      get { return against_; }
      set {
        against_ = value;
      }
    }

    /// <summary>Field number for the "matchStatus" field.</summary>
    public const int MatchStatusFieldNumber = 3;
    private uint matchStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchStatus {
      get { return matchStatus_; }
      set {
        matchStatus_ = value;
      }
    }

    /// <summary>Field number for the "displayStatus" field.</summary>
    public const int DisplayStatusFieldNumber = 4;
    private uint displayStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisplayStatus {
      get { return displayStatus_; }
      set {
        displayStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAgainstScoreMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAgainstScoreMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(Against, other.Against)) return false;
      if (MatchStatus != other.MatchStatus) return false;
      if (DisplayStatus != other.DisplayStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (against_ != null) hash ^= Against.GetHashCode();
      if (MatchStatus != 0) hash ^= MatchStatus.GetHashCode();
      if (DisplayStatus != 0) hash ^= DisplayStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (against_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Against);
      }
      if (MatchStatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MatchStatus);
      }
      if (DisplayStatus != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DisplayStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (against_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Against);
      }
      if (MatchStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchStatus);
      }
      if (DisplayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplayStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAgainstScoreMessage other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::Douyin.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.against_ != null) {
        if (against_ == null) {
          against_ = new global::Douyin.Against();
        }
        Against.MergeFrom(other.Against);
      }
      if (other.MatchStatus != 0) {
        MatchStatus = other.MatchStatus;
      }
      if (other.DisplayStatus != 0) {
        DisplayStatus = other.DisplayStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::Douyin.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 18: {
            if (against_ == null) {
              against_ = new global::Douyin.Against();
            }
            input.ReadMessage(against_);
            break;
          }
          case 24: {
            MatchStatus = input.ReadUInt32();
            break;
          }
          case 32: {
            DisplayStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Against : pb::IMessage<Against> {
    private static readonly pb::MessageParser<Against> _parser = new pb::MessageParser<Against>(() => new Against());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Against> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Against() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Against(Against other) : this() {
      leftName_ = other.leftName_;
      LeftLogo = other.leftLogo_ != null ? other.LeftLogo.Clone() : null;
      leftGoal_ = other.leftGoal_;
      rightName_ = other.rightName_;
      RightLogo = other.rightLogo_ != null ? other.RightLogo.Clone() : null;
      rightGoal_ = other.rightGoal_;
      timestamp_ = other.timestamp_;
      version_ = other.version_;
      leftTeamId_ = other.leftTeamId_;
      rightTeamId_ = other.rightTeamId_;
      diffSei2AbsSecond_ = other.diffSei2AbsSecond_;
      finalGoalStage_ = other.finalGoalStage_;
      currentGoalStage_ = other.currentGoalStage_;
      leftScoreAddition_ = other.leftScoreAddition_;
      rightScoreAddition_ = other.rightScoreAddition_;
      leftGoalInt_ = other.leftGoalInt_;
      rightGoalInt_ = other.rightGoalInt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Against Clone() {
      return new Against(this);
    }

    /// <summary>Field number for the "leftName" field.</summary>
    public const int LeftNameFieldNumber = 1;
    private string leftName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeftName {
      get { return leftName_; }
      set {
        leftName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftLogo" field.</summary>
    public const int LeftLogoFieldNumber = 2;
    private global::Douyin.Image leftLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image LeftLogo {
      get { return leftLogo_; }
      set {
        leftLogo_ = value;
      }
    }

    /// <summary>Field number for the "leftGoal" field.</summary>
    public const int LeftGoalFieldNumber = 3;
    private string leftGoal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeftGoal {
      get { return leftGoal_; }
      set {
        leftGoal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rightName" field.</summary>
    public const int RightNameFieldNumber = 6;
    private string rightName_ = "";
    /// <summary>
    ///  LeftPlayersList leftPlayersList = 4;
    ///  LeftGoalStageDetail leftGoalStageDetail = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RightName {
      get { return rightName_; }
      set {
        rightName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rightLogo" field.</summary>
    public const int RightLogoFieldNumber = 7;
    private global::Douyin.Image rightLogo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image RightLogo {
      get { return rightLogo_; }
      set {
        rightLogo_ = value;
      }
    }

    /// <summary>Field number for the "rightGoal" field.</summary>
    public const int RightGoalFieldNumber = 8;
    private string rightGoal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RightGoal {
      get { return rightGoal_; }
      set {
        rightGoal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private ulong timestamp_;
    /// <summary>
    ///  RightPlayersList rightPlayersList  = 9;
    ///  RightGoalStageDetail rightGoalStageDetail = 10;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 12;
    private ulong version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "leftTeamId" field.</summary>
    public const int LeftTeamIdFieldNumber = 13;
    private ulong leftTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeftTeamId {
      get { return leftTeamId_; }
      set {
        leftTeamId_ = value;
      }
    }

    /// <summary>Field number for the "rightTeamId" field.</summary>
    public const int RightTeamIdFieldNumber = 14;
    private ulong rightTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RightTeamId {
      get { return rightTeamId_; }
      set {
        rightTeamId_ = value;
      }
    }

    /// <summary>Field number for the "diffSei2absSecond" field.</summary>
    public const int DiffSei2AbsSecondFieldNumber = 15;
    private ulong diffSei2AbsSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DiffSei2AbsSecond {
      get { return diffSei2AbsSecond_; }
      set {
        diffSei2AbsSecond_ = value;
      }
    }

    /// <summary>Field number for the "finalGoalStage" field.</summary>
    public const int FinalGoalStageFieldNumber = 16;
    private uint finalGoalStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinalGoalStage {
      get { return finalGoalStage_; }
      set {
        finalGoalStage_ = value;
      }
    }

    /// <summary>Field number for the "currentGoalStage" field.</summary>
    public const int CurrentGoalStageFieldNumber = 17;
    private uint currentGoalStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentGoalStage {
      get { return currentGoalStage_; }
      set {
        currentGoalStage_ = value;
      }
    }

    /// <summary>Field number for the "leftScoreAddition" field.</summary>
    public const int LeftScoreAdditionFieldNumber = 18;
    private uint leftScoreAddition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftScoreAddition {
      get { return leftScoreAddition_; }
      set {
        leftScoreAddition_ = value;
      }
    }

    /// <summary>Field number for the "rightScoreAddition" field.</summary>
    public const int RightScoreAdditionFieldNumber = 19;
    private uint rightScoreAddition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RightScoreAddition {
      get { return rightScoreAddition_; }
      set {
        rightScoreAddition_ = value;
      }
    }

    /// <summary>Field number for the "leftGoalInt" field.</summary>
    public const int LeftGoalIntFieldNumber = 20;
    private ulong leftGoalInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeftGoalInt {
      get { return leftGoalInt_; }
      set {
        leftGoalInt_ = value;
      }
    }

    /// <summary>Field number for the "rightGoalInt" field.</summary>
    public const int RightGoalIntFieldNumber = 21;
    private ulong rightGoalInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RightGoalInt {
      get { return rightGoalInt_; }
      set {
        rightGoalInt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Against);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Against other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftName != other.LeftName) return false;
      if (!object.Equals(LeftLogo, other.LeftLogo)) return false;
      if (LeftGoal != other.LeftGoal) return false;
      if (RightName != other.RightName) return false;
      if (!object.Equals(RightLogo, other.RightLogo)) return false;
      if (RightGoal != other.RightGoal) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Version != other.Version) return false;
      if (LeftTeamId != other.LeftTeamId) return false;
      if (RightTeamId != other.RightTeamId) return false;
      if (DiffSei2AbsSecond != other.DiffSei2AbsSecond) return false;
      if (FinalGoalStage != other.FinalGoalStage) return false;
      if (CurrentGoalStage != other.CurrentGoalStage) return false;
      if (LeftScoreAddition != other.LeftScoreAddition) return false;
      if (RightScoreAddition != other.RightScoreAddition) return false;
      if (LeftGoalInt != other.LeftGoalInt) return false;
      if (RightGoalInt != other.RightGoalInt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftName.Length != 0) hash ^= LeftName.GetHashCode();
      if (leftLogo_ != null) hash ^= LeftLogo.GetHashCode();
      if (LeftGoal.Length != 0) hash ^= LeftGoal.GetHashCode();
      if (RightName.Length != 0) hash ^= RightName.GetHashCode();
      if (rightLogo_ != null) hash ^= RightLogo.GetHashCode();
      if (RightGoal.Length != 0) hash ^= RightGoal.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Version != 0UL) hash ^= Version.GetHashCode();
      if (LeftTeamId != 0UL) hash ^= LeftTeamId.GetHashCode();
      if (RightTeamId != 0UL) hash ^= RightTeamId.GetHashCode();
      if (DiffSei2AbsSecond != 0UL) hash ^= DiffSei2AbsSecond.GetHashCode();
      if (FinalGoalStage != 0) hash ^= FinalGoalStage.GetHashCode();
      if (CurrentGoalStage != 0) hash ^= CurrentGoalStage.GetHashCode();
      if (LeftScoreAddition != 0) hash ^= LeftScoreAddition.GetHashCode();
      if (RightScoreAddition != 0) hash ^= RightScoreAddition.GetHashCode();
      if (LeftGoalInt != 0UL) hash ^= LeftGoalInt.GetHashCode();
      if (RightGoalInt != 0UL) hash ^= RightGoalInt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeftName);
      }
      if (leftLogo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeftLogo);
      }
      if (LeftGoal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LeftGoal);
      }
      if (RightName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RightName);
      }
      if (rightLogo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RightLogo);
      }
      if (RightGoal.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RightGoal);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Timestamp);
      }
      if (Version != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Version);
      }
      if (LeftTeamId != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(LeftTeamId);
      }
      if (RightTeamId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(RightTeamId);
      }
      if (DiffSei2AbsSecond != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(DiffSei2AbsSecond);
      }
      if (FinalGoalStage != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(FinalGoalStage);
      }
      if (CurrentGoalStage != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(CurrentGoalStage);
      }
      if (LeftScoreAddition != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LeftScoreAddition);
      }
      if (RightScoreAddition != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(RightScoreAddition);
      }
      if (LeftGoalInt != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(LeftGoalInt);
      }
      if (RightGoalInt != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(RightGoalInt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeftName);
      }
      if (leftLogo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftLogo);
      }
      if (LeftGoal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeftGoal);
      }
      if (RightName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RightName);
      }
      if (rightLogo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightLogo);
      }
      if (RightGoal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RightGoal);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Version != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
      }
      if (LeftTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeftTeamId);
      }
      if (RightTeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RightTeamId);
      }
      if (DiffSei2AbsSecond != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DiffSei2AbsSecond);
      }
      if (FinalGoalStage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FinalGoalStage);
      }
      if (CurrentGoalStage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurrentGoalStage);
      }
      if (LeftScoreAddition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LeftScoreAddition);
      }
      if (RightScoreAddition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RightScoreAddition);
      }
      if (LeftGoalInt != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LeftGoalInt);
      }
      if (RightGoalInt != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RightGoalInt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Against other) {
      if (other == null) {
        return;
      }
      if (other.LeftName.Length != 0) {
        LeftName = other.LeftName;
      }
      if (other.leftLogo_ != null) {
        if (leftLogo_ == null) {
          leftLogo_ = new global::Douyin.Image();
        }
        LeftLogo.MergeFrom(other.LeftLogo);
      }
      if (other.LeftGoal.Length != 0) {
        LeftGoal = other.LeftGoal;
      }
      if (other.RightName.Length != 0) {
        RightName = other.RightName;
      }
      if (other.rightLogo_ != null) {
        if (rightLogo_ == null) {
          rightLogo_ = new global::Douyin.Image();
        }
        RightLogo.MergeFrom(other.RightLogo);
      }
      if (other.RightGoal.Length != 0) {
        RightGoal = other.RightGoal;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Version != 0UL) {
        Version = other.Version;
      }
      if (other.LeftTeamId != 0UL) {
        LeftTeamId = other.LeftTeamId;
      }
      if (other.RightTeamId != 0UL) {
        RightTeamId = other.RightTeamId;
      }
      if (other.DiffSei2AbsSecond != 0UL) {
        DiffSei2AbsSecond = other.DiffSei2AbsSecond;
      }
      if (other.FinalGoalStage != 0) {
        FinalGoalStage = other.FinalGoalStage;
      }
      if (other.CurrentGoalStage != 0) {
        CurrentGoalStage = other.CurrentGoalStage;
      }
      if (other.LeftScoreAddition != 0) {
        LeftScoreAddition = other.LeftScoreAddition;
      }
      if (other.RightScoreAddition != 0) {
        RightScoreAddition = other.RightScoreAddition;
      }
      if (other.LeftGoalInt != 0UL) {
        LeftGoalInt = other.LeftGoalInt;
      }
      if (other.RightGoalInt != 0UL) {
        RightGoalInt = other.RightGoalInt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LeftName = input.ReadString();
            break;
          }
          case 18: {
            if (leftLogo_ == null) {
              leftLogo_ = new global::Douyin.Image();
            }
            input.ReadMessage(leftLogo_);
            break;
          }
          case 26: {
            LeftGoal = input.ReadString();
            break;
          }
          case 50: {
            RightName = input.ReadString();
            break;
          }
          case 58: {
            if (rightLogo_ == null) {
              rightLogo_ = new global::Douyin.Image();
            }
            input.ReadMessage(rightLogo_);
            break;
          }
          case 66: {
            RightGoal = input.ReadString();
            break;
          }
          case 88: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 96: {
            Version = input.ReadUInt64();
            break;
          }
          case 104: {
            LeftTeamId = input.ReadUInt64();
            break;
          }
          case 112: {
            RightTeamId = input.ReadUInt64();
            break;
          }
          case 120: {
            DiffSei2AbsSecond = input.ReadUInt64();
            break;
          }
          case 128: {
            FinalGoalStage = input.ReadUInt32();
            break;
          }
          case 136: {
            CurrentGoalStage = input.ReadUInt32();
            break;
          }
          case 144: {
            LeftScoreAddition = input.ReadUInt32();
            break;
          }
          case 152: {
            RightScoreAddition = input.ReadUInt32();
            break;
          }
          case 160: {
            LeftGoalInt = input.ReadUInt64();
            break;
          }
          case 168: {
            RightGoalInt = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Common : pb::IMessage<Common> {
    private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Common> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common(Common other) : this() {
      method_ = other.method_;
      msgId_ = other.msgId_;
      roomId_ = other.roomId_;
      createTime_ = other.createTime_;
      monitor_ = other.monitor_;
      isShowMsg_ = other.isShowMsg_;
      describe_ = other.describe_;
      foldType_ = other.foldType_;
      anchorFoldType_ = other.anchorFoldType_;
      priorityScore_ = other.priorityScore_;
      logId_ = other.logId_;
      msgProcessFilterK_ = other.msgProcessFilterK_;
      msgProcessFilterV_ = other.msgProcessFilterV_;
      User = other.user_ != null ? other.User.Clone() : null;
      anchorFoldTypeV2_ = other.anchorFoldTypeV2_;
      processAtSeiTimeMs_ = other.processAtSeiTimeMs_;
      randomDispatchMs_ = other.randomDispatchMs_;
      isDispatch_ = other.isDispatch_;
      channelId_ = other.channelId_;
      diffSei2AbsSecond_ = other.diffSei2AbsSecond_;
      anchorFoldDuration_ = other.anchorFoldDuration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common Clone() {
      return new Common(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 2;
    private ulong msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private ulong roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private ulong createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "monitor" field.</summary>
    public const int MonitorFieldNumber = 5;
    private uint monitor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Monitor {
      get { return monitor_; }
      set {
        monitor_ = value;
      }
    }

    /// <summary>Field number for the "isShowMsg" field.</summary>
    public const int IsShowMsgFieldNumber = 6;
    private bool isShowMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShowMsg {
      get { return isShowMsg_; }
      set {
        isShowMsg_ = value;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 7;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "foldType" field.</summary>
    public const int FoldTypeFieldNumber = 9;
    private ulong foldType_;
    /// <summary>
    ///  DisplayText displayText = 8;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FoldType {
      get { return foldType_; }
      set {
        foldType_ = value;
      }
    }

    /// <summary>Field number for the "anchorFoldType" field.</summary>
    public const int AnchorFoldTypeFieldNumber = 10;
    private ulong anchorFoldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnchorFoldType {
      get { return anchorFoldType_; }
      set {
        anchorFoldType_ = value;
      }
    }

    /// <summary>Field number for the "priorityScore" field.</summary>
    public const int PriorityScoreFieldNumber = 11;
    private ulong priorityScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PriorityScore {
      get { return priorityScore_; }
      set {
        priorityScore_ = value;
      }
    }

    /// <summary>Field number for the "logId" field.</summary>
    public const int LogIdFieldNumber = 12;
    private string logId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogId {
      get { return logId_; }
      set {
        logId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgProcessFilterK" field.</summary>
    public const int MsgProcessFilterKFieldNumber = 13;
    private string msgProcessFilterK_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgProcessFilterK {
      get { return msgProcessFilterK_; }
      set {
        msgProcessFilterK_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msgProcessFilterV" field.</summary>
    public const int MsgProcessFilterVFieldNumber = 14;
    private string msgProcessFilterV_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgProcessFilterV {
      get { return msgProcessFilterV_; }
      set {
        msgProcessFilterV_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 15;
    private global::Douyin.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "anchorFoldTypeV2" field.</summary>
    public const int AnchorFoldTypeV2FieldNumber = 17;
    private ulong anchorFoldTypeV2_;
    /// <summary>
    ///  Room room = 16;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnchorFoldTypeV2 {
      get { return anchorFoldTypeV2_; }
      set {
        anchorFoldTypeV2_ = value;
      }
    }

    /// <summary>Field number for the "processAtSeiTimeMs" field.</summary>
    public const int ProcessAtSeiTimeMsFieldNumber = 18;
    private ulong processAtSeiTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProcessAtSeiTimeMs {
      get { return processAtSeiTimeMs_; }
      set {
        processAtSeiTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "randomDispatchMs" field.</summary>
    public const int RandomDispatchMsFieldNumber = 19;
    private ulong randomDispatchMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RandomDispatchMs {
      get { return randomDispatchMs_; }
      set {
        randomDispatchMs_ = value;
      }
    }

    /// <summary>Field number for the "isDispatch" field.</summary>
    public const int IsDispatchFieldNumber = 20;
    private bool isDispatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDispatch {
      get { return isDispatch_; }
      set {
        isDispatch_ = value;
      }
    }

    /// <summary>Field number for the "channelId" field.</summary>
    public const int ChannelIdFieldNumber = 21;
    private ulong channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "diffSei2absSecond" field.</summary>
    public const int DiffSei2AbsSecondFieldNumber = 22;
    private ulong diffSei2AbsSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DiffSei2AbsSecond {
      get { return diffSei2AbsSecond_; }
      set {
        diffSei2AbsSecond_ = value;
      }
    }

    /// <summary>Field number for the "anchorFoldDuration" field.</summary>
    public const int AnchorFoldDurationFieldNumber = 23;
    private ulong anchorFoldDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AnchorFoldDuration {
      get { return anchorFoldDuration_; }
      set {
        anchorFoldDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Common);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Common other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (MsgId != other.MsgId) return false;
      if (RoomId != other.RoomId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Monitor != other.Monitor) return false;
      if (IsShowMsg != other.IsShowMsg) return false;
      if (Describe != other.Describe) return false;
      if (FoldType != other.FoldType) return false;
      if (AnchorFoldType != other.AnchorFoldType) return false;
      if (PriorityScore != other.PriorityScore) return false;
      if (LogId != other.LogId) return false;
      if (MsgProcessFilterK != other.MsgProcessFilterK) return false;
      if (MsgProcessFilterV != other.MsgProcessFilterV) return false;
      if (!object.Equals(User, other.User)) return false;
      if (AnchorFoldTypeV2 != other.AnchorFoldTypeV2) return false;
      if (ProcessAtSeiTimeMs != other.ProcessAtSeiTimeMs) return false;
      if (RandomDispatchMs != other.RandomDispatchMs) return false;
      if (IsDispatch != other.IsDispatch) return false;
      if (ChannelId != other.ChannelId) return false;
      if (DiffSei2AbsSecond != other.DiffSei2AbsSecond) return false;
      if (AnchorFoldDuration != other.AnchorFoldDuration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (MsgId != 0UL) hash ^= MsgId.GetHashCode();
      if (RoomId != 0UL) hash ^= RoomId.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (Monitor != 0) hash ^= Monitor.GetHashCode();
      if (IsShowMsg != false) hash ^= IsShowMsg.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (FoldType != 0UL) hash ^= FoldType.GetHashCode();
      if (AnchorFoldType != 0UL) hash ^= AnchorFoldType.GetHashCode();
      if (PriorityScore != 0UL) hash ^= PriorityScore.GetHashCode();
      if (LogId.Length != 0) hash ^= LogId.GetHashCode();
      if (MsgProcessFilterK.Length != 0) hash ^= MsgProcessFilterK.GetHashCode();
      if (MsgProcessFilterV.Length != 0) hash ^= MsgProcessFilterV.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (AnchorFoldTypeV2 != 0UL) hash ^= AnchorFoldTypeV2.GetHashCode();
      if (ProcessAtSeiTimeMs != 0UL) hash ^= ProcessAtSeiTimeMs.GetHashCode();
      if (RandomDispatchMs != 0UL) hash ^= RandomDispatchMs.GetHashCode();
      if (IsDispatch != false) hash ^= IsDispatch.GetHashCode();
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (DiffSei2AbsSecond != 0UL) hash ^= DiffSei2AbsSecond.GetHashCode();
      if (AnchorFoldDuration != 0UL) hash ^= AnchorFoldDuration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (MsgId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MsgId);
      }
      if (RoomId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomId);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CreateTime);
      }
      if (Monitor != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Monitor);
      }
      if (IsShowMsg != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsShowMsg);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Describe);
      }
      if (FoldType != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FoldType);
      }
      if (AnchorFoldType != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AnchorFoldType);
      }
      if (PriorityScore != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(PriorityScore);
      }
      if (LogId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LogId);
      }
      if (MsgProcessFilterK.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MsgProcessFilterK);
      }
      if (MsgProcessFilterV.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MsgProcessFilterV);
      }
      if (user_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(User);
      }
      if (AnchorFoldTypeV2 != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(AnchorFoldTypeV2);
      }
      if (ProcessAtSeiTimeMs != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(ProcessAtSeiTimeMs);
      }
      if (RandomDispatchMs != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(RandomDispatchMs);
      }
      if (IsDispatch != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsDispatch);
      }
      if (ChannelId != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(ChannelId);
      }
      if (DiffSei2AbsSecond != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(DiffSei2AbsSecond);
      }
      if (AnchorFoldDuration != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(AnchorFoldDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (MsgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgId);
      }
      if (RoomId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomId);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (Monitor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Monitor);
      }
      if (IsShowMsg != false) {
        size += 1 + 1;
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (FoldType != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FoldType);
      }
      if (AnchorFoldType != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AnchorFoldType);
      }
      if (PriorityScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PriorityScore);
      }
      if (LogId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogId);
      }
      if (MsgProcessFilterK.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgProcessFilterK);
      }
      if (MsgProcessFilterV.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgProcessFilterV);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (AnchorFoldTypeV2 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AnchorFoldTypeV2);
      }
      if (ProcessAtSeiTimeMs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ProcessAtSeiTimeMs);
      }
      if (RandomDispatchMs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RandomDispatchMs);
      }
      if (IsDispatch != false) {
        size += 2 + 1;
      }
      if (ChannelId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (DiffSei2AbsSecond != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DiffSei2AbsSecond);
      }
      if (AnchorFoldDuration != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AnchorFoldDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Common other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.MsgId != 0UL) {
        MsgId = other.MsgId;
      }
      if (other.RoomId != 0UL) {
        RoomId = other.RoomId;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.Monitor != 0) {
        Monitor = other.Monitor;
      }
      if (other.IsShowMsg != false) {
        IsShowMsg = other.IsShowMsg;
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.FoldType != 0UL) {
        FoldType = other.FoldType;
      }
      if (other.AnchorFoldType != 0UL) {
        AnchorFoldType = other.AnchorFoldType;
      }
      if (other.PriorityScore != 0UL) {
        PriorityScore = other.PriorityScore;
      }
      if (other.LogId.Length != 0) {
        LogId = other.LogId;
      }
      if (other.MsgProcessFilterK.Length != 0) {
        MsgProcessFilterK = other.MsgProcessFilterK;
      }
      if (other.MsgProcessFilterV.Length != 0) {
        MsgProcessFilterV = other.MsgProcessFilterV;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Douyin.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.AnchorFoldTypeV2 != 0UL) {
        AnchorFoldTypeV2 = other.AnchorFoldTypeV2;
      }
      if (other.ProcessAtSeiTimeMs != 0UL) {
        ProcessAtSeiTimeMs = other.ProcessAtSeiTimeMs;
      }
      if (other.RandomDispatchMs != 0UL) {
        RandomDispatchMs = other.RandomDispatchMs;
      }
      if (other.IsDispatch != false) {
        IsDispatch = other.IsDispatch;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.DiffSei2AbsSecond != 0UL) {
        DiffSei2AbsSecond = other.DiffSei2AbsSecond;
      }
      if (other.AnchorFoldDuration != 0UL) {
        AnchorFoldDuration = other.AnchorFoldDuration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 16: {
            MsgId = input.ReadUInt64();
            break;
          }
          case 24: {
            RoomId = input.ReadUInt64();
            break;
          }
          case 32: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 40: {
            Monitor = input.ReadUInt32();
            break;
          }
          case 48: {
            IsShowMsg = input.ReadBool();
            break;
          }
          case 58: {
            Describe = input.ReadString();
            break;
          }
          case 72: {
            FoldType = input.ReadUInt64();
            break;
          }
          case 80: {
            AnchorFoldType = input.ReadUInt64();
            break;
          }
          case 88: {
            PriorityScore = input.ReadUInt64();
            break;
          }
          case 98: {
            LogId = input.ReadString();
            break;
          }
          case 106: {
            MsgProcessFilterK = input.ReadString();
            break;
          }
          case 114: {
            MsgProcessFilterV = input.ReadString();
            break;
          }
          case 122: {
            if (user_ == null) {
              user_ = new global::Douyin.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 136: {
            AnchorFoldTypeV2 = input.ReadUInt64();
            break;
          }
          case 144: {
            ProcessAtSeiTimeMs = input.ReadUInt64();
            break;
          }
          case 152: {
            RandomDispatchMs = input.ReadUInt64();
            break;
          }
          case 160: {
            IsDispatch = input.ReadBool();
            break;
          }
          case 168: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 176: {
            DiffSei2AbsSecond = input.ReadUInt64();
            break;
          }
          case 184: {
            AnchorFoldDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      shortId_ = other.shortId_;
      nickName_ = other.nickName_;
      gender_ = other.gender_;
      signature_ = other.signature_;
      level_ = other.level_;
      birthday_ = other.birthday_;
      telephone_ = other.telephone_;
      AvatarThumb = other.avatarThumb_ != null ? other.AvatarThumb.Clone() : null;
      AvatarMedium = other.avatarMedium_ != null ? other.AvatarMedium.Clone() : null;
      AvatarLarge = other.avatarLarge_ != null ? other.AvatarLarge.Clone() : null;
      verified_ = other.verified_;
      experience_ = other.experience_;
      city_ = other.city_;
      status_ = other.status_;
      createTime_ = other.createTime_;
      modifyTime_ = other.modifyTime_;
      secret_ = other.secret_;
      shareQrcodeUri_ = other.shareQrcodeUri_;
      incomeSharePercent_ = other.incomeSharePercent_;
      badgeImageList_ = other.badgeImageList_.Clone();
      FollowInfo = other.followInfo_ != null ? other.FollowInfo.Clone() : null;
      specialId_ = other.specialId_;
      AvatarBorder = other.avatarBorder_ != null ? other.AvatarBorder.Clone() : null;
      Medal = other.medal_ != null ? other.Medal.Clone() : null;
      realTimeIconsList_ = other.realTimeIconsList_.Clone();
      displayId_ = other.displayId_;
      secUid_ = other.secUid_;
      fanTicketCount_ = other.fanTicketCount_;
      idStr_ = other.idStr_;
      ageRange_ = other.ageRange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "shortId" field.</summary>
    public const int ShortIdFieldNumber = 2;
    private ulong shortId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShortId {
      get { return shortId_; }
      set {
        shortId_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private uint gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private string signature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Birthday" field.</summary>
    public const int BirthdayFieldNumber = 7;
    private ulong birthday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    /// <summary>Field number for the "Telephone" field.</summary>
    public const int TelephoneFieldNumber = 8;
    private string telephone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telephone {
      get { return telephone_; }
      set {
        telephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AvatarThumb" field.</summary>
    public const int AvatarThumbFieldNumber = 9;
    private global::Douyin.Image avatarThumb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image AvatarThumb {
      get { return avatarThumb_; }
      set {
        avatarThumb_ = value;
      }
    }

    /// <summary>Field number for the "AvatarMedium" field.</summary>
    public const int AvatarMediumFieldNumber = 10;
    private global::Douyin.Image avatarMedium_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image AvatarMedium {
      get { return avatarMedium_; }
      set {
        avatarMedium_ = value;
      }
    }

    /// <summary>Field number for the "AvatarLarge" field.</summary>
    public const int AvatarLargeFieldNumber = 11;
    private global::Douyin.Image avatarLarge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image AvatarLarge {
      get { return avatarLarge_; }
      set {
        avatarLarge_ = value;
      }
    }

    /// <summary>Field number for the "Verified" field.</summary>
    public const int VerifiedFieldNumber = 12;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "Experience" field.</summary>
    public const int ExperienceFieldNumber = 13;
    private uint experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 14;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 15;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "CreateTime" field.</summary>
    public const int CreateTimeFieldNumber = 16;
    private ulong createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "ModifyTime" field.</summary>
    public const int ModifyTimeFieldNumber = 17;
    private ulong modifyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ModifyTime {
      get { return modifyTime_; }
      set {
        modifyTime_ = value;
      }
    }

    /// <summary>Field number for the "Secret" field.</summary>
    public const int SecretFieldNumber = 18;
    private uint secret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Secret {
      get { return secret_; }
      set {
        secret_ = value;
      }
    }

    /// <summary>Field number for the "ShareQrcodeUri" field.</summary>
    public const int ShareQrcodeUriFieldNumber = 19;
    private string shareQrcodeUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShareQrcodeUri {
      get { return shareQrcodeUri_; }
      set {
        shareQrcodeUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IncomeSharePercent" field.</summary>
    public const int IncomeSharePercentFieldNumber = 20;
    private uint incomeSharePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IncomeSharePercent {
      get { return incomeSharePercent_; }
      set {
        incomeSharePercent_ = value;
      }
    }

    /// <summary>Field number for the "BadgeImageList" field.</summary>
    public const int BadgeImageListFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Douyin.Image> _repeated_badgeImageList_codec
        = pb::FieldCodec.ForMessage(170, global::Douyin.Image.Parser);
    private readonly pbc::RepeatedField<global::Douyin.Image> badgeImageList_ = new pbc::RepeatedField<global::Douyin.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.Image> BadgeImageList {
      get { return badgeImageList_; }
    }

    /// <summary>Field number for the "FollowInfo" field.</summary>
    public const int FollowInfoFieldNumber = 22;
    private global::Douyin.FollowInfo followInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.FollowInfo FollowInfo {
      get { return followInfo_; }
      set {
        followInfo_ = value;
      }
    }

    /// <summary>Field number for the "SpecialId" field.</summary>
    public const int SpecialIdFieldNumber = 26;
    private string specialId_ = "";
    /// <summary>
    ///  PayGrade PayGrade = 23;
    ///  FansClub FansClub = 24;
    ///  Border Border = 25;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecialId {
      get { return specialId_; }
      set {
        specialId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AvatarBorder" field.</summary>
    public const int AvatarBorderFieldNumber = 27;
    private global::Douyin.Image avatarBorder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image AvatarBorder {
      get { return avatarBorder_; }
      set {
        avatarBorder_ = value;
      }
    }

    /// <summary>Field number for the "Medal" field.</summary>
    public const int MedalFieldNumber = 28;
    private global::Douyin.Image medal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Image Medal {
      get { return medal_; }
      set {
        medal_ = value;
      }
    }

    /// <summary>Field number for the "RealTimeIconsList" field.</summary>
    public const int RealTimeIconsListFieldNumber = 29;
    private static readonly pb::FieldCodec<global::Douyin.Image> _repeated_realTimeIconsList_codec
        = pb::FieldCodec.ForMessage(234, global::Douyin.Image.Parser);
    private readonly pbc::RepeatedField<global::Douyin.Image> realTimeIconsList_ = new pbc::RepeatedField<global::Douyin.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.Image> RealTimeIconsList {
      get { return realTimeIconsList_; }
    }

    /// <summary>Field number for the "displayId" field.</summary>
    public const int DisplayIdFieldNumber = 38;
    private string displayId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayId {
      get { return displayId_; }
      set {
        displayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secUid" field.</summary>
    public const int SecUidFieldNumber = 46;
    private string secUid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecUid {
      get { return secUid_; }
      set {
        secUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fanTicketCount" field.</summary>
    public const int FanTicketCountFieldNumber = 1022;
    private ulong fanTicketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FanTicketCount {
      get { return fanTicketCount_; }
      set {
        fanTicketCount_ = value;
      }
    }

    /// <summary>Field number for the "idStr" field.</summary>
    public const int IdStrFieldNumber = 1028;
    private string idStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdStr {
      get { return idStr_; }
      set {
        idStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ageRange" field.</summary>
    public const int AgeRangeFieldNumber = 1045;
    private uint ageRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AgeRange {
      get { return ageRange_; }
      set {
        ageRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ShortId != other.ShortId) return false;
      if (NickName != other.NickName) return false;
      if (Gender != other.Gender) return false;
      if (Signature != other.Signature) return false;
      if (Level != other.Level) return false;
      if (Birthday != other.Birthday) return false;
      if (Telephone != other.Telephone) return false;
      if (!object.Equals(AvatarThumb, other.AvatarThumb)) return false;
      if (!object.Equals(AvatarMedium, other.AvatarMedium)) return false;
      if (!object.Equals(AvatarLarge, other.AvatarLarge)) return false;
      if (Verified != other.Verified) return false;
      if (Experience != other.Experience) return false;
      if (City != other.City) return false;
      if (Status != other.Status) return false;
      if (CreateTime != other.CreateTime) return false;
      if (ModifyTime != other.ModifyTime) return false;
      if (Secret != other.Secret) return false;
      if (ShareQrcodeUri != other.ShareQrcodeUri) return false;
      if (IncomeSharePercent != other.IncomeSharePercent) return false;
      if(!badgeImageList_.Equals(other.badgeImageList_)) return false;
      if (!object.Equals(FollowInfo, other.FollowInfo)) return false;
      if (SpecialId != other.SpecialId) return false;
      if (!object.Equals(AvatarBorder, other.AvatarBorder)) return false;
      if (!object.Equals(Medal, other.Medal)) return false;
      if(!realTimeIconsList_.Equals(other.realTimeIconsList_)) return false;
      if (DisplayId != other.DisplayId) return false;
      if (SecUid != other.SecUid) return false;
      if (FanTicketCount != other.FanTicketCount) return false;
      if (IdStr != other.IdStr) return false;
      if (AgeRange != other.AgeRange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ShortId != 0UL) hash ^= ShortId.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Birthday != 0UL) hash ^= Birthday.GetHashCode();
      if (Telephone.Length != 0) hash ^= Telephone.GetHashCode();
      if (avatarThumb_ != null) hash ^= AvatarThumb.GetHashCode();
      if (avatarMedium_ != null) hash ^= AvatarMedium.GetHashCode();
      if (avatarLarge_ != null) hash ^= AvatarLarge.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (ModifyTime != 0UL) hash ^= ModifyTime.GetHashCode();
      if (Secret != 0) hash ^= Secret.GetHashCode();
      if (ShareQrcodeUri.Length != 0) hash ^= ShareQrcodeUri.GetHashCode();
      if (IncomeSharePercent != 0) hash ^= IncomeSharePercent.GetHashCode();
      hash ^= badgeImageList_.GetHashCode();
      if (followInfo_ != null) hash ^= FollowInfo.GetHashCode();
      if (SpecialId.Length != 0) hash ^= SpecialId.GetHashCode();
      if (avatarBorder_ != null) hash ^= AvatarBorder.GetHashCode();
      if (medal_ != null) hash ^= Medal.GetHashCode();
      hash ^= realTimeIconsList_.GetHashCode();
      if (DisplayId.Length != 0) hash ^= DisplayId.GetHashCode();
      if (SecUid.Length != 0) hash ^= SecUid.GetHashCode();
      if (FanTicketCount != 0UL) hash ^= FanTicketCount.GetHashCode();
      if (IdStr.Length != 0) hash ^= IdStr.GetHashCode();
      if (AgeRange != 0) hash ^= AgeRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (ShortId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ShortId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Gender != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Gender);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Signature);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (Birthday != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Birthday);
      }
      if (Telephone.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Telephone);
      }
      if (avatarThumb_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AvatarThumb);
      }
      if (avatarMedium_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AvatarMedium);
      }
      if (avatarLarge_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AvatarLarge);
      }
      if (Verified != false) {
        output.WriteRawTag(96);
        output.WriteBool(Verified);
      }
      if (Experience != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Experience);
      }
      if (City.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(City);
      }
      if (Status != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Status);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(CreateTime);
      }
      if (ModifyTime != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(ModifyTime);
      }
      if (Secret != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Secret);
      }
      if (ShareQrcodeUri.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ShareQrcodeUri);
      }
      if (IncomeSharePercent != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(IncomeSharePercent);
      }
      badgeImageList_.WriteTo(output, _repeated_badgeImageList_codec);
      if (followInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(FollowInfo);
      }
      if (SpecialId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SpecialId);
      }
      if (avatarBorder_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(AvatarBorder);
      }
      if (medal_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Medal);
      }
      realTimeIconsList_.WriteTo(output, _repeated_realTimeIconsList_codec);
      if (DisplayId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(DisplayId);
      }
      if (SecUid.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(SecUid);
      }
      if (FanTicketCount != 0UL) {
        output.WriteRawTag(240, 63);
        output.WriteUInt64(FanTicketCount);
      }
      if (IdStr.Length != 0) {
        output.WriteRawTag(162, 64);
        output.WriteString(IdStr);
      }
      if (AgeRange != 0) {
        output.WriteRawTag(168, 65);
        output.WriteUInt32(AgeRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ShortId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShortId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Birthday != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Birthday);
      }
      if (Telephone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone);
      }
      if (avatarThumb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarThumb);
      }
      if (avatarMedium_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarMedium);
      }
      if (avatarLarge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarLarge);
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Experience);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CreateTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (ModifyTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ModifyTime);
      }
      if (Secret != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Secret);
      }
      if (ShareQrcodeUri.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShareQrcodeUri);
      }
      if (IncomeSharePercent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IncomeSharePercent);
      }
      size += badgeImageList_.CalculateSize(_repeated_badgeImageList_codec);
      if (followInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FollowInfo);
      }
      if (SpecialId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecialId);
      }
      if (avatarBorder_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvatarBorder);
      }
      if (medal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Medal);
      }
      size += realTimeIconsList_.CalculateSize(_repeated_realTimeIconsList_codec);
      if (DisplayId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DisplayId);
      }
      if (SecUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecUid);
      }
      if (FanTicketCount != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(FanTicketCount);
      }
      if (IdStr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IdStr);
      }
      if (AgeRange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AgeRange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ShortId != 0UL) {
        ShortId = other.ShortId;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Birthday != 0UL) {
        Birthday = other.Birthday;
      }
      if (other.Telephone.Length != 0) {
        Telephone = other.Telephone;
      }
      if (other.avatarThumb_ != null) {
        if (avatarThumb_ == null) {
          avatarThumb_ = new global::Douyin.Image();
        }
        AvatarThumb.MergeFrom(other.AvatarThumb);
      }
      if (other.avatarMedium_ != null) {
        if (avatarMedium_ == null) {
          avatarMedium_ = new global::Douyin.Image();
        }
        AvatarMedium.MergeFrom(other.AvatarMedium);
      }
      if (other.avatarLarge_ != null) {
        if (avatarLarge_ == null) {
          avatarLarge_ = new global::Douyin.Image();
        }
        AvatarLarge.MergeFrom(other.AvatarLarge);
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.ModifyTime != 0UL) {
        ModifyTime = other.ModifyTime;
      }
      if (other.Secret != 0) {
        Secret = other.Secret;
      }
      if (other.ShareQrcodeUri.Length != 0) {
        ShareQrcodeUri = other.ShareQrcodeUri;
      }
      if (other.IncomeSharePercent != 0) {
        IncomeSharePercent = other.IncomeSharePercent;
      }
      badgeImageList_.Add(other.badgeImageList_);
      if (other.followInfo_ != null) {
        if (followInfo_ == null) {
          followInfo_ = new global::Douyin.FollowInfo();
        }
        FollowInfo.MergeFrom(other.FollowInfo);
      }
      if (other.SpecialId.Length != 0) {
        SpecialId = other.SpecialId;
      }
      if (other.avatarBorder_ != null) {
        if (avatarBorder_ == null) {
          avatarBorder_ = new global::Douyin.Image();
        }
        AvatarBorder.MergeFrom(other.AvatarBorder);
      }
      if (other.medal_ != null) {
        if (medal_ == null) {
          medal_ = new global::Douyin.Image();
        }
        Medal.MergeFrom(other.Medal);
      }
      realTimeIconsList_.Add(other.realTimeIconsList_);
      if (other.DisplayId.Length != 0) {
        DisplayId = other.DisplayId;
      }
      if (other.SecUid.Length != 0) {
        SecUid = other.SecUid;
      }
      if (other.FanTicketCount != 0UL) {
        FanTicketCount = other.FanTicketCount;
      }
      if (other.IdStr.Length != 0) {
        IdStr = other.IdStr;
      }
      if (other.AgeRange != 0) {
        AgeRange = other.AgeRange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            ShortId = input.ReadUInt64();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            Gender = input.ReadUInt32();
            break;
          }
          case 42: {
            Signature = input.ReadString();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            Birthday = input.ReadUInt64();
            break;
          }
          case 66: {
            Telephone = input.ReadString();
            break;
          }
          case 74: {
            if (avatarThumb_ == null) {
              avatarThumb_ = new global::Douyin.Image();
            }
            input.ReadMessage(avatarThumb_);
            break;
          }
          case 82: {
            if (avatarMedium_ == null) {
              avatarMedium_ = new global::Douyin.Image();
            }
            input.ReadMessage(avatarMedium_);
            break;
          }
          case 90: {
            if (avatarLarge_ == null) {
              avatarLarge_ = new global::Douyin.Image();
            }
            input.ReadMessage(avatarLarge_);
            break;
          }
          case 96: {
            Verified = input.ReadBool();
            break;
          }
          case 104: {
            Experience = input.ReadUInt32();
            break;
          }
          case 114: {
            City = input.ReadString();
            break;
          }
          case 120: {
            Status = input.ReadInt32();
            break;
          }
          case 128: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 136: {
            ModifyTime = input.ReadUInt64();
            break;
          }
          case 144: {
            Secret = input.ReadUInt32();
            break;
          }
          case 154: {
            ShareQrcodeUri = input.ReadString();
            break;
          }
          case 160: {
            IncomeSharePercent = input.ReadUInt32();
            break;
          }
          case 170: {
            badgeImageList_.AddEntriesFrom(input, _repeated_badgeImageList_codec);
            break;
          }
          case 178: {
            if (followInfo_ == null) {
              followInfo_ = new global::Douyin.FollowInfo();
            }
            input.ReadMessage(followInfo_);
            break;
          }
          case 210: {
            SpecialId = input.ReadString();
            break;
          }
          case 218: {
            if (avatarBorder_ == null) {
              avatarBorder_ = new global::Douyin.Image();
            }
            input.ReadMessage(avatarBorder_);
            break;
          }
          case 226: {
            if (medal_ == null) {
              medal_ = new global::Douyin.Image();
            }
            input.ReadMessage(medal_);
            break;
          }
          case 234: {
            realTimeIconsList_.AddEntriesFrom(input, _repeated_realTimeIconsList_codec);
            break;
          }
          case 306: {
            DisplayId = input.ReadString();
            break;
          }
          case 370: {
            SecUid = input.ReadString();
            break;
          }
          case 8176: {
            FanTicketCount = input.ReadUInt64();
            break;
          }
          case 8226: {
            IdStr = input.ReadString();
            break;
          }
          case 8360: {
            AgeRange = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FollowInfo : pb::IMessage<FollowInfo> {
    private static readonly pb::MessageParser<FollowInfo> _parser = new pb::MessageParser<FollowInfo>(() => new FollowInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FollowInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowInfo(FollowInfo other) : this() {
      followingCount_ = other.followingCount_;
      followerCount_ = other.followerCount_;
      followStatus_ = other.followStatus_;
      pushStatus_ = other.pushStatus_;
      remarkName_ = other.remarkName_;
      followerCountStr_ = other.followerCountStr_;
      followingCountStr_ = other.followingCountStr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowInfo Clone() {
      return new FollowInfo(this);
    }

    /// <summary>Field number for the "followingCount" field.</summary>
    public const int FollowingCountFieldNumber = 1;
    private ulong followingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FollowingCount {
      get { return followingCount_; }
      set {
        followingCount_ = value;
      }
    }

    /// <summary>Field number for the "followerCount" field.</summary>
    public const int FollowerCountFieldNumber = 2;
    private ulong followerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FollowerCount {
      get { return followerCount_; }
      set {
        followerCount_ = value;
      }
    }

    /// <summary>Field number for the "followStatus" field.</summary>
    public const int FollowStatusFieldNumber = 3;
    private ulong followStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FollowStatus {
      get { return followStatus_; }
      set {
        followStatus_ = value;
      }
    }

    /// <summary>Field number for the "pushStatus" field.</summary>
    public const int PushStatusFieldNumber = 4;
    private ulong pushStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PushStatus {
      get { return pushStatus_; }
      set {
        pushStatus_ = value;
      }
    }

    /// <summary>Field number for the "remarkName" field.</summary>
    public const int RemarkNameFieldNumber = 5;
    private string remarkName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemarkName {
      get { return remarkName_; }
      set {
        remarkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "followerCountStr" field.</summary>
    public const int FollowerCountStrFieldNumber = 6;
    private string followerCountStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FollowerCountStr {
      get { return followerCountStr_; }
      set {
        followerCountStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "followingCountStr" field.</summary>
    public const int FollowingCountStrFieldNumber = 7;
    private string followingCountStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FollowingCountStr {
      get { return followingCountStr_; }
      set {
        followingCountStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FollowInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FollowInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FollowingCount != other.FollowingCount) return false;
      if (FollowerCount != other.FollowerCount) return false;
      if (FollowStatus != other.FollowStatus) return false;
      if (PushStatus != other.PushStatus) return false;
      if (RemarkName != other.RemarkName) return false;
      if (FollowerCountStr != other.FollowerCountStr) return false;
      if (FollowingCountStr != other.FollowingCountStr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FollowingCount != 0UL) hash ^= FollowingCount.GetHashCode();
      if (FollowerCount != 0UL) hash ^= FollowerCount.GetHashCode();
      if (FollowStatus != 0UL) hash ^= FollowStatus.GetHashCode();
      if (PushStatus != 0UL) hash ^= PushStatus.GetHashCode();
      if (RemarkName.Length != 0) hash ^= RemarkName.GetHashCode();
      if (FollowerCountStr.Length != 0) hash ^= FollowerCountStr.GetHashCode();
      if (FollowingCountStr.Length != 0) hash ^= FollowingCountStr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FollowingCount != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(FollowingCount);
      }
      if (FollowerCount != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FollowerCount);
      }
      if (FollowStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FollowStatus);
      }
      if (PushStatus != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(PushStatus);
      }
      if (RemarkName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RemarkName);
      }
      if (FollowerCountStr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FollowerCountStr);
      }
      if (FollowingCountStr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FollowingCountStr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FollowingCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FollowingCount);
      }
      if (FollowerCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FollowerCount);
      }
      if (FollowStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FollowStatus);
      }
      if (PushStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PushStatus);
      }
      if (RemarkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemarkName);
      }
      if (FollowerCountStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FollowerCountStr);
      }
      if (FollowingCountStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FollowingCountStr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FollowInfo other) {
      if (other == null) {
        return;
      }
      if (other.FollowingCount != 0UL) {
        FollowingCount = other.FollowingCount;
      }
      if (other.FollowerCount != 0UL) {
        FollowerCount = other.FollowerCount;
      }
      if (other.FollowStatus != 0UL) {
        FollowStatus = other.FollowStatus;
      }
      if (other.PushStatus != 0UL) {
        PushStatus = other.PushStatus;
      }
      if (other.RemarkName.Length != 0) {
        RemarkName = other.RemarkName;
      }
      if (other.FollowerCountStr.Length != 0) {
        FollowerCountStr = other.FollowerCountStr;
      }
      if (other.FollowingCountStr.Length != 0) {
        FollowingCountStr = other.FollowingCountStr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FollowingCount = input.ReadUInt64();
            break;
          }
          case 16: {
            FollowerCount = input.ReadUInt64();
            break;
          }
          case 24: {
            FollowStatus = input.ReadUInt64();
            break;
          }
          case 32: {
            PushStatus = input.ReadUInt64();
            break;
          }
          case 42: {
            RemarkName = input.ReadString();
            break;
          }
          case 50: {
            FollowerCountStr = input.ReadString();
            break;
          }
          case 58: {
            FollowingCountStr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      urlListList_ = other.urlListList_.Clone();
      uri_ = other.uri_;
      height_ = other.height_;
      width_ = other.width_;
      avgColor_ = other.avgColor_;
      imageType_ = other.imageType_;
      openWebUrl_ = other.openWebUrl_;
      Content = other.content_ != null ? other.Content.Clone() : null;
      isAnimated_ = other.isAnimated_;
      FlexSettingList = other.flexSettingList_ != null ? other.FlexSettingList.Clone() : null;
      TextSettingList = other.textSettingList_ != null ? other.TextSettingList.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "urlListList" field.</summary>
    public const int UrlListListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_urlListList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> urlListList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UrlListList {
      get { return urlListList_; }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private ulong width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "avgColor" field.</summary>
    public const int AvgColorFieldNumber = 5;
    private string avgColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvgColor {
      get { return avgColor_; }
      set {
        avgColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageType" field.</summary>
    public const int ImageTypeFieldNumber = 6;
    private uint imageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageType {
      get { return imageType_; }
      set {
        imageType_ = value;
      }
    }

    /// <summary>Field number for the "openWebUrl" field.</summary>
    public const int OpenWebUrlFieldNumber = 7;
    private string openWebUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenWebUrl {
      get { return openWebUrl_; }
      set {
        openWebUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private global::Douyin.ImageContent content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.ImageContent Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "isAnimated" field.</summary>
    public const int IsAnimatedFieldNumber = 9;
    private bool isAnimated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAnimated {
      get { return isAnimated_; }
      set {
        isAnimated_ = value;
      }
    }

    /// <summary>Field number for the "FlexSettingList" field.</summary>
    public const int FlexSettingListFieldNumber = 10;
    private global::Douyin.NinePatchSetting flexSettingList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.NinePatchSetting FlexSettingList {
      get { return flexSettingList_; }
      set {
        flexSettingList_ = value;
      }
    }

    /// <summary>Field number for the "TextSettingList" field.</summary>
    public const int TextSettingListFieldNumber = 11;
    private global::Douyin.NinePatchSetting textSettingList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.NinePatchSetting TextSettingList {
      get { return textSettingList_; }
      set {
        textSettingList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!urlListList_.Equals(other.urlListList_)) return false;
      if (Uri != other.Uri) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (AvgColor != other.AvgColor) return false;
      if (ImageType != other.ImageType) return false;
      if (OpenWebUrl != other.OpenWebUrl) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if (IsAnimated != other.IsAnimated) return false;
      if (!object.Equals(FlexSettingList, other.FlexSettingList)) return false;
      if (!object.Equals(TextSettingList, other.TextSettingList)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= urlListList_.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (Width != 0UL) hash ^= Width.GetHashCode();
      if (AvgColor.Length != 0) hash ^= AvgColor.GetHashCode();
      if (ImageType != 0) hash ^= ImageType.GetHashCode();
      if (OpenWebUrl.Length != 0) hash ^= OpenWebUrl.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      if (IsAnimated != false) hash ^= IsAnimated.GetHashCode();
      if (flexSettingList_ != null) hash ^= FlexSettingList.GetHashCode();
      if (textSettingList_ != null) hash ^= TextSettingList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      urlListList_.WriteTo(output, _repeated_urlListList_codec);
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Height != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Height);
      }
      if (Width != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Width);
      }
      if (AvgColor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AvgColor);
      }
      if (ImageType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ImageType);
      }
      if (OpenWebUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OpenWebUrl);
      }
      if (content_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Content);
      }
      if (IsAnimated != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAnimated);
      }
      if (flexSettingList_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FlexSettingList);
      }
      if (textSettingList_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TextSettingList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += urlListList_.CalculateSize(_repeated_urlListList_codec);
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (Width != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Width);
      }
      if (AvgColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgColor);
      }
      if (ImageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageType);
      }
      if (OpenWebUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenWebUrl);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      if (IsAnimated != false) {
        size += 1 + 1;
      }
      if (flexSettingList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlexSettingList);
      }
      if (textSettingList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextSettingList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      urlListList_.Add(other.urlListList_);
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.Width != 0UL) {
        Width = other.Width;
      }
      if (other.AvgColor.Length != 0) {
        AvgColor = other.AvgColor;
      }
      if (other.ImageType != 0) {
        ImageType = other.ImageType;
      }
      if (other.OpenWebUrl.Length != 0) {
        OpenWebUrl = other.OpenWebUrl;
      }
      if (other.content_ != null) {
        if (content_ == null) {
          content_ = new global::Douyin.ImageContent();
        }
        Content.MergeFrom(other.Content);
      }
      if (other.IsAnimated != false) {
        IsAnimated = other.IsAnimated;
      }
      if (other.flexSettingList_ != null) {
        if (flexSettingList_ == null) {
          flexSettingList_ = new global::Douyin.NinePatchSetting();
        }
        FlexSettingList.MergeFrom(other.FlexSettingList);
      }
      if (other.textSettingList_ != null) {
        if (textSettingList_ == null) {
          textSettingList_ = new global::Douyin.NinePatchSetting();
        }
        TextSettingList.MergeFrom(other.TextSettingList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            urlListList_.AddEntriesFrom(input, _repeated_urlListList_codec);
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 24: {
            Height = input.ReadUInt64();
            break;
          }
          case 32: {
            Width = input.ReadUInt64();
            break;
          }
          case 42: {
            AvgColor = input.ReadString();
            break;
          }
          case 48: {
            ImageType = input.ReadUInt32();
            break;
          }
          case 58: {
            OpenWebUrl = input.ReadString();
            break;
          }
          case 66: {
            if (content_ == null) {
              content_ = new global::Douyin.ImageContent();
            }
            input.ReadMessage(content_);
            break;
          }
          case 72: {
            IsAnimated = input.ReadBool();
            break;
          }
          case 82: {
            if (flexSettingList_ == null) {
              flexSettingList_ = new global::Douyin.NinePatchSetting();
            }
            input.ReadMessage(flexSettingList_);
            break;
          }
          case 90: {
            if (textSettingList_ == null) {
              textSettingList_ = new global::Douyin.NinePatchSetting();
            }
            input.ReadMessage(textSettingList_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NinePatchSetting : pb::IMessage<NinePatchSetting> {
    private static readonly pb::MessageParser<NinePatchSetting> _parser = new pb::MessageParser<NinePatchSetting>(() => new NinePatchSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NinePatchSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NinePatchSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NinePatchSetting(NinePatchSetting other) : this() {
      settingListList_ = other.settingListList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NinePatchSetting Clone() {
      return new NinePatchSetting(this);
    }

    /// <summary>Field number for the "settingListList" field.</summary>
    public const int SettingListListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_settingListList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> settingListList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SettingListList {
      get { return settingListList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NinePatchSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NinePatchSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!settingListList_.Equals(other.settingListList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= settingListList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      settingListList_.WriteTo(output, _repeated_settingListList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += settingListList_.CalculateSize(_repeated_settingListList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NinePatchSetting other) {
      if (other == null) {
        return;
      }
      settingListList_.Add(other.settingListList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            settingListList_.AddEntriesFrom(input, _repeated_settingListList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImageContent : pb::IMessage<ImageContent> {
    private static readonly pb::MessageParser<ImageContent> _parser = new pb::MessageParser<ImageContent>(() => new ImageContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContent(ImageContent other) : this() {
      name_ = other.name_;
      fontColor_ = other.fontColor_;
      level_ = other.level_;
      alternativeText_ = other.alternativeText_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContent Clone() {
      return new ImageContent(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontColor" field.</summary>
    public const int FontColorFieldNumber = 2;
    private string fontColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FontColor {
      get { return fontColor_; }
      set {
        fontColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private ulong level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "alternativeText" field.</summary>
    public const int AlternativeTextFieldNumber = 4;
    private string alternativeText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlternativeText {
      get { return alternativeText_; }
      set {
        alternativeText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (FontColor != other.FontColor) return false;
      if (Level != other.Level) return false;
      if (AlternativeText != other.AlternativeText) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FontColor.Length != 0) hash ^= FontColor.GetHashCode();
      if (Level != 0UL) hash ^= Level.GetHashCode();
      if (AlternativeText.Length != 0) hash ^= AlternativeText.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (FontColor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FontColor);
      }
      if (Level != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Level);
      }
      if (AlternativeText.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AlternativeText);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FontColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FontColor);
      }
      if (Level != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Level);
      }
      if (AlternativeText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternativeText);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageContent other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FontColor.Length != 0) {
        FontColor = other.FontColor;
      }
      if (other.Level != 0UL) {
        Level = other.Level;
      }
      if (other.AlternativeText.Length != 0) {
        AlternativeText = other.AlternativeText;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            FontColor = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadUInt64();
            break;
          }
          case 34: {
            AlternativeText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PushFrame : pb::IMessage<PushFrame> {
    private static readonly pb::MessageParser<PushFrame> _parser = new pb::MessageParser<PushFrame>(() => new PushFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushFrame(PushFrame other) : this() {
      seqId_ = other.seqId_;
      logId_ = other.logId_;
      service_ = other.service_;
      method_ = other.method_;
      headersList_ = other.headersList_.Clone();
      payloadEncoding_ = other.payloadEncoding_;
      payloadType_ = other.payloadType_;
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushFrame Clone() {
      return new PushFrame(this);
    }

    /// <summary>Field number for the "seqId" field.</summary>
    public const int SeqIdFieldNumber = 1;
    private ulong seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "logId" field.</summary>
    public const int LogIdFieldNumber = 2;
    private ulong logId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogId {
      get { return logId_; }
      set {
        logId_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 3;
    private ulong service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 4;
    private ulong method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "headersList" field.</summary>
    public const int HeadersListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Douyin.HeadersList> _repeated_headersList_codec
        = pb::FieldCodec.ForMessage(42, global::Douyin.HeadersList.Parser);
    private readonly pbc::RepeatedField<global::Douyin.HeadersList> headersList_ = new pbc::RepeatedField<global::Douyin.HeadersList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.HeadersList> HeadersList {
      get { return headersList_; }
    }

    /// <summary>Field number for the "payloadEncoding" field.</summary>
    public const int PayloadEncodingFieldNumber = 6;
    private string payloadEncoding_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayloadEncoding {
      get { return payloadEncoding_; }
      set {
        payloadEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payloadType" field.</summary>
    public const int PayloadTypeFieldNumber = 7;
    private string payloadType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayloadType {
      get { return payloadType_; }
      set {
        payloadType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 8;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqId != other.SeqId) return false;
      if (LogId != other.LogId) return false;
      if (Service != other.Service) return false;
      if (Method != other.Method) return false;
      if(!headersList_.Equals(other.headersList_)) return false;
      if (PayloadEncoding != other.PayloadEncoding) return false;
      if (PayloadType != other.PayloadType) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqId != 0UL) hash ^= SeqId.GetHashCode();
      if (LogId != 0UL) hash ^= LogId.GetHashCode();
      if (Service != 0UL) hash ^= Service.GetHashCode();
      if (Method != 0UL) hash ^= Method.GetHashCode();
      hash ^= headersList_.GetHashCode();
      if (PayloadEncoding.Length != 0) hash ^= PayloadEncoding.GetHashCode();
      if (PayloadType.Length != 0) hash ^= PayloadType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SeqId);
      }
      if (LogId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LogId);
      }
      if (Service != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Service);
      }
      if (Method != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Method);
      }
      headersList_.WriteTo(output, _repeated_headersList_codec);
      if (PayloadEncoding.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PayloadEncoding);
      }
      if (PayloadType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PayloadType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeqId);
      }
      if (LogId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogId);
      }
      if (Service != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Service);
      }
      if (Method != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Method);
      }
      size += headersList_.CalculateSize(_repeated_headersList_codec);
      if (PayloadEncoding.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadEncoding);
      }
      if (PayloadType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushFrame other) {
      if (other == null) {
        return;
      }
      if (other.SeqId != 0UL) {
        SeqId = other.SeqId;
      }
      if (other.LogId != 0UL) {
        LogId = other.LogId;
      }
      if (other.Service != 0UL) {
        Service = other.Service;
      }
      if (other.Method != 0UL) {
        Method = other.Method;
      }
      headersList_.Add(other.headersList_);
      if (other.PayloadEncoding.Length != 0) {
        PayloadEncoding = other.PayloadEncoding;
      }
      if (other.PayloadType.Length != 0) {
        PayloadType = other.PayloadType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeqId = input.ReadUInt64();
            break;
          }
          case 16: {
            LogId = input.ReadUInt64();
            break;
          }
          case 24: {
            Service = input.ReadUInt64();
            break;
          }
          case 32: {
            Method = input.ReadUInt64();
            break;
          }
          case 42: {
            headersList_.AddEntriesFrom(input, _repeated_headersList_codec);
            break;
          }
          case 50: {
            PayloadEncoding = input.ReadString();
            break;
          }
          case 58: {
            PayloadType = input.ReadString();
            break;
          }
          case 66: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class kk : pb::IMessage<kk> {
    private static readonly pb::MessageParser<kk> _parser = new pb::MessageParser<kk>(() => new kk());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<kk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public kk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public kk(kk other) : this() {
      k_ = other.k_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public kk Clone() {
      return new kk(this);
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 14;
    private uint k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as kk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(kk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(K);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(K);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(kk other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 112: {
            K = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendMessageBody : pb::IMessage<SendMessageBody> {
    private static readonly pb::MessageParser<SendMessageBody> _parser = new pb::MessageParser<SendMessageBody>(() => new SendMessageBody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMessageBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageBody(SendMessageBody other) : this() {
      conversationId_ = other.conversationId_;
      conversationType_ = other.conversationType_;
      conversationShortId_ = other.conversationShortId_;
      content_ = other.content_;
      ext_ = other.ext_.Clone();
      messageType_ = other.messageType_;
      ticket_ = other.ticket_;
      clientMessageId_ = other.clientMessageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMessageBody Clone() {
      return new SendMessageBody(this);
    }

    /// <summary>Field number for the "conversationId" field.</summary>
    public const int ConversationIdFieldNumber = 1;
    private string conversationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conversationType" field.</summary>
    public const int ConversationTypeFieldNumber = 2;
    private uint conversationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConversationType {
      get { return conversationType_; }
      set {
        conversationType_ = value;
      }
    }

    /// <summary>Field number for the "conversationShortId" field.</summary>
    public const int ConversationShortIdFieldNumber = 3;
    private ulong conversationShortId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConversationShortId {
      get { return conversationShortId_; }
      set {
        conversationShortId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Douyin.ExtList> _repeated_ext_codec
        = pb::FieldCodec.ForMessage(42, global::Douyin.ExtList.Parser);
    private readonly pbc::RepeatedField<global::Douyin.ExtList> ext_ = new pbc::RepeatedField<global::Douyin.ExtList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.ExtList> Ext {
      get { return ext_; }
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 6;
    private uint messageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageType {
      get { return messageType_; }
      set {
        messageType_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 7;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientMessageId" field.</summary>
    public const int ClientMessageIdFieldNumber = 8;
    private string clientMessageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientMessageId {
      get { return clientMessageId_; }
      set {
        clientMessageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMessageBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMessageBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversationId != other.ConversationId) return false;
      if (ConversationType != other.ConversationType) return false;
      if (ConversationShortId != other.ConversationShortId) return false;
      if (Content != other.Content) return false;
      if(!ext_.Equals(other.ext_)) return false;
      if (MessageType != other.MessageType) return false;
      if (Ticket != other.Ticket) return false;
      if (ClientMessageId != other.ClientMessageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConversationId.Length != 0) hash ^= ConversationId.GetHashCode();
      if (ConversationType != 0) hash ^= ConversationType.GetHashCode();
      if (ConversationShortId != 0UL) hash ^= ConversationShortId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= ext_.GetHashCode();
      if (MessageType != 0) hash ^= MessageType.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (ClientMessageId.Length != 0) hash ^= ClientMessageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConversationId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConversationId);
      }
      if (ConversationType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConversationType);
      }
      if (ConversationShortId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConversationShortId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      ext_.WriteTo(output, _repeated_ext_codec);
      if (MessageType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MessageType);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ticket);
      }
      if (ClientMessageId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ClientMessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConversationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConversationId);
      }
      if (ConversationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConversationType);
      }
      if (ConversationShortId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConversationShortId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += ext_.CalculateSize(_repeated_ext_codec);
      if (MessageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageType);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (ClientMessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientMessageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMessageBody other) {
      if (other == null) {
        return;
      }
      if (other.ConversationId.Length != 0) {
        ConversationId = other.ConversationId;
      }
      if (other.ConversationType != 0) {
        ConversationType = other.ConversationType;
      }
      if (other.ConversationShortId != 0UL) {
        ConversationShortId = other.ConversationShortId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      ext_.Add(other.ext_);
      if (other.MessageType != 0) {
        MessageType = other.MessageType;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.ClientMessageId.Length != 0) {
        ClientMessageId = other.ClientMessageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConversationId = input.ReadString();
            break;
          }
          case 16: {
            ConversationType = input.ReadUInt32();
            break;
          }
          case 24: {
            ConversationShortId = input.ReadUInt64();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            ext_.AddEntriesFrom(input, _repeated_ext_codec);
            break;
          }
          case 48: {
            MessageType = input.ReadUInt32();
            break;
          }
          case 58: {
            Ticket = input.ReadString();
            break;
          }
          case 66: {
            ClientMessageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExtList : pb::IMessage<ExtList> {
    private static readonly pb::MessageParser<ExtList> _parser = new pb::MessageParser<ExtList>(() => new ExtList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtList(ExtList other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtList Clone() {
      return new ExtList(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtList other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rsp : pb::IMessage<Rsp> {
    private static readonly pb::MessageParser<Rsp> _parser = new pb::MessageParser<Rsp>(() => new Rsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rsp(Rsp other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
      d_ = other.d_;
      e_ = other.e_;
      F = other.f_ != null ? other.F.Clone() : null;
      g_ = other.g_;
      h_ = other.h_;
      i_ = other.i_;
      j_ = other.j_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rsp Clone() {
      return new Rsp(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private int a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private int c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 4;
    private string d_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string D {
      get { return d_; }
      set {
        d_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "e" field.</summary>
    public const int EFieldNumber = 5;
    private int e_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int E {
      get { return e_; }
      set {
        e_ = value;
      }
    }

    /// <summary>Field number for the "f" field.</summary>
    public const int FFieldNumber = 6;
    private global::Douyin.Rsp.Types.F f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.Rsp.Types.F F {
      get { return f_; }
      set {
        f_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 7;
    private string g_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string G {
      get { return g_; }
      set {
        g_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 10;
    private ulong h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 11;
    private ulong i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 13;
    private ulong j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong J {
      get { return j_; }
      set {
        j_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      if (D != other.D) return false;
      if (E != other.E) return false;
      if (!object.Equals(F, other.F)) return false;
      if (G != other.G) return false;
      if (H != other.H) return false;
      if (I != other.I) return false;
      if (J != other.J) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (C != 0) hash ^= C.GetHashCode();
      if (D.Length != 0) hash ^= D.GetHashCode();
      if (E != 0) hash ^= E.GetHashCode();
      if (f_ != null) hash ^= F.GetHashCode();
      if (G.Length != 0) hash ^= G.GetHashCode();
      if (H != 0UL) hash ^= H.GetHashCode();
      if (I != 0UL) hash ^= I.GetHashCode();
      if (J != 0UL) hash ^= J.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(B);
      }
      if (C != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(C);
      }
      if (D.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(D);
      }
      if (E != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(E);
      }
      if (f_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(F);
      }
      if (G.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(G);
      }
      if (H != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(H);
      }
      if (I != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(I);
      }
      if (J != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(J);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(C);
      }
      if (D.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(D);
      }
      if (E != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(E);
      }
      if (f_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(F);
      }
      if (G.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(G);
      }
      if (H != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(H);
      }
      if (I != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(I);
      }
      if (J != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(J);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rsp other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.C != 0) {
        C = other.C;
      }
      if (other.D.Length != 0) {
        D = other.D;
      }
      if (other.E != 0) {
        E = other.E;
      }
      if (other.f_ != null) {
        if (f_ == null) {
          f_ = new global::Douyin.Rsp.Types.F();
        }
        F.MergeFrom(other.F);
      }
      if (other.G.Length != 0) {
        G = other.G;
      }
      if (other.H != 0UL) {
        H = other.H;
      }
      if (other.I != 0UL) {
        I = other.I;
      }
      if (other.J != 0UL) {
        J = other.J;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadInt32();
            break;
          }
          case 16: {
            B = input.ReadInt32();
            break;
          }
          case 24: {
            C = input.ReadInt32();
            break;
          }
          case 34: {
            D = input.ReadString();
            break;
          }
          case 40: {
            E = input.ReadInt32();
            break;
          }
          case 50: {
            if (f_ == null) {
              f_ = new global::Douyin.Rsp.Types.F();
            }
            input.ReadMessage(f_);
            break;
          }
          case 58: {
            G = input.ReadString();
            break;
          }
          case 80: {
            H = input.ReadUInt64();
            break;
          }
          case 88: {
            I = input.ReadUInt64();
            break;
          }
          case 104: {
            J = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Rsp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class F : pb::IMessage<F> {
        private static readonly pb::MessageParser<F> _parser = new pb::MessageParser<F>(() => new F());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<F> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Douyin.Rsp.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public F() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public F(F other) : this() {
          q1_ = other.q1_;
          q3_ = other.q3_;
          q4_ = other.q4_;
          q5_ = other.q5_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public F Clone() {
          return new F(this);
        }

        /// <summary>Field number for the "q1" field.</summary>
        public const int Q1FieldNumber = 1;
        private ulong q1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Q1 {
          get { return q1_; }
          set {
            q1_ = value;
          }
        }

        /// <summary>Field number for the "q3" field.</summary>
        public const int Q3FieldNumber = 3;
        private ulong q3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Q3 {
          get { return q3_; }
          set {
            q3_ = value;
          }
        }

        /// <summary>Field number for the "q4" field.</summary>
        public const int Q4FieldNumber = 4;
        private string q4_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Q4 {
          get { return q4_; }
          set {
            q4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "q5" field.</summary>
        public const int Q5FieldNumber = 5;
        private ulong q5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Q5 {
          get { return q5_; }
          set {
            q5_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as F);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(F other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Q1 != other.Q1) return false;
          if (Q3 != other.Q3) return false;
          if (Q4 != other.Q4) return false;
          if (Q5 != other.Q5) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Q1 != 0UL) hash ^= Q1.GetHashCode();
          if (Q3 != 0UL) hash ^= Q3.GetHashCode();
          if (Q4.Length != 0) hash ^= Q4.GetHashCode();
          if (Q5 != 0UL) hash ^= Q5.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Q1 != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Q1);
          }
          if (Q3 != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Q3);
          }
          if (Q4.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Q4);
          }
          if (Q5 != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Q5);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Q1 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Q1);
          }
          if (Q3 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Q3);
          }
          if (Q4.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Q4);
          }
          if (Q5 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Q5);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(F other) {
          if (other == null) {
            return;
          }
          if (other.Q1 != 0UL) {
            Q1 = other.Q1;
          }
          if (other.Q3 != 0UL) {
            Q3 = other.Q3;
          }
          if (other.Q4.Length != 0) {
            Q4 = other.Q4;
          }
          if (other.Q5 != 0UL) {
            Q5 = other.Q5;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Q1 = input.ReadUInt64();
                break;
              }
              case 24: {
                Q3 = input.ReadUInt64();
                break;
              }
              case 34: {
                Q4 = input.ReadString();
                break;
              }
              case 40: {
                Q5 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PreMessage : pb::IMessage<PreMessage> {
    private static readonly pb::MessageParser<PreMessage> _parser = new pb::MessageParser<PreMessage>(() => new PreMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PreMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreMessage(PreMessage other) : this() {
      cmd_ = other.cmd_;
      sequenceId_ = other.sequenceId_;
      sdkVersion_ = other.sdkVersion_;
      token_ = other.token_;
      refer_ = other.refer_;
      inboxType_ = other.inboxType_;
      buildNumber_ = other.buildNumber_;
      SendMessageBody = other.sendMessageBody_ != null ? other.SendMessageBody.Clone() : null;
      aa_ = other.aa_;
      devicePlatform_ = other.devicePlatform_;
      headers_ = other.headers_.Clone();
      authType_ = other.authType_;
      biz_ = other.biz_;
      access_ = other.access_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PreMessage Clone() {
      return new PreMessage(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private uint cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "sequenceId" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private uint sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceId {
      get { return sequenceId_; }
      set {
        sequenceId_ = value;
      }
    }

    /// <summary>Field number for the "sdkVersion" field.</summary>
    public const int SdkVersionFieldNumber = 3;
    private string sdkVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refer" field.</summary>
    public const int ReferFieldNumber = 5;
    private uint refer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Refer {
      get { return refer_; }
      set {
        refer_ = value;
      }
    }

    /// <summary>Field number for the "inboxType" field.</summary>
    public const int InboxTypeFieldNumber = 6;
    private uint inboxType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InboxType {
      get { return inboxType_; }
      set {
        inboxType_ = value;
      }
    }

    /// <summary>Field number for the "buildNumber" field.</summary>
    public const int BuildNumberFieldNumber = 7;
    private string buildNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildNumber {
      get { return buildNumber_; }
      set {
        buildNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sendMessageBody" field.</summary>
    public const int SendMessageBodyFieldNumber = 8;
    private global::Douyin.SendMessageBody sendMessageBody_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Douyin.SendMessageBody SendMessageBody {
      get { return sendMessageBody_; }
      set {
        sendMessageBody_ = value;
      }
    }

    /// <summary>Field number for the "aa" field.</summary>
    public const int AaFieldNumber = 9;
    private string aa_ = "";
    /// <summary>
    /// 字段名待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Aa {
      get { return aa_; }
      set {
        aa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devicePlatform" field.</summary>
    public const int DevicePlatformFieldNumber = 11;
    private string devicePlatform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DevicePlatform {
      get { return devicePlatform_; }
      set {
        devicePlatform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Douyin.HeadersList> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(122, global::Douyin.HeadersList.Parser);
    private readonly pbc::RepeatedField<global::Douyin.HeadersList> headers_ = new pbc::RepeatedField<global::Douyin.HeadersList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Douyin.HeadersList> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "authType" field.</summary>
    public const int AuthTypeFieldNumber = 18;
    private uint authType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "biz" field.</summary>
    public const int BizFieldNumber = 21;
    private string biz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Biz {
      get { return biz_; }
      set {
        biz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 22;
    private string access_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Access {
      get { return access_; }
      set {
        access_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PreMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PreMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (SequenceId != other.SequenceId) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (Token != other.Token) return false;
      if (Refer != other.Refer) return false;
      if (InboxType != other.InboxType) return false;
      if (BuildNumber != other.BuildNumber) return false;
      if (!object.Equals(SendMessageBody, other.SendMessageBody)) return false;
      if (Aa != other.Aa) return false;
      if (DevicePlatform != other.DevicePlatform) return false;
      if(!headers_.Equals(other.headers_)) return false;
      if (AuthType != other.AuthType) return false;
      if (Biz != other.Biz) return false;
      if (Access != other.Access) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (SequenceId != 0) hash ^= SequenceId.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Refer != 0) hash ^= Refer.GetHashCode();
      if (InboxType != 0) hash ^= InboxType.GetHashCode();
      if (BuildNumber.Length != 0) hash ^= BuildNumber.GetHashCode();
      if (sendMessageBody_ != null) hash ^= SendMessageBody.GetHashCode();
      if (Aa.Length != 0) hash ^= Aa.GetHashCode();
      if (DevicePlatform.Length != 0) hash ^= DevicePlatform.GetHashCode();
      hash ^= headers_.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (Biz.Length != 0) hash ^= Biz.GetHashCode();
      if (Access.Length != 0) hash ^= Access.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cmd);
      }
      if (SequenceId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SequenceId);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SdkVersion);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (Refer != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Refer);
      }
      if (InboxType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(InboxType);
      }
      if (BuildNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BuildNumber);
      }
      if (sendMessageBody_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SendMessageBody);
      }
      if (Aa.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Aa);
      }
      if (DevicePlatform.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DevicePlatform);
      }
      headers_.WriteTo(output, _repeated_headers_codec);
      if (AuthType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AuthType);
      }
      if (Biz.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Biz);
      }
      if (Access.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Access);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmd);
      }
      if (SequenceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceId);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Refer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Refer);
      }
      if (InboxType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InboxType);
      }
      if (BuildNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildNumber);
      }
      if (sendMessageBody_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendMessageBody);
      }
      if (Aa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Aa);
      }
      if (DevicePlatform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DevicePlatform);
      }
      size += headers_.CalculateSize(_repeated_headers_codec);
      if (AuthType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AuthType);
      }
      if (Biz.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Biz);
      }
      if (Access.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Access);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PreMessage other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.SequenceId != 0) {
        SequenceId = other.SequenceId;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Refer != 0) {
        Refer = other.Refer;
      }
      if (other.InboxType != 0) {
        InboxType = other.InboxType;
      }
      if (other.BuildNumber.Length != 0) {
        BuildNumber = other.BuildNumber;
      }
      if (other.sendMessageBody_ != null) {
        if (sendMessageBody_ == null) {
          sendMessageBody_ = new global::Douyin.SendMessageBody();
        }
        SendMessageBody.MergeFrom(other.SendMessageBody);
      }
      if (other.Aa.Length != 0) {
        Aa = other.Aa;
      }
      if (other.DevicePlatform.Length != 0) {
        DevicePlatform = other.DevicePlatform;
      }
      headers_.Add(other.headers_);
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.Biz.Length != 0) {
        Biz = other.Biz;
      }
      if (other.Access.Length != 0) {
        Access = other.Access;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cmd = input.ReadUInt32();
            break;
          }
          case 16: {
            SequenceId = input.ReadUInt32();
            break;
          }
          case 26: {
            SdkVersion = input.ReadString();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
          case 40: {
            Refer = input.ReadUInt32();
            break;
          }
          case 48: {
            InboxType = input.ReadUInt32();
            break;
          }
          case 58: {
            BuildNumber = input.ReadString();
            break;
          }
          case 66: {
            if (sendMessageBody_ == null) {
              sendMessageBody_ = new global::Douyin.SendMessageBody();
            }
            input.ReadMessage(sendMessageBody_);
            break;
          }
          case 74: {
            Aa = input.ReadString();
            break;
          }
          case 90: {
            DevicePlatform = input.ReadString();
            break;
          }
          case 122: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 144: {
            AuthType = input.ReadUInt32();
            break;
          }
          case 170: {
            Biz = input.ReadString();
            break;
          }
          case 178: {
            Access = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeadersList : pb::IMessage<HeadersList> {
    private static readonly pb::MessageParser<HeadersList> _parser = new pb::MessageParser<HeadersList>(() => new HeadersList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadersList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Douyin.DyReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersList(HeadersList other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersList Clone() {
      return new HeadersList(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadersList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadersList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadersList other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
